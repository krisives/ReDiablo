
Attack codes:

~0044F76D	player vs. monster	melee
~0042A9E3	player vs. monster	arrow


Modified current life	687910

0040432A	Unknown code (fild, ffidiv, fmul, etc.)
004043BD	Unknown code (fild, ffidiv, fmul, etc.)
004044F5	Unknown code (fild, ffidiv, fmul, etc.)
004054F2	Mouse over other character
00405F9C	? Possibly displaying character info
00406C54	Checks for death
00408100	?Compares to see if it is exactly 0.
0040814B	?Compares to see if it is exactly 0.
00408289	?Compares to see if it is exactly 0.
0041F712	?Compares to see if it is exactly 0.
00420108	mod = base + life from items
00420125	Checks for death
00420324	Store life data for spell
00424941	Set life to max
00424B44	Set life to max
00424BC4	adds life
00424CCC	adds life
0042AC05	Checks for death
0042ADE8	? life div 3
0042AE86	subtracts life
0042AEB2	Checks for death
0042AF79	subtracts life
0042AFA5	Checks for death
0042B159	? life div 3
0042C8CF	Store life data for spell
0042CF1D	Add -1 to life	(during a cast spell)
0042D394	Store life data for spell
0042D50C	add edi to life
0042E0AC	add -6 to life
0042FAAF	mana shield related
........

Locations where the belt is referenced by 0068BEB0:
0041D9FE	? Move gold from cursor to belt
0041DA10	? Move item between cursor and belt
0041DA46	? Move item between cursor and belt
0041DA57	? something about cursor and belt

0041DF37	? Move item between cursor and belt

0041E6BD	? Nearby code looks for empty belt slot, probably for adding item to belt.


0041F78B

0042099B

004598BB

0045AB43

Locations where the belt is referenced by 0068BF74:

00406DC8
00406DCF
0041D943
0041D95B
0041D9B6

0041F9F1	? Tally gold on belt
0044E918
0044E932
0044E9BB
0044EA0F
0044EA1E
0044EAA7
0045C2A0
0045C327
0045C32D
0045C387
0045C38D

Where Primary Hand Item Durability (006881A0) is accressed
CALL 0044F5B8	Reduce weapon (successful hit)
	Called from 0044FEF4 (melee) and 0044FFEC (missile)
CALL 00450021	Reduce shield (successful block)
CALL 0045A489	?(0045A530)  perhaps repair related?
CALL 0045CB3F	Totally repairs an item?

=================================================

push (38h = spell rec. size) to next call
yes spell, pushed byte ptr [edi+00484BC8]
no spell, push 1Bh (27)
push dword ptr [004B9F64]
mov edx, 00000277
mov ecx, 00000275

004037D3:
push ebp
mov ebp, esp
sub esp, 0000000C
mov eax, dword ptr [4*edx+0069D230]
push ebx
add eax, ecx
push esi
add eax, dword ptr [0052B810]
push edi
mov [ebp-04], 004B9E60
mov dword ptr [ebp-08], eax
mov ebx, dword ptr [ebp+08]
mov eax, dword ptr [ebp+0C]
shl eax, 02
add ebx, eax
mov eax, dword ptr [ebx+04]
sub eax, dword ptr [ebx]
mov dword ptr [ebp-0C], eax
mov esi, dword ptr [ebp+08]
add esi, dword ptr [ebx]
mov edi, dword ptr [ebp-08]
mov eax, dword ptr [ebp-0C]
add eax, esi
mov dword ptr [ebp-0C], eax
mov ebx, dword ptr [ebp-04]

0040381B:
mov edx, dword ptr [ebp+10]

0040381E:
xor eax, eax
lodsb			load string (byte) at DS:SI
or al, al
js 00403860
sub edx, eax
mov ecx, eax
shr ecx, 1
jnb 00403832
lodsb
xlat			MOV AL,[BX+AL]
stosb			store string (byte) to ES:EDI
jcxz 0040385A	jump if CX is 0

00403832:
shr ecx, 1
jnb 00403846
lodsw
xlat
ror ax, 08
xlat
ror ax, 08
stosw
jcxz 0040385A

00403846:
lodsd
xlat
ror eax, 08
xlat
ror eax, 08
xlat
ror eax, 08
xlat
ror eax, 08
stosd
loop 00403846
or edx, edx
je 00403868
jmp 0040381E

00403860:
neg al
add edi, eax
sub edx, eax
jne 0040381E

00403868:
sub edi, 00000300
sub edi, dword ptr [ebp+10]
cmp esi, dword ptr [ebp-0C]
jne 0040381B
pop edi
pop esi
pop ebx
leave
ret 000C

=================================================

Called from 004045B8

0040399A:
push ecx
push edx
push ebp
mov ebp, dword ptr [00687774]		character #
push esi
mov eax, ebp
push edi
imul eax, 000054D8
mov cl, byte ptr [eax+0068782C]	spell to cast
mov bl, byte ptr [eax+00687830]	cast from (1..4)
movsx edi, cl				spell to cast
mov byte ptr [esp+13], cl		spell to cast
movsx esi, byte ptr [edi+eax+00687839]	spell level
movsx eax, byte ptr [eax+0068CBD0]	+ spell levels
add esi, eax				slvl + +slvls
cmp bl, 01					cast from & book
jne 004039FB				no, jump
cmp cl, FF					yes, spell & no spell
je 004039FB					no spell, jump
push 00000001				send true to call
push 00000001				send true to call
mov edx, edi				spell to cast
mov ecx, ebp				character #
call 00458D74				set eax to boolean
	is there enough mana and, if the caster is the local player, is their spell level above 0.
test eax, eax
jne 004039EF				true, skip
add bl, 03					set cast from to 4 (cast from nothing)

004039EF:
test esi, esi				test spell level
jg 004039F5					if spell level>0, skip
mov bl, 04					set cast from to 4

004039F5:
mov ebp, dword ptr [00687774]		character #

004039FB:
cmp byte ptr [005BC500], 00		?
jne 00403A19			if [005BC500]=true, skip
cmp bl, 04					cast from & nothing
je 00403A19				if cast from nothing, skip
mov eax, edi			spell to cast
imul eax, 00000038		spell x 38h (56)
cmp dword ptr [eax+004A3468], 00000000
jne 00403A19
mov bl, 04

00403A19:
imul ebp, 000054D8
cmp dword ptr [ebp+0068782C], 00000000	spell to cast
jge 00403A2A
mov bl, 04				no spell, cast from nothing

00403A2A:
mov cl, bl
call 0040387D
cmp byte ptr [esp+13], FF		spell to cast & no spell
push 00000038				pushed to next call (38h = spell rec. size)
je 00403A44					no spell, jump
movsx eax, byte ptr [edi+00484BC8]	?
push eax					yes spell, pushed ? to next call
jmp 00403A46

00403A44:
push 0000001B				no spell, push 1Bh (27) to next call

00403A46:
push dword ptr [004B9F64]		push to next call
mov edx, 00000277
mov ecx, 00000275
call 004037D3
pop edi
pop esi
pop ebp
pop ebx
pop ecx
ret

=================================================

0040431C:
push esi                      - store esi
mov esi, dword ptr [00687774] - ? character number (0..3) ?
imul esi, 000054D8            - length of character record
push esi                      - store character rec. loc.
fild dword ptr [esi+00687910] - ?fild? mod. current life
ffidiv dword ptr [esi+00687914]	mod max life
fmul qword ptr [0047A640]
call 0046BF20
push 00000050                 - push 50h (80)
mov dword ptr [esi+00687918], eax - ???
pop esi                       - set to 50h
sub esi, eax                  - subtract ???
cmp esi, 0000000B             - ??? and Bh (11)
jle 00404354
push 0000000B
pop esi                       - If esi>11, set to 11

00404354:
inc esi
mov edi, 0005D9AD
inc esi
mov ecx, dword ptr [004B9AC8]
push esi
push edi
push dword ptr [0052B810]
push esi
push edi
push dword ptr [0052B810]
push 00000115
push 00000058
pop edx
call 004042DC
cmp esi, 0000000D
je 004043AC
push 0000000D
mov ecx, dword ptr [004B9ACC]
pop eax
mov edx, 00000280
sub eax, esi
push eax
lea eax, dword ptr [esi+2*esi]
shl eax, 08
add eax, edi
push eax
lea eax, dword ptr [esi+4*esi]
push dword ptr [0052B810]
shl eax, 07
add eax, 000007ED
push eax
call 004042DC

004043AC:
pop edi
pop esi
ret

=======================================================

Used when the cursor hovers over an object (mouseover & item on cursor descripion code)

004052B1:
push ebx
push esi
push 0000022E
push 000000F1
push 0000003C
push 00000120
push 0000003E
mov ecx, 000000B1
pop edx
call 0040421A
xor ebx, ebx
cmp dword ptr [004B9E58], ebx
jne 00405309
cmp dword ptr [006ACE14], ebx		??boolean and false
jne 00405309
cmp byte ptr [004B9F90], FF
jne 00405309
cmp dword ptr [004B9F70], ebx		??booolean and false
jne 0040551A
mov byte ptr [004B9C48], bl		set description to nul
mov byte ptr [004B9B04], bl		set text color to white (default)
call 0040420B

00405309:
cmp dword ptr [004B9F70], ebx
jne 0040551A
cmp dword ptr [006ACE14], ebx
jne 0040551A
cmp dword ptr [004B9FB0], 0000000C		cursor image and (C and greater = item on cursor)
jl 004053E0						display info for item on ground.
mov eax, dword ptr [00687774]			local character #
imul eax, 000054E0				local character offset
cmp dword ptr [eax+0068CA38], 0000000B	item held held in cursor and gold
jne 00405368					display item held in cursor
mov esi, dword ptr [eax+0068CAF4]
........
describe gold code.

00405368:
cmp dword ptr [eax+0068CB94], ebx		Req. met for item on cursor & false
jne 0040538F
call 0040420B					clear data at 004B9AE8 & EC.
mov ecx, 004850C8					"Requirements not met"
push 00000001
pop esi
mov edx, esi
call 004041D9
mov dword ptr [004B9AEC], esi
jmp 00405520

0040538F:						DESCRIBE ITEM ON CURSOR (REQ. MET)
cmp dword ptr [eax+0068CA68], ebx		Id'ed and false
je 0040539F						if unid'ed, jump
lea eax, dword ptr [eax+0068CAAD]		Full Name
jmp 004053A5

0040539F:
lea eax, dword ptr [eax+0068CA6D]		Inid'ed name

004053A5:
push eax
push 004B9C48
call 0046B6B0
mov eax, dword ptr [00687774]
........

004053E0:
mov al, byte ptr [004B9F98]
cmp al, FF
je 004053F1
movsx ecx, al
call 00423708			display info for item on ground.

........

00405402:
mov eax, dword ptr [004B9F80]
mov esi, 004B9C48
cmp eax, FFFFFFFF
je 0040547D
cmp byte ptr [005BC4FC], bl
je 00405469
........ monster section ........
			monster offset
mov byte ptr [004B9B04], bl
push dword ptr [eax+0064E730]
push esi
call 0046B6B0
pop ecx
pop ecx
call 0040420B
mov eax, dword ptr [004B9F80]
imul eax, 000000E4
cmp byte ptr [eax+0064E714], bl
je 00405459
mov byte ptr [004B9B04], 03
call 0043B4BA
jmp 0040547D

00405459:
mov eax, dword ptr [eax+0064E734]	pointer to base monster type
movzx ecx, byte ptr [eax]		base monster type
call 0043B30A				Monster Mouseover
jmp 0040547D

00405469:
imul eax, 000000E8
add eax, 006AC018
push eax,
push esi
call 0046B6B0
pop ecx
pop ecx

0040547D:
mov al, byte ptr [004B9FA0]		character #/FF = not char
cmp al, FF
je 00405520
movsx eax, al
imul eax, 000054D8
add eax, 006878B8				Points to name
mov byte ptr [004B904], 03
push eax					Push name addr.
push esi					First line of text (004B9C48)
call 0046B6B0				Send text to screen
pop ecx					clear items off stack
pop ecx					clear items off stack
call 0040420B				clear data at 004B9AE8 & EC.
movsx eax, byte ptr [004B9FA0]	character #
imul eax, 000054D8
mov esi, 004B9B18				? line of text (004B9B18)
movsx eax, byte ptr [eax+00687930]	clvl
push eax
push 004850BC				"Level : %i"
push esi
call 0046B440
add esp, 0000000C
mov ecx, esi
push 00000001
pop edx
call 004041D9
movsx eax, byte ptr [004B9FA0]
imul eax, 000054D8
mov ecx, dword ptr [eax+00687914]
mov eax, dword ptr [eax+00687910]
........

00405520:
cmp byte ptr [004B9C48], bl
jne 00405530
cmp dword ptr [004B9AE8], ebx
je 00405535

00405530:
call 00405538

00405535:
pop esi
pop ebx
ret

=======================================================

00406E36: CALL set image for gold in cursor.  Only called from one location.

00406E36:
........

00406E72:
mov ecx, dword ptr [eax]
add ecx, 0000000C
jmp 004074AB
	jump to another jump, probably a waste of nanoseconds.  The only valid reason that I could see for it would be if the jump being jumped to was editing during runtime.
=======================================================
????
ecx	item graphics+0C

00407454:
shl ecx, 02					ecx x 4
push esi
push 0000001C
mov eax, dword ptr [ecx+0047A648]	eax ?
pop esi					set esi to 1C
mov dword ptr [004B9F94], eax		set [004B9F94] to [ecx+0047A648]
mov ecx, dword ptr [ecx+0047A918]
cdq
idiv esi					div 1C (28)
push esi
mov dword ptr [004B9F8C], ecx
mov dword ptr [004B9F84], eax
mov eax, ecx
cdq
pop ecx					1C
pop esi					restore esi
idiv ecx
mov dword ptr [004B9F78], eax
ret

=======================================================

00407488: Set cursor info, Both called and jumped to

In at least one source, ecx is the image number of a gold pile, increased by 0C.

mov eax, dword ptr [4*ecx+0047A648]
mov dword ptr [004B9FB0], ecx			Cursor image.
mov dword ptr [004B9F7C], eax
mov eax, dword ptr [4*ecx+0047A918]
mov dword ptr [004B9F74], eax
jmp 00407454

=======================================================

004074ED: CALL TOWN PORTAL MOUSEOVER
effect record stuff
town portal check (check for cursor at (tp.y-1), tp.x)

=======================================================

00407626: CALL UNHOLY ALTAR/LEVEL 15 MOUSEOVER

=======================================================
........
00409D3C:
mov dword ptr [0069D034], ebx
mov dword ptr [004B9100], ebx
mov byte ptr [0052CCE0], bl
call 0041904D
call 0041AEF7
jmp 00409FDA

=====================================================

........
0040ACDA:
cmp byte ptr [005BC4FC], 00
je 0040AD03
call 0043A6F4
call 00445185
........

=====================================================

0040B45F: CALL

Called from 0040B3B4, that call is called from 0040A6C1

0040B45F: CALL
push ecx
push ecx
mov al, byte ptr [005BC500]	dlvl
push ebx
push ebp
push esi
push edi
push 00000001
pop ebx
mov dword ptr [esp+10], ecx
cmp al, bl
je 0040B493				jump if dlvl 1
cmp al, 02
je 0040B489				jump if dlvl 2
jbe 0040B49B			Range check for too low.
cmp al, 04
ja 0040B49B				Range check for too high.
mov [esp+14], 000002F9		if dlvl 3 or 4
jmp 0040B49B

0040B489:
mov [esp+14], 000002B5		if dlvl 2
jmp 0040B49B

0040B493:
mov [esp+14], 00000215		if dlvl 1

0040B49B:
xor esi, esi
mov ebp, 0047AF10

0040B4A7:
call 0040BCE8
call 0040BD25
call 0040C200
cmp eax, dword ptr [esp+14]
jl 0040B4A7
call 0040C222
call 0040C266
........

======================================================

Call ?

edi	points to item on belt
eax	?base item
ecx	warrior	02D6		488D5E	86B5E
	rogue		026F		4889BF	867BF "I can't use this, yet."
	sorcerer	0208		488620	86420
	none of the above=0
al	?class

00416250:
call 0041638E	? eax comes back as ecx ?
xor edx, edx
lea ecx, dword ptr [eax+8*eax+004873D8]
push 00000000
push 00000000
call 00416268
ret

======================================================

?
edi	points to item on belt

			eax		ecx		?
	warrior	02D6		488D5E	86B5E
	rogue		026F		4889BF	867BF
	sorcerer	0208		488620	86420
	none of the above=0

two 0's pushed to the stack

00416268:
push ebp
mov ebp, esp
push ecx
push ecx
mov eax, dword ptr [00687774]
push ebx
imul eax, 000054D8
xor ebx, ebx
push esi
cmp byte ptr [eax+0068CBF2], bl
push edi
mov edi, edx
mov esi, ecx
je 00416296
cmp byte ptr [0067A660], 01
jne 0041631A

======================================================

0041638E:
push esi
mov esi, ecx
cmp esi, 00000314
je 004163DA
........
jne 004163DE

........

004163DE:
cmp esi, 000002CB
........

004163F4:
mov eax, esi
pop esi
ret

======================================================

00417BD7: CALL Set_eax_to_direction

from ([ebp+0C],[ebp+08]) to (edx,ecx)
set edx to 2 x dy
set ecx to 2 x dx

-/+     \ . 7 . /    x/y
      6 .\. . ./. 0     
    - _ . \ . / . _ -   
    . . - _\./_ - . .   
    5 . . _ * _ . . 1   
    . _ - ./.\. - _ .   
    - . . / . \ . . -   
      4 ./. . .\. 2     
-/-     / . 3 . \    +/-

When a direction is along a dividing spine, it will be a diagonal direction (i.e. 0, 2, 4 or 6).


00417BD7:
push esi
mov esi, dword ptr [ebp+08]
sub esi, ecx			dy
mov ecx, dword ptr [ebp+0C]
sub ecx, edx			dx
test esi, esi
jl 00417C12				dy<0, jump
test ecx, ecx
jl 00417BF9				dx<0, jump
lea edx, dword ptr [esi+esi]	set edx to 2 x dy
xor eax, eax			set eax to 0
cmp edx, ecx			2 x dy & dx
jge 00417C08			2 x dy >= dx, jump
push 00000001			
jmp 00417C07

00417BF9:
neg ecx
lea edx, dword ptr [esi+esi]	2 x dy
push 00000006
cmp edx, ecx			2 x dy & dx
pop eax
jge 00417C08			2 x dy >= dx, jump
push 00000005

00417C07:
pop eax

00417C08:
add ecx, ecx			2 x dx
cmp ecx, esi			2 x dx & dy
jge 00417C40			2 x dx >= dy, jump
push 00000007
jmp 00417C3F

00417C12:			dy<0
test ecx, ecx
jl 00417C26				dx<0
neg esi
push 00000002
lea edx, dword ptr [esi+esi]	2y
pop eax
cmp edx, ecx
jge 00417C37
push 00000001
jmp 00417C36

00417C26:
neg esi				make dy positive
neg ecx				make dx positive
lea edx, dword ptr [esi+esi]	2 x dy
push 00000004
cmp edx, ecx			2 x dy & dx
pop eax				set eax to 4
jge 00417C37			2 x dy >= dx, jump
push 00000005

00417C36:
pop eax

00417C37:			2 x dy >= dx
add ecx, ecx			2 x dx
cmp ecx, esi			2 x dx & dy
jge 00417C40			2 x dx >= dy
push 00000003

00417C3F:
pop eax

00417C40:
pop esi
ret 0008

========================================================

00417C44: CALL Set pRNG seed to ecx
and dword ptr [0052CC88], 00000000
mov dword ptr [0052CC68], ecx		pRNG seed
mov dword ptr [0052CC60], ecx
ret

--------------------------------------------------------

pRNG code

edx - range of number to be generated, 0..(esi-1)
if edx is<=0, eax will return 0 and edx will return edx.  otherwise, eax and edx return the result
ecx - absolute value of the seed

00417C58: Set_eax_to_seed_and_ecx_to_abs_seed
mov eax, dword ptr [0052CC68]	the seed
inc dword ptr [0052CC88]	?
imul eax, 015A4E35		multiply for pRNG
inc eax				+1
push eax				push seed
mov dword ptr [0052CC68], eax	store seed
call 0046C3E0			Set_Last_Push_To_Absolute_Value
pop ecx				pop absolute seed
ret

00417C77: set_eax_to_Rnd[edx]

Registers
	edx	init to range of random number generated.
	eax	set to result, a random number from 0 to (edx-1).

00417C77: CALL set_eax_to_Rnd[edx]
push esi		preserve esi
mov esi, edx	set esi to edx
test esi, esi
jg 00417C82		jump if edx is not (or greater than?) 0
xor eax, eax	set eax to 0
pop esi		restore esi
ret

00417C82:
cmp esi, 0000FFFF
jge 00417C94	esi>=FFFF, jump
call 00417C58	esi<FFFF, call Set_eax_to_seed_and_ecx_to_abs_seed
sar eax, 10		esi was <FFFF, shift by 10h (16)
jmp 00417C99

00417C94:
call 00417C58	Set_eax_to_seed_and_ecx_to_abs_seed

00417C99:
cdq			convert EAX to EDX:EAX
idiv esi		EDX:EAX div ESI = EAX remainer EDX
pop esi		restore esi
mov eax, edx	set eax to remainder
ret

=================================================

004183F8:
push ebp
mov ebp, esp
push ecx
push ecx
cmp dword ptr [0052B810], 00000000
push ebx
push esi
push edi
mov dword ptr [ebp-08], edx
mov byte ptr [ebp-04], cl
je 00418484
........
mov ebx, dword ptr [esi+4*eax]
mov ecx, dword ptr [ebp+18]
lea edx, dword ptr [esi+ebx]
movzx edi, word ptr [edx+ecx]

........

=================================================

0041AEF7:
and dword ptr [006357B0], 00000000
mov dword ptr [006357B8], 00000001
mov dword ptr [00635C80], 00001388
ret

=================================================

0041CA3A:

Called from
0041D500, 0041E720, 0041E747, 0041E76E, 0041E792,
0041E7CB, 0041E7F3, ........

ecx - character #

0041CA3A:
push ebp
mov ebp, esp
sub esp, 00000014
push ebx
push esi
push edi
mov eax, edx
push 0000000A
mov dword ptr [ebp-14], eax
mov dword ptr [ebp-0C], ecx		character #
pop edi					0A (10)
cdq
mov ecx, edi				0A (10)
mov [ebp-08], 00000001			loop max
idiv ecx					? div 10
xor edx, edx
lea eax, dword ptr [eax+4*eax]	? div 10 x 5
shl eax, 1					? div 10 x 10
mov ecx, eax				? div 10 x 10
mov dword ptr [ebp-10], eax		? div 10 x 10
cmp ecx, edx				? & 0
jge 0041CA6C				?>=0
xor ecx, ecx				If ?<0, set ? to 0

0041CA6C:
cmp dword ptr [ebp+0C], edx		OUTSIDE LOOP MAX to 0
mov dword ptr [ebp-04], edx
jle 0041CAE4
jmp 0041CA7B

0041CA76:					OUTSIDE LOOP:
mov eax, dword ptr [ebp-10]
xor edx, edx

0041CA7B:
cmp dword ptr [ebp-08], edx	loop max & 0
je 0041CB8F
cmp ecx, 00000028			40 (number of inventory slots)
jl 0041CA8C
mov dword ptr [ebp-08], edx

0041CA8C:
mov eax, dword ptr [ebp-14]
mov esi, edi			0A (10)
cdq
idiv esi				div 10
xor esi, esi					set counter to 0
cmp edx, esi
jge 0041CA9C
xor edx, edx

0041CA9C:
cmp dword ptr [ebp+08], esi			[ebp+08] & counter
jle 0041CAD2					<=, skip loop

0041CAA1:						INSIDE LOOP
cmp dword ptr [ebp-08], 00000000
je 0041CAD2
cmp edx, edi
jl 0041CAB1
and dword ptr [ebp-08], 00000000
jmp 0041CACB

0041CAB1:
mov eax, dword ptr [ebp-0C]			character #
xor ebx, ebx
imul eax, 000054D8
add eax, ecx
cmp byte ptr [eax+edx+0068BE88], bl		backpack slot
sete bl						set bl to boolean (?=bl)
mov dword ptr [ebp-08], ebx

0041CACB:
inc edx
inc esi						inc counter
cmp esi, dword ptr [ebp+08]			counter & [ebp+08]
jl 0041CAA1						if esi<[ebp+08], jmp INSIDE LOOP

0041CAD2:
add ecx, edi
inc [ebp-04]					counter
mov eax, dword ptr [ebp-04]
cmp eax, dword ptr [ebp+0C]			counter & ?
jl 0041CA76						counter<=?, jmp OUTSIDE LOOP
mov eax, dword ptr [ebp-10]
xor edx, edx

0041CAE4:
cmp dword ptr [ebp-08], edx
je 0041CB8F
cmp dword ptr [ebp+10], edx
je 0041CB8F
mov ebx, dword ptr [ebp-0C]			character #
push 0000005C
imul ebx, 000054D8
mov ecx, dword ptr [ebx+0068BE84]		# of items in backpack
lea esi, dword ptr [ebx+0068CA30]		from cursor
imul ecx, 00000170
lea edi, dword ptr [ecx+ebx+00688504]	to next slot in backpack
pop ecx
repz
movsd
inc dword ptr [ebx+0068BE84]			inc # of items in backpack
mov ecx, eax
jge 0041CB2B
xor ecx, ecx

0041CB2B:
cmp dword ptr [ebp+0C], edx
mov dword ptr [ebp-04], edx
jle 0041CB87
mov eax, dword ptr [ebp-14]
push 0000000A
cdq
pop esi
idiv esi
lea eax, dword ptr [ecx+ebx+0068BE88]

........

=================================================

0041CD27: CALL Move_Gold_Into_Backpack

Called at 0041E627

Regesters Used:
  eax - Initial value is discarded.
        Returns if gold has been placed as a boolean.
  edx - Initial value may be discarded.
        Returned value is probably not used.
  ecx - Initial value should be the character's number.
        Initial value is preserved.

Stack Used:
[esp+0C] - Character number from ecx is stored here.
[esp+10] - Character number is extracted from here.

Note:
The backpack is looped through twice in two seperate consecutive sections of code.  I see no use in the second run through.

0041CD27:
push ecx
push ebx
push ebp
mov ebp, ecx			character number
push esi
mov dword ptr [esp+0C], ebp	store character number
imul ebp, 000054D8		character record
push edi

	init first loop

xor ebx, ebx			set ebx to 0
xor edi, edi			set Gold Placed to False
cmp dword ptr [ebp+0068BE84], ebx	Number of items
jle 0041CDB2			if #of Items<=0, jump
lea esi, dword ptr [ebp+006885C8]	Unid'ed $ of 1st item

	start of first of two loops.

0041CD4A:
test edi, edi
jne 0041CDB2				If Gold Placed, jump
cmp dword ptr [esi+FFFFFF44], 0000000B	Item Type&Gold
jne 0041CDA3				not gold, next
mov eax, dword ptr [ebp+0068CAF4] - amount of gold to place
mov ecx, dword ptr [esi]		Unid'ed cost
add eax, ecx				combined amount of gold
cmp eax, 00001388				5000
jg 0041CDA3					gold+pile>5000, next
cmp eax, 000009C4				2500
mov dword ptr [esi], eax		update unid'ed cost
jl 0041CD7A					new pile<2500, skip
mov [esi-04], 00000006			Item graphic, 2500..5000
jmp 0041CD91

0041CD7A:
cmp eax, 000003E8				1000
jg 0041CD8A					new pile>1000, skip
mov [esi-04], 00000004			1..999
jmp 0041CD91

0041CD8A:
mov [esi-04], 00000005			1000..2499

0041CD91:
mov ecx, dword ptr [esp+10]		character number
call 0041F9E5				Tally_Gold
mov dword ptr [ebp+00687944], eax	set gold to result
push 00000001
pop edi					set gold placed to true

0041CDA3:
inc ebx					inc ebx
add esi, 00000170				next item
cmp ebx, dword ptr [ebp+0068BE84]	# of backpack items
jl 0041CD4A					ebx<# items, jump

	End of first loop, start init of second redundant loop.

0041CDB2:
xor ebx, ebx				set ebx to 0
cmp edi, ebx
jne 0041CE3C				if gold placed, jump
cmp dword ptr [ebp+0068BE84], ebx	# of items in backpack
jle 0041CE3C				#<=0, jump
lea esi, dword ptr [ebp+006885C8]	unid'ed $ of 1st item in backpack

	beginning of second loop

0041CDCA:
test edi, edi
jne 0041CEF5				if gold placed, jump
cmp dword ptr [esi+FFFFFF44], 0000000B	Item Type&Gold
jne 0041CE2D				no gold, jump
mov eax, dword ptr [esi]		$
mov ecx, 00001388				5000
cmp eax, ecx				$ & 5k
jge 0041CE2D				$ >= 5k, next
mov edx, dword ptr [ebp+0068CAF4]	gold to be placed
add eax, edx				new pile size
cmp eax, ecx				new pile size & 5k
jg 0041CE2D					new pile>5k, next
cmp eax, 000009C4
mov dword ptr [esi], eax
jl 0041CE04
mov [esi-04], 00000006
jmp 0041CE1B

0041CE04:
cmp eax, 000003E8
jg 0041CE14
mov [esi-04], 00000004
jmp 0041CE1B

0041CE14:
mov [esi-04], 00000005

0041CE1B:
mov ecx, dword ptr [esp+10]		character number
call 0041F9E5				Tally Gold
mov dword ptr [ebp+00687944], eax
push 00000001
pop edi					set gold placed to true

0041CE2D:
inc ebx
add esi, 00000170
cmp ebx, dword ptr [ebp+0068BE84]	# of items in backpack
jl 0041CDCA					loop

	End of second loop

0041CE3C:
test edi, edi				if gold placed, jump
jne 0041CEF5
push 00000027
pop ebx					set ebx to 27h(39), 0..39

0041CE47:
test edi, edi
jne 0041CEF5				if gold placed, jump
mov eax, ebx				item slot
push 0000000A
cdq
pop ecx					set ecx to Ah (10)
idiv ecx					item slot div Ah (10)
push 0000000A
pop esi					set esi to Ah (10)
lea ecx, dword ptr [eax+4*eax]	(slot div 10) * 5
mov eax, ebx				item slot
edq						? same as cdq ?
idiv esi					slot div 10
shl ecx, 1					(slot div 10) * 5 div 2
add ecx, edx				(slot div 10)*10+slot mod 10 (i.e. item slot) !! for a net effect of nothing !!
	I can only assume that edq does something different than cdq to explain what this does.
cmp byte ptr [ecx+ebp+0068BE88], 00	item slot & empty
	ebp = character record, ecx = item slot (1 byte/slot)
lea edx, dword ptr [ecx+ebp+0068BE88]	item slot
jne 0041CEEE				item slot not empty, next
mov eax, dword ptr [ebp+0068BE84]	# of items in backpack
push 0000005C
imul eax, 00000170			# of items x item size
add eax, ebp				add character record
lea esi, dword ptr [ebp+0068CA30]	Item on cursor
pop ecx					5Ch = # of dwords in item
lea edi, dword ptr [eax+00688504]	empty slot in backpack
repz						repeat ecx times
movsd						move item from cursor to backpack

	Copies data from addressed by DS:SI (even if operands are given) 
to the location ES:DI destination and updates SI and DI based on the size of
 the operand or instruction used.  SI and DI are incremented when the 
Direction Flag is cleared and decremented when the Direction Flag is Set.  
Use with REP prefixes.

inc dword ptr [ebp+0068BE84]		inc. number of items
mov cl, byte ptr [ebp+0068BE84]	number of items
mov byte ptr [edx], cl			set backpack item slot
mov ecx, dword ptr [ebp+0068CAF4]
cmp ecx, 000009C4
jl 0041CEBE
mov dword ptr [ebx+006885C4], 00000006
jmp 0041CEDC

0041CEBE:
cmp ecx, 000003E8
jg 0041CED2
mov dword ptr [ebx+006885C4], 00000004
jmp 0041CEDC

0041CED2:
mov dword ptr [ebx+006885C4], 00000005

0041CEDC:
mov ecx, dword ptr [esp+10]
call 0041F9E5				CALL Tally_Gold
mov dword ptr [ebp+00687944], eax	gold
push 00000001
pop edi					set gold placed to true

0041CEEE:
dec ebx					loop counts down
jns 0041CE47				loop if ebx is >=0

0041CEF5:
mov eax, edi				set eax to gold placed boolean
pop edi
pop esi
pop ebp
pop ebx
pop ecx
ret

=================================================

........
0041D5CA:	? When equiping item, auto select spell.
cmp dword ptr [ebx+006880BC], 0000000A	primary hand item type & staff
jne 0041DA85
mov eax, dword ptr [ebx+00688194]		spell code
test eax, eax
je 0041DA85
cmp dword ptr [ebx+00688198], 00000000	current staff charges
jle 0041DA85
mov dword ptr [ebx+0068782C], eax		spell to cast
mov byte ptr [ebx+00687830], 03		set cast from #2 to staff
mov dword ptr [00526A14], 000000FF
jmp 0041DA85

=================================================

?This is probably used when a player sells something in town.  
I'm assuming this because it's the only time I know that the code 
will divide a stack of 'gold to be added' to max out gold piles.

0041D64C: DYNAMIC JUMP	(7 of 8 dwords on list)
mov ecx, dword ptr [ebx+0068CA38]		item type
cmp ecx, 0000000B					& gold
jne 0041D7E0					not gold, jump
cmp dword ptr [ebp-08], 00000000		?
jne 0041D7E0
mov eax, dword ptr [ebp-0C]			?
push 0000000A
pop ecx						0A (10)
lea esi, dword ptr [eax-19]			[ebp-0C]-19h
push 000000A
mov eax, esi					[ebp-0C]-19h
cdq
idiv ecx					([ebp-0C]-19h)/10
lea ecx, dword ptr [eax+4*eax]	(([ebp-0C]-19h)/10)*5
mov eax, esi					[ebp-0C]-19h
cdq
pop esi						0A (10)
idiv esi					([ebp-0C]-19h)/10
shl ecx, 1					(([ebp-0C]-19h)/10)*10
add ecx, edx
	(([ebp-0C]-19h)/10)*10 + ([ebp-0C]-19h) mod 10
	i.e. ([ebp-0C]-19h)
lea eax, dword ptr [ecx+ebx+0068BE88]	backpack slot
mov cl, byte ptr [ecx+ebx+0068BE88]		backpack slot
test cl, cl
jle 0041D754
movsx eax, cl
dec eax
imul eax, 00000170
lea ecx, dword ptr [eax+ebx]		backpack item record
mov eax, dword ptr [ebp+0068CAF4]	unided price
mov esi, dword ptr [ecx+006885C8]	unided price
lea edx, dword ptr [eax+esi]		combined price
mov eax, 00001388				5000
cmp edx, eax				combined price & 5000
jg 0041D708					c$>5000, jump
mov dword ptr [ecx+006885C8], edx	gold in pack set to c$
mov eax, dword ptr [ebx+0068CAF4]	gold gained
add dword ptr [ebp+00687944], eax	increase total gold
cmp edx, 000009C4
jl 0041D6E2
mov dword ptr [ecx+006885C4], edi
jmp 0041DA85

0041D6E2:
cmp edx, 000003E8
jg 0041D6F9
mov dword ptr [ebx+006885C4], 00000004
jmp 0041DA85

0041D6F9:
mov dword ptr [ebx+006885C4], 00000005
jmp 0041DA85

0041D708:
mov edx, eax				max pile size (5k)
sub edx, esi				new(max)-old
add dword ptr [ebx+00687944], edx	add to gold total
sub dword ptr [ebx+0068CAF4], edx	sub amount added
mov dword ptr [ecx+006885C8], eax
mov dword ptr [ecx+006885C4], edi
mov ebx, dword ptr [ebx+0068CAF4]
cmp ebx, 000009C4
jl 0041D73E
mov [ebp+08], 00000012
jmp 0041DA85


........


=================================================

0041E010:

=================================================

0041E1B2: Check_requirements_for_item_on_cursor

Called from 0041DF80, 0041E517, 0041E609

Note on related code: 0042459A & 00424799 - Required stat description.  Need to alter if adding 'vit req'.

0041E1B2:
mov eax, ecx					character #
imul eax, 000054D8				character offset
add eax, 00687778					start of character data
movsx ecx, byte ptr [eax+00005418]		Strength Requirment of item on cursor
and dword ptr [eax+0000541C], 00000000	set req. met to 'don't use'
cmp dword ptr [eax+00000164], ecx		modified Str & requirement
jl 0041E1FD						ret
movzx ecx, byte ptr [eax+00005419]
cmp dword ptr [eax+0000016C], ecx		mod magic
jl 0041E1FD						ret
movsx ecx, byte ptr [eax+0000541A]
cmp dword ptr [eax+00000174], ecx		mod dex
jl 0041E1FD						ret
mov dword ptr [ebx+0000541C], 00000001	set req. met to TRUE

0041E1FD:
ret

-------------------------------------------------

0041E1FE: Set_Magic_Requirement_For_Spell_Book_On_Cursor
imul ecx, 000054D8				character record
push edi						preserve edi
cmp dword ptr [ecx+0068CB0C], 00000018	Magic Code of item on cursor & Book
jne 0041E27E					no, jump out of routine
mov edx, dword ptr [ecx+0068CB10]		Spell code of item on cursor
lea eax, dword ptr [ecx+0068CB10]
imul edx, 00000038				spell record
mov dl, byte ptr [edx+004A346C]		magic req. for level 1 book
mov byte ptr [ecx+0068CB91], dl		magic req. of item on cursor
mov eax, dword ptr [eax]			Spell code of item on cursor
movsx edi, byte ptr [eax+ecx+00687839]	set loop counter to character's slvl
test edi, edi
je 0041E27E						if counter is 0, jump out of routine
push esi						preserve esi
push ebx						preserve ebx

0041E239:
mov bl, byte ptr [ecx+0068CB91]		magic req.
push 00000064
movzx eax, bl					magic req.
pop esi
lea eax, dword ptr [eax+4*eax]		5 x magic req.
push 00000064
shl eax, 02						4 x 5 x magic req.
cdq
idiv esi						20/100 x magic req.
add al, bl						20% + 100% of magic req.
pop ebx
movzx esi, al					120% of magic req.
mov byte ptr [ecx+0068CB91], al		set new magic req.
dec edi						dec counter
lea eax, dword ptr [esi+4*esi]		120% of magic req. x 5
shl eax, 02						120% of req. x 5 x 4
cdq
idiv ebx						120% of req. x 20/100
add eax, esi					120% of req. x 120%
cmp eax, 000000FF					compare to 255
jle 0041E278					next req. <= 255, next
or byte ptr [ecx+0068CB91], FF		set req. to 255
xor edi, edi					set counter to 0

0041E278:
test edi, edi
jne 0041E239					coutner not 0, loop
pop ebx
pop esi

0041E27E:
pop edi
ret

--------------------------------------------------------

0041E280: Something to do with speechs (sound) talking....

0041E280:
imul ecx, 000054D8
push ebx
push esi
mov esi, dword ptr [ecx+0068BC98]	base item number of item on cursor
push 0000000A
pop edx
cmp esi, edx
jne 0041E29C				If not item #0A, skip
mov byte ptr [0069D102], 03		only when base item # = 0A Optic Amulet

0041E29C:
push 00000001
cmp esi, 00000011
pop ebx
jne 0041E2F8
cmp byte ptr [0069D05A], 02
jne 0041E2F8
cmp byte ptr [0069D067], 03
jne 0041E2F8
mov cl, byte ptr [ecx+006878D8]	class
mov dword ptr [0052B844], edx
test cl, cl
jne 0041E2D2				jump if not warrior
mov dword ptr [0052B848], 0000032F	3 random mushroom-size comments
jmp 0041E2F1

0041E2D2:
cmp cl, bl
jne 0041E2E2
mov dword ptr [0052B848], 000002C2
jmp 0041E2F1

0041E2E2:
cmp cl, 02
jne 0041E2F1
mov dword ptr [0052B848], 0000025B

0041E2F1:
mov byte ptr [0069D067], 04

0041E2F8:
mov eax, dword ptr [00687774]
cmp esi, 00000010
jne 0041E362
cmp byte ptr [0069D132], bl
jne 0041E317
mov byte ptr [0069D132], 02
mov byte ptr [0069D13F], bl

0041E317:
cmp dword ptr [0069D144], ebx
jne 0041E362
mov ecx, eax
mov dword ptr [0052B844], edx
imul ecx, 000054D8
mov cl, byte ptr [ecx+006878D8]
........

mov dword ptr [0052B848], 00000254	"I've got to bring this to Lachdanan."

0041E3AE:

........

mov dword ptr [0052B848], 00000257	"May the spirit of Arkain protect me"

0041E463:
........


=================================================

??? Pick up item from ground while inventory screen is closed ???
This is probably a bit broader than that, but it is, at least, that.

0041E578:
sub esp, 0000001C
push ebx
mov ebx, ecx
xor ecx, ecx
push ebp
cmp dword ptr [004B979C], ecx
mov eax, edx
push esi
push edi
mov dword ptr [esp+20], eax
je 0041E59D
mov dword ptr [004B979C], ecx
mov dword ptr [004B9A60], ecx

0041E59D:
cmp eax, 0000007F
je 0041E5C5
imul eax, 00000170
mov ecx, dword ptr [eax+00636D54]
mov eax, dword ptr [eax+00636D58]
imul ecx, 00000070
cmp byte ptr [ecx+eax+005CAD28], 00
je 0041EA5C

0041E5C5:
mov eax, dword ptr [esp+20]			item # to pick up
mov ebp, ebx					character #
imul eax, 00000170
imul ebp, 000054D8
and word ptr [eax+00636D4C], 7FFF		clear bit 8000
push 0000000C
lea esi, dword ptr [eax+00636D48]		item to pickup
lea edi, dword ptr [ebp+0068CA30]		item on cursor
pop ecx
mov dword ptr [esp+28], esi
repz
movsd
mov ecx, ebx
mov dword ptr [esp+24], eax
call 0041E280
mov ecx, ebx
call 0041E1FE
mov ecx, ebx
call 0041E1B2
				Check_requirements_for_item_on_cursor
mov ecx, dword ptr [ebp+0068CAF0]		item graphics
add ecx, 0000000C					item graphics+0C
call 00407454					???
cmp dword ptr [ebp+0068CA38], 0000000B	item type and gold
jne 0041E633					not gold, skip
mov ecx, ebx					set ecx to character #
call 0041CD27
					CALL Move_Gold_Into_Backpack
mov esi, eax					set esi to boolean 'has item been placed'
jmp 0041E975					jump past move-item-to-inventory section

0041E633:
mov eax, dword ptr [ebp+006877F0]		appearance
xor esi, esi
push 00000001
and eax, 0000000F					app. w'out armor
pop edi
je 0041E647						?no shield and no weapon?
cmp eax, edi					shield&no weapon
jne 0041E677

0041E647: Auto_equip_weapon_secton
cmp dword ptr [ebp+00687778], 00000003	action & ?
jg 0041E677						?action>3?, jump
cmp dword ptr [ebp+0068CB94], esi		Req. met & no
je 0041E677						req. not met, jump
cmp byte ptr [ebp+0068CAEE], 01		Class & Weapon
jne 0041E677					not a weapon, jump
mov ecx, ebx
........

0041E975:
xor edx, edx
cmp esi, edx				'has been placed' & false
je 0041E9C5					not placed, jump
mov eax, dword ptr [esp+24]
mov ecx, dword ptr [eax+00636D54]
mov eax, dword ptr [eax+00636D58]
imul ecx, 00000070
and byte ptr [ecx+eax+005CAD28], dl
cmp dword ptr [00642800], edx
jle 0041EA5C

........

0041E9C5:
cmp ebx, dword ptr [00687774]
jne 0041EA1E
mov al, byte ptr [ebp+006878D8]		class
test al, al
jne 0041E9EB					jump if not warrior
push 00000003
xor cl, cl
pop edx
call 00417C77					set eax to rnd[3]
mov ecx, eax
add ecx, 000002D7
				02D7..02D9 = Warrior's 'I have no room'
jmp 0041EA19

0041E9EB:
cmp al, 01
jne 0041EA03					jump if not rogue
push 00000003
xor cl, cl
pop edx
call 00417C77
mov ecx, eax
add ecx, 00000270
				0270..0272 = Rogue's 'I have no room'
jmp 0041EA19

0041EA03:
cmp al, 02
jne 0031EA1E					jump if not sorcerer
push 00000003
xor cl, cl
pop edx
call 00417C77
mov ecx, eax
add ecx, 00000209
				0209..020B = Sorcerer's 'I have no room'

0041EA19:
call 00416250

0041EA1E:
mov esi, dword ptr [esp+28]
push 0000005C
pop ecx
lea edi, dword ptr [ebp+0068CA30]
repz
movsd

8B7424286A5C598DBD30CA6800F3A5
Disable the above 0F (15) bytes to test.

mov ecx, dword ptr [esp+20]
push 00000001
pop edx
call 0042347C
mov eax, dword ptr [esp+24]
........

=================================================

........

0041F428:
mov eax, dword ptr [edi+08]
cmp eax, FFFFFFFF
jne 0041F434

0041F430:
or al, FF
jmp 0041F4AB

0041F434:
cmp eax, 0000000B				item type & gold
jne 0041F45C
mov edi, dword ptr [edi+000000C4]
mov ecx, edi
call 00406B01
push eax
push edi
push 004850E0	"%i gold %s"
push 004B9C48
call 0046B440
add esp, 00000010
jmp 0041F4A8


registers from this point....

the following are preserved previously in a push
	ebp, ecx
	ebx, esi, edi

	eax	initial value discarded		not preserved
	ecx	initial value discarded		not preserved
	edx	initial value discarded		not preserved
	edi	initial value ITEM RECORD


0041F45C:
mov al, byte ptr [edi+3C]		Normal/Magic/Unique
cmp al, 01					NMU & Magic
jne 0041F46A				no, skip
mov byte ptr [004B9B04], al		text color blue
jmp 0041F475

0041F46A:
cmp al, 02					NMU & Unique
jne 0041F475				no, skip
mov byte ptr [004B9B04], 03		text color gold

0041F475:
lea eax, dword ptr [edi+3D]		Item type name
mov esi, 004B9C48
push eax
push esi
call 0046B6B0
cmp dword ptr [edi+38], 00000000	IDFlag & Unid'ed
pop ecx
pop ecx
je 0041F4A1					Unid'ed, jump
lea eax, dword ptr [edi+7D]		Full item name
push eax
push esi
call 0046B6B0
pop ecx
pop ecx
mov ecx, edi
call 00424402			display id'ed item info without name
jmp 0041F4A8

0041F4A1:
mov ecx, edi
call 00424612			display unid'ed item info without name

0041F4A8:
mov al, byte ptr [ebp-01]

0041F4AB:
pop edi
pop esi
pop ebx
leave
ret


=================================================

0041F608: Use spell from staff

Called from 00458D49:

0041F608:
mov eax, ecx
imul eax, 000054D8
cmp dword ptr [eax+006880BC], FFFFFFFF	left hand & empty
je 0041F648						hand empty, end
cmp dword ptr [eax+00688190], 00000017	magic code & staff
jne 0041F648					not a staff, end
mov edx, dword ptr [eax+00688194]		spell code
cmp edx, dword ptr [eax+0068782C]		spell to cast
jne 0041F648					not casting staff's spell
mov edx, dword ptr [eax+00688198]		current charges
lea eax, dword ptr [eax+00688198]		current charges
test edx, edx
jle 0041F648					<=0, ret
dec edx
mov dword ptr [eax], edx			-1 charge
jmp 0042044F

0041F648:
ret

=================================================

edi - points to item
eax - base item
ecx - 0
Items is a use once and discard

........

0041F7BC:
398F 64010000	cmp dword ptr [edi+00000164], ecx	req met & not met
75 [33]		jne 0041F7F7				req met, jump
			mov al, byte ptr [esi+006878D8]	class
test al, al
jne 0041F7D5				not warrior, jump
mov ecx, 000002D6
jmp 0041F7ED

0041F7D5:
cmp al, 01
jne 0041F7E0				not rogue, jump
mov ecx, 0000026F
jmp 0041F7ED

0041F7E0:
cmp al, 02
jne 0041F969				not sorcerer, jump
mov ecx, 00000208

0041F7ED:
call 00416250
jmp 0041F969

0041F7F7:
cmp dword ptr [edi+000000DC], ecx	magic code & 0
jne 0041F80F
cmp dword ptr [edi+08], 0000000B	Item type & gold
jne 0041F80F
call 0041F68D	? split gold stack ?
jmp 0041F969

0041F80F:					magic code > 0
cmp dword ptr [004B979C], ecx
je 0041F823
mov dword ptr [004B979C], ecx
mov dword ptr [004B9A60], ecx

0041F823:
mov eax, dword ptr [edi+000000DC]	magic code
mov dl, byte ptr [005BC500]		dlvl
cmp eax, 00000015				Scroll Type 1 of 2
jne 0041F84D
test dl, dl
jne 0041F84D				jump if not in town
mov esi, dword ptr [edi+000000E0]	Spell code
imul esi, 00000038
cmp dword ptr [esi+004A3468], ecx	Town spell
je 0041F969					jump if spell disabled

0041F84D:
cmp eax, 00000016				Scroll Type 2 of 2
jne 0041F86B
test dl, dl
jne 0041F86B				jump if not in town
mov edx, dword ptr [edi+000000E0]	Spell code
imul edx, 00000038
cmp dword ptr [edx+004A3468], ecx	Town spell
je 0041F969					jump if spell disabled

0041F86B:
mov ecx, dword ptr [edi+000000C0]	Item graphics
cmp eax, 00000018				?gold pyramid?
movzx edx, byte ptr [ecx+00493C78]	graphic group
jne 0041F882
push 00000041
pop ecx
jmp 0041F895

0041F882:
mov eax, dword ptr [esp+10]		player #
cmp eax, dword ptr [00687774]		local player
jne 0041F89A				not local, jump
mov ecx, dword ptr [4*edx+00493E70] 

0041F895:
call 00416250				?play sound?

0041F89A:
push dword ptr [edi+000000E0]		Spell code
mov edx, dword ptr [edi+000000DC]	magic code
mov ecx, dword ptr [esp+14]
call 00424811
cmp dword ptr [esp+14], 00000000
je 0041F8C6
mov ecx, dword ptr [esp+10]
mov edx, ebx
call 0041E103
jmp 0031F969

0041F8C6:
cmp dword ptr [ebp+006885E0], 0000002A
	Magic code of item in backpack & Unknown
	How bizzare
je 0041F969
mov ecx, dword ptr [esp+10]
mov edx, ebx
call 0041E010
jmp 0041F969


=================================================

0041F9E5: CALL Tally_Gold

Totals the value of all gold in the character's backpack and on the character's belt.

Called from: 00406E20, 0041CD95, 0041CE1F, 0041CEE0,
	0041D84C, 0041DA70, 0041DF69, 0044ECD2, 0045C2E2

Regesters Used:
  eax - Initial value is discarded.
        Returns the total value of gold in backpack and belt.
  ecx - Initial value should be the character's number.
        Returns the address of the character's record.
  edx - Initial value is discarded.
        Returns a value of 0.  PNU

Unknown Info

The following is processed if gold is found on the belt.
	mov dword ptr [00526A14], 000000FF

0041F9E5: CALL Tally_Gold
xor eax, eax				set eax to 0
imul ecx, 000054D8			set ecx to char rec
push esi
push edi
push 00000008
lea edx, dword ptr [ecx+0068BF74]	unided $ of 1st belt
pop esi					set esi to 8 (# belt)
mov edi, 00000170				set edi to item size

0041F9FD:
cmp dword ptr [edx+FFFFFF44], 0000000B	Item Type&Gold
jne 0041FA12					no, skip
add eax, dword ptr [edx]			yes, add $
mov dword ptr [00526A14], 000000FF		?

0041FA12:
add edx, edi					next item
dec esi						dec counter
jne 0041F9FD					loop if not 0
mov edx, dword ptr [ecx+0068BE84]		#of Items
test edx, edx
jle 0041FA37					if 0, jump
lea ecx, dword ptr [ecx+006885C8]		Unided $

0041FA27:
cmp dword ptr [ecx+FFFFFF44], 0000000B
jne 0041FA32
add eax, dword ptr [ecx]

0041FA32:
add ecx, edi					next item
dec edx						dec counter
jne 0041FA27					loop if not 0

0041FA37:
pop edi
pop esi
ret

=================================================

0041FCFE: CALL Create Character Stats
This routine generates the character's stats, such as resists, damage, etc.  This is where item stats are converted into character stats.
Called from: 00420746, 00420AF3, 0042B89E, 00430C78

eax - tracts min damage
ecx - tracks max damage

Local Variables:
qword ptr [ebp-74] : Flags for spell (EDX:EAX)
 dword ptr [ebp-74] : low dword of quad
 dword ptr [ebp-70] : high dword of quad
dword ptr [ebp-6C] : set to edx
dword ptr [ebp-68] : equipment slot loop counter (loops 7..1)
dword ptr [ebp-64] : min damage
dword ptr [ebp-60] : max damage
dword ptr [ebp-5C] : ? Info related to start of character data.

dword ptr [ebp-58] : max electrical hit damage
dword ptr [ebp-54] : min electrical hit damage
dword ptr [ebp-50] : max fire hit damage
dword ptr [ebp-4C] : min fire hit damage
dword ptr [ebp-48] : resist magic
dword ptr [ebp-44] : resist lightning
dword ptr [ebp-40] : resist fire
dword ptr [ebp-3C] : + to hit ???
 byte ptr [ebp-38] : +slvl
dword ptr [ebp-34] : + dexterity
dword ptr [ebp-30] : + strength
dword ptr [ebp-2C] : +/- damage from enemies
dword ptr [ebp-28] : + points of AC
dword ptr [ebp-24] : +% to hit
dword ptr [ebp-20] : +% damage
dword ptr [ebp-1C] : AC (ej Dex/5)
dword ptr [ebp-18] : 4 special bytes

 byte ptr [ebp-18] : special byte #1
  01 Infravision (Always) 10 Extra Fire Damage
  02 Random Life Stealing 20 Extra Lighning Damage
  04 Random Speed Arrows  40 Cursed Hit Points
  08 Burning Damage       80 UNUSED

 byte ptr [ebp-17] : special byte #2
  01 UNUSED                   10 UNUSED
  02 UNUSED                   20 Steal 3% Mana (Bat)
  04 UNUSED                   40 Steal 5% Mana
  08 Knock target back (Bear) 80 Steal 3% Life

 byte ptr [ebp-16] : special byte #3
  01 Steal 5% life (Blood)    10 Fastest Attack
  02 Quick Attack (Readyness) 20 Fast Hit Recovery
  04 Fast Attack (Swiftness)  40 Faster Hit Recovery
  08 Faster Attack (Speed)    80 Fastest Hit Recovery

 byte ptr [ebp-15] : special byte #4
  01 Fast Block           10 Absorb Half Trap Damage
  02 1-6 lightning damage 20 UNUSED
  04 Attacker takes 1-3   40 +200% Damage to Demons
  08 Cursed Mana, 0       80 Cursed Resistance

dword ptr [ebp-14] : + magic
dword ptr [ebp-10] : + vitality
dword ptr [ebp-0C] : mana (?sans Vit-Items part?)
dword ptr [ebp-08] : life (?sans Vit-Items part?)
dword ptr [ebp-04] : Light Radius (2..Fh(15) range; inited to 10)

0041FCFE:
push ebp                    - stores ebp ?recovered by leave?
mov ebp, esp                - sets ebp to esp
sub esp, 00000074           - move esp to begining of local variable stack
push ebx                    - store ebx
push esi                    - store esi
mov esi, ecx                - set esi to character number
xor eax, eax                - set min damage to 0
mov dword ptr [ebp-5C], esi - set [ebp-5C] to character number
xor ecx, ecx                - set max damage to 0
xor ebx, ebx                - set ebx to 0
imul esi, 000054D8          - set esi to character location
push edi                    - store edi
mov dword ptr [ebp-6C], edx - init ? to edx
mov dword ptr [ebp-1C], eax - init AC (ej Dex/5) to 0
mov dword ptr [ebp-20], eax - init +% damage to 0
mov dword ptr [ebp-24], eax - init +% to hit to 0
mov dword ptr [ebp-28], eax - init + points of AC to 0
mov dword ptr [ebp-18], eax - init 4 special bytes to 0
mov dword ptr [ebp-30], eax - init + strength to 0
mov dword ptr [ebp-14], eax - init + magic to 0
mov dword ptr [ebp-34], eax - init + dexterity to 0
mov dword ptr [ebp-10], eax - init + vitality to 0
mov dword ptr [ebp-74], eax - init weapon damage to 0
mov dword ptr [ebp-70], eax - init weapon damage to 0
mov dword ptr [ebp-40], eax - init resist fire to 0
mov dword ptr [ebp-44], eax - init resist ? to 0
mov dword ptr [ebp-48], eax - init resist ? to 0
mov dword ptr [ebp-2C], eax - init +/- damage from enemies to 0
mov [ebp-04], 0000000A      - init Unknown (2..Fh (15) range) to Ah (10)
mov dword ptr [ebp-08], eax - init life to 0
mov dword ptr [ebp-0C], eax - init mana to 0
mov dword ptr [ebp-38], eax - init +slvl to 0
mov dword ptr [ebp-3C], eax - init + to hit ??? to 0
mov dword ptr [ebp-4C], eax - init min fire hit damage to 0
mov dword ptr [ebp-50], eax - init max fire hit damage to 0
mov dword ptr [ebp-54], eax - init min electrical hit damage to 0
mov dword ptr [ebp-58], eax - init max electrical hit damage to 0
lea edi, dword ptr [esi+00687C58] - set edi to byte 164h of first equiped item (helm).
mov [ebp-68], 00000007      - init equipment slot loop counter (loops 7..1) to 7

0041FD74: Begin_Parsing_Item
cmp dword ptr [edi+FFFFFEA4], FFFFFFFF - Encoded Item Type & -1
je 0041FE81                            - If -1, Jump to Next_item
cmp dword ptr [edi], 00000000          - req met & 0
je 0041FE81                            - If 0, Jump to Next_item
mov edx, dword ptr [edi+FFFFFF70]      - Set edx to Armor AC
add eax, dword ptr [edi+FFFFFF68]      - Add Minimum Damage
add dword ptr [ebp-1C], edx            - Add Armor AC to AC (ej Dex/5)
add ecx, dword ptr [edi+FFFFFF6C]      - Add Maximum Damage
mov edx, dword ptr [edi+FFFFFF7C]      - set edx to spell code
mov dword ptr [ebp-64], eax            - set X to min. damage
test edx, edx                          - check if spell code=0
mov dword ptr [ebp-60], ecx            - set Y to max. damage
je 0041FDC8                            - If spell=0, jump
push 00000001
lea ecx, dword ptr [edx-01]            - set to spell code-1
pop eax                                - set eax to 1.
xor edx, edx                           - set edx to 0.
call 0046BE90 - CALL Shift_Quad_word_EDX:EAX_Left_By_CL
  EDX:EAX returns spell flag
or dword ptr [ebp-74], eax             - 'adds' spell to flags
or dword ptr [ebp-70], edx             - 'adds' spell to flags
mov eax, dword ptr [ebp-64]            - set min damage to X
mov ecx, dword ptr [ebp-60]            - set max damage to Y

0041FDC8:
cmp byte ptr [edi+FFFFFED8],00         - Compare Normal/Magical/Unique (NMU) to Normal
je 0041FDDE                            - If item is normal, jump
cmp dword ptr [edi+FFFFFED4], 00000000 - If Id. Flag & Unided
je 0041FE81                            - If unided, jump to Next_item

0041FDDE:
mov eax, dword ptr [edi-70]            - set eax to +%damage
add dword ptr [ebp-20], eax            - add +%damage to +%damage
mov eax, dword ptr [edi-6C]            - set eax to +%to hit
add dword ptr [ebp-24], eax            - add +%to hit to +%to hit
mov eax, dword ptr [edi-68]            - set eax to +%ac
test eax, eax                          - is +%ac = 0
je 0041FE0B                            - if so, jump
imul eax, dword ptr [edi+FFFFFF70]     - set eax to +%ac*AC
push 00000064
cdq
pop ecx                                - set ecx to 64h (100)
idiv ecx                               - divide by 100 for %
test eax, eax                          - check AC bonus
jne 0041FE05                           - If it's not 0, jump
push 00000001
pop eax                                - set it to 1 (minimum default)

0041FE05:
add dword ptr [ebp-28], eax            - add +%ACbonus to +AC
mov ecx, dword ptr [ebp-60]            - set ecx to Y

0041FE0B:
mov eax, dword ptr [edi+FFFFFF74]      - set eax to Special Flags
add ebx, dword ptr [edi-40]            - add damage bonus to ebx
or dword ptr [ebp-18], eax             - 'add' item's Specials
mov eax, dword ptr [edi-64]            - set eax to str bonus
add dword ptr [ebp-30], eax            - add str bonus to +str 
mov eax, dword ptr [edi-60]            - magic bonus
add dword ptr [ebp-14], eax            - add magic bonus to +mag
mov eax, dword ptr [edi-5C]            - dex bonus
add dword ptr [ebp-34], eax
mov eax, dword ptr [edi-58]            - vit bonus
add dword ptr [ebp-10], eax
mov eax, dword ptr [edi-54]            - fire resists
add dword ptr [ebp-40], eax
mov eax, dword ptr [edi-50]            - lightning resists
add dword ptr [ebp-44], eax
mov eax, dword ptr [edi-4C]            - magic resists
add dword ptr [ebp-48], eax
mov eax, dword ptr [edi-3C]            - +/- dfe
add dword ptr [ebp-2C], eax
mov eax, dword ptr [edi-38]            - light radius
add dword ptr [ebp-04], eax
mov eax, dword ptr [edi-44]    - (Word/64) Health Points (Whale)
add dword ptr [ebp-08], eax            - add HP to life
mov eax, dword ptr [edi-48]      - (Word/64) Mana Points (Snake)
add dword ptr [ebp-0C], eax            - add MP to mana
movsx eax, byte ptr [edi-34]           - + spell level
add dword ptr [ebp-38], eax
mov eax, dword ptr [edi-1C]            - ?
add dword ptr [ebp-3C], eax            - add ? to ???
mov eax, dword ptr [edi-2C]            - min fire hit damage
add dword ptr [ebp-4C], eax
mov eax, dword ptr [edi-28]            - max fire hit damage
add dword ptr [ebp-50], eax
mov eax, dword ptr [edi-24]            - min elec. hit damage
add dword ptr [ebp-54], eax
mov eax, dword ptr [edi-20]            - max elec. hit damage
add dword ptr [ebp-58], eax
mov eax, dword ptr [ebp-64]            - set eax to min damage

0041FE81: Next_item
add edi, 00000170                      - add 170
dec [ebp-68]                           - init'ed to 7 (id slots!)
jne 0041FD74                           - If more items to go, Jump to Begin_Parsing_Item
xor edx, edx                           - set edx to 0
cmp eax, edx                           - min damage & 0
jne 0041FEC7                           - has a weapon, jump
cmp ecx, edx                           - max damage & 0
jne 0041FEC7                           - has a weapon, jump
cmp dword ptr [esi+006880BC], 00000005 - Is item a shield?
push 00000001
pop ecx                                - set max damage to 1
mov eax, ecx                           - set min damage to 1
jne 0041FEB3                           - not a shield, check other hand
cmp dword ptr [esi+00688218], edx      - Req met & 0
je 0041FEB3                            - se=0, next hand
push 00000003
pop ecx                                - set ecx to 3

0041FEB3:
cmp dword ptr [esi+0068822C], 00000005 - Is item a shield?
jne 0041FEC7
cmp dword ptr [esi+00688388], edx      - req met & 0
je 0041FEC7                            - se=0, next hand
push 00000003
pop ecx                                - set ecx to 3

0041FEC7:
mov dword ptr [esi+0068CBA0], eax - set weapon minimum damage
mov eax, dword ptr [ebp-1C]
mov dword ptr [esi+0068CBA4], ecx - set weapon maximum damage
mov dword ptr [esi+0068CBA8], eax - AC (ej Dex/5)
mov eax, dword ptr [ebp-20]
push 00000002
mov dword ptr [esi+0068CBAC], eax - +% damage
mov eax, dword ptr [ebp-24]
mov dword ptr [esi+0068CBB0], eax - ?+% to hit
mov eax, dword ptr [ebp-28]
mov dword ptr [esi+0068CBB4], eax - +points of AC
mov eax, dword ptr [ebp-18]
mov dword ptr [esi+0068CBC8], eax - 4 special bytes
mov eax, dword ptr [ebp-2C]
mov dword ptr [esi+0068CBB8], ebx - +damage
mov dword ptr [esi+0068CBCC], eax - +/- damage from enemies
pop eax                           - set eax to 2
cmp dword ptr [ebp-04], eax
jge 0041FF1A
mov dword ptr [ebp-04], eax       - if light radius< 2, set to 2

0041FF1A:
push 0000000F
pop eax                           - set eax to Fh (15)
cmp dword ptr [ebp-04], eax
jle 0041FF25
mov dword ptr [ebp-04], eax       - if light radius> 15, set to 15

0041FF25:
movsx eax, byte ptr [esi+006878B6]- light radius
cmp eax, dword ptr [ebp-04]       - cmp light rad
je 0041FF68                       - If equal, jump past change light radius section
mov eax, dword ptr [ebp-5C]       - character #
cmp eax, dword ptr [00687774]     - local character #
jne 0041FF68                      - If character is not player's character, skip change light radius.
mov ebx, dword ptr [ebp-04]       - set ebx to new light
mov ecx, dword ptr [esi+00687814] - ?
mov edx, ebx                      - set edx to new light
call 00426C86				?CALL?
push 0000000A
pop edx                           - set edx to Ah (10)
cmp ebx, edx                      - new light & Ah (10)
jl 0041FF55                       - If new light<Ah (10), jump
mov edx, ebx                      - set edx to light (>=10)

0041FF55:
mov ecx, dword ptr [esi+00687818]	?
call 00426FCE				CALL?
mov byte ptr [esi+006878B6], bl	set light radius to new light radius
xor edx, edx				set edx to 0

0041FF68:
mov eax, dword ptr [esi+006878E0] - set eax to base str.
add eax, dword ptr [ebp-30]       - add ?str bonus? to eax
mov dword ptr [esi+006878DC], eax - set modified str to eax
mov eax, dword ptr [00687774]     - set eax to local character #
imul eax, 000054D8                - local character offset
cmp dword ptr [eax+006878DC], edx - compare local player's mod str to 0
lea ecx, dword ptr [eax+006878DC] - set ecx to local character's mod. str.
jg 0041FF92                       - If if mod str>0, skip next line
mov dword ptr [ecx], edx          - set local character's mod str to 0

0041FF92:
mov ecx, dword ptr [esi+006878E8] - set ecx to base magic
add ecx, dword ptr [ebp-14]       - add ?+magic?
mov dword ptr [esi+006878E4], ecx - set modified magic to ecx
cmp dword ptr [eax+006878E4], edx - ?w? mod. magic & ?
lea ecx, dword ptr [eax+006878E4] - set ecx to ?w? mod magic
jg 0041FFB1                       - ?
mov dword ptr [ecx], edx

0041FFB1:
mov ecx, dword ptr [esi+006878F0] - base dex
add ecx, dword ptr [ebp-34]
mov dword ptr [esi+006878EC], ecx - mod. dex
cmp dword ptr [eax+006878EC], edx
lea ecx, dword ptr [eax+006878EC]
jg 0041FFD0
mov dword ptr [ecx], edx

0041FFD0:
mov ecx, dword ptr [esi+006878F8] - base vit
lea eax, dword ptr [eax+006878F4] - ?w? mod vit
add ecx, dword ptr [ebp-10]
mov dword ptr [esi+006878F4], ecx - mod vit
cmp dword ptr [eax], edx
jg 0041FFEB
mov dword ptr [eax], edx

0041FFEB:
cmp byte ptr [esi+006878D8], 01    - class and 01 (Rogue)
movsx eax, byte ptr [esi+00687930] - set eax to clvl
jne 00420012                       - jump if not rogue
mov ecx, dword ptr [esi+006878DC]  - set ecx to mod str
add ecx, dword ptr [esi+006878EC]  - add mod dex
imul eax, ecx                      - set eax to class*(str+dex)
cdq                                - set quad(edx:eax) to eax
mov ecx, 000000C8                  - set ecx to C8 (200)
jmp 0042001D

00420012:
imul eax, dword ptr [esi+006878DC] - set ecx to mod str
push 00000064
cdq                                - set quad(edx:eax) to eax
pop ecx                            - set ecx to 64 (100)

0042001D:
idiv ecx                           - set eax to q(edx:eax) div ecx
mov ebx, dword ptr [ebp-74]
mov edi, dword ptr [ebp-70]
mov dword ptr [esi+00687900], eax - set character damage to eax
mov dword ptr [esi+0068CBC0], ebx - set spell flags
mov dword ptr [esi+0068CBC4], edi - set spell flags
cmp byte ptr [esi+00687830], 03   - cast from & staff
jne 00420071                      - If not cast from staff(any equiped item), jump
mov ecx, dword ptr [esi+0068782C] - set ecx to spell to cast
push 00000001
dec ecx                           - set ecx to spell to cast-1
pop eax                           - set eax to 1
xor edx, edx                      - set edx to 0
call 0046BE90                     - CALL Shift_Quad_word_EDX:EAX_Left_By_CL
and eax, ebx                      - 'and' low dwords
and edx, edi                      - 'and' high words
or eax, edx                       - test if both are 0.
jne 00420071                      - Jump if spell to cast from item is on one of the items.
or dword ptr [esi+0068782C], FFFFFFFF - set spell to cast to -1 (no spell)
mov byte ptr [esi+00687830], 04   - set cast from to 4 (nowhere)
mov dword ptr [00526A14], 000000FF - ??

00420071:
mov al, byte ptr [ebp-38]         - + slvl
test [ebp-15], 80                 - cursed resists
mov byte ptr [esi+0068CBD0], al   - + slvl
mov eax, dword ptr [ebp-3C]       - ?
mov dword ptr [esi+0068CBD8], eax - ?
je 00420091                       - If not cursed resists, jump
xor eax, eax                      - set eax to 0
xor ecx, ecx                      - set ecx to 0
xor ebx, ebx                      - set ebx to 0
jmp 0042009A                      - jump

00420091:
mov ecx, dword ptr [ebp-40] - set ecx to resist fire
mov ebx, dword ptr [ebp-44] - set ebx to resist lightning
mov eax, dword ptr [ebp-48] - set eax to resist magic

0042009A:
push 0000004B
pop edx					max resists
cmp eax, edx				resist magic & max resist
jle 004200A3
mov eax, edx                    - If resist magic > max then set to max

004200A3:
* cmp ecx, edx                    - again for resist fire.
mov byte ptr [esi+00687941], al - set resist magic
jle 004200AF
mov ecx, edx                    - If resist ? > max then set to max

004200AF:
* cmp ebx, edx
mov byte ptr [esi+00687942], cl - Set resist fire
jle 004200BB
mov ebx, edx                    - If resist lightning > max then set to max

004200BB:
mov eax, dword ptr [ebp-10]
move byte ptr [esi+00687943], bl - set resist lightning
mov cl, byte ptr [esi+006878D8] - set cl to class
test cl, cl
jne 004200D0                    - If class is not warior, jump
shl eax, 1                      - double eax

004200D0:
cmp cl, 01
jne 004200DB                    - If class is not Rogue, jump
mov edx, eax                    - set edx to eax
sar edx, 1                      - divide by 2
add eax, edx                    - add half of eax to eax

004200DB:
shl eax, 06                     - prep eax to become stat
add dword ptr [ebp-08], eax     - add eax to [ebp-08]
mov eax, dword ptr [ebp-14]
cmp cl, 02
jne 004200EB                    - If class is not sorcerer, jump
shl eax, 1

004200EB:
cmp cl, 01
jne 004200F6
mov ecx, eax
sar ecx, 1
add eax, ecx

004200F6:
shl eax, 06
add dword ptr [ebp-0C], eax
mov eax, dword ptr [ebp-08]
add eax, dword ptr [esi+00687908] - add base current life
mov edi, dword ptr [ebp-5C]
mov dword ptr [esi+00687910], eax - set modified current life
mov eax, dword ptr [esi+0068790C] - set eax to base max life
add eax, dword ptr [ebp-08]
cmp edi, dword ptr [00687774]     - character # to local character
mov dword ptr [esi+00687914], eax - set modified max life
jne 0042013A
test dword ptr [esi+00687910], FFFFFFC0 - modified current life & -64 
jg 0042013A             - If life > -1 (actually -64), jump
xor edx, edx            - set edx to 0
mov ecx, edi
call 004520AD

0042013A:
mov eax, dword ptr [esi+0068791C] - set eax to base current mana
add eax, dword ptr [ebp-0C]       - add mana from items?
mov dword ptr [eso+00687924], eax - set modified current mana
mov eax, dword ptr [esi+00687920] - base max mana
add eax, dword ptr [ebp-0C]       - add mana from items?
test [ebp-18], 01                 - check for infravision
mov dword ptr [esi+00687928], eax
mov eax, dword ptr [ebp-4C]		min fire damage
mov dword ptr [esi+0068CBDC], eax
mov eax, dword ptr [ebp-50]		max fire damage
mov dword ptr [esi+0068CBEO], eax
mov eax, dword ptr [ebp-54]		min lightning damage
mov dword ptr [esi+0068CBE4], eax
mov eax, dword ptr [ebp-58]		max lightning damage
mov dword ptr [esi+0068CBE8], eax
je 0042018D
push 00000001
pop ebx
mov dword ptr [esi+00687948], ebx - infravision
jmp 00420197

0042018D:
and dword ptr [esi+00687948], 00000000 - infravision
push 00000001
pop ebx

00420197:
and byte ptr [esi+006878B4], 00   - turn off 'have shield'
xor edx, edx
mov dword ptr [esi+006878B0], edx - set unknown to 0
mov ecx, dword ptr [esi+006880BC] - set ecx to 'weapon type'
xor eax, eax
cmp ecx, FFFFFFFF                 - 'weapon type'
je 004201C6
cmp byte ptr [esi+00688172], 01   - 'item class' and Weapon
jne 004201C6
cmp dword ptr [esi+00688218], edx - ? Special Effects & 0
je 004201C6
mov eax, ecx

004201C6:
mov ecx, dword ptr [esi+0068822C] - set ecx to 'weapon type'
cmp ecx, FFFFFFFF
je 004201E4
cmp byte ptr [esi+006882E2], 01   - 2nd weapon/shield slot's Class & Weapon
jne 004201E4
cmp dword ptr [esi+00688388], edx - ?req. met of second hand?
je 004201E4
mov eax, ecx

004201E4:
mov ecx, eax
dex ecx
je 0042020D - sword
dec ecx
je 00420209 - axe
dec ecx
je 004201FF - bow
dec ecx
je 004201FB - mace
sub ecx, 00000006
jne 00420210 - staff
push 00000008 - staff pushes an 8
jmp 0042020F

004201FB:
push 00000006 - mace pushes a 6
jmp 0042020F

004201FF:
mov dword ptr [esi+006878B0], ebx - bow
push 00000004 - bow pushes a 4
jmp 0042020F

00420209:
push 00000005 - axe pushes a 5
jmp 0042020F

0042020D:
push 00000002 - sword pushes a 2

0042020F:
pop eax

00420210:
cmp dword ptr [esi+006880BC], 00000005	First Weapon Slot & Shield
jne 00420229
cmp dword ptr [esi+00688218], edx		req. met of primary hand
je 00420229
mov byte ptr [esi+006878B4], 01		set have shield
inc eax						If shield, +1 to eax.

00420229:
cmp dword ptr [esi+0068822C], 00000005	Second hand & shield
jne 00420242
cmp dword ptr [esi+00688388], edx		req. met of second hand
je 00420242
mov byte ptr [esi+006878B4], 01		set have shield
inc eax						If shield, +1 to eax

00420242:
mov ecx, dword ptr [esi+0068839C]
	set ecx to armor's item type (06 = Leather, 08 = Mail, 09 = Plate)
cmp ecx, 00000008 - armor & mail
jne 00420258
cmp dword ptr [esi+006884F8], edx
je 00420258
add eax, 00000010 - If wearing mail, eax+10h

00420258:
cmp ecx, 00000009 - armor & plate
jne 00420268
cmp dword ptr [esi+006884F8], edx
je 00420268
add eax, 00000020 - If wearing mail, eax+20h

00420268:
cmp dword ptr [esi+006877F0], eax		appearance
je 004202F5
cmp dword ptr [ebp-6C], edx			? unknown & 0 ?
je 004202F5
mov dword ptr [esi+006877F0], eax		appearance
and dword ptr [esi+00687990], 00000000	clear animations loaded
mov edx, ebx					? set to 1 ?
mov ecx, edi
call 0044BDC1
mov ecx, edi
call 0044C4E0
mov eax, edi
mov ecx, dword ptr [esi+006877E8]		? titt riktning ?
imul eax, 00001536
add ecx, eax
mov eax, dword ptr [4*ecx+00687994]
mov dword ptr [esi+006877F4], eax
mov eax, dword ptr [esi+006879B4]
mov dword ptr [esi+00687800], eax		last frame number
mov dword ptr [esi+00687804], ebx		current frame number
and dword ptr [esi+006877FC], 00000000
lea eax, dword ptr [esi+006879B8]		? 96 ?
mov dword ptr [esi+006877F8], 00000003
mov ecx, dword ptr [eax]
mov dword ptr [esi+00687808], ecx
mov eax, dword ptr [eax]
sub eax, 00000040
sar eax, 1
mov dword ptr [esi+0068780C], eax
xor edx, edx
jmp 004202FB

004202F5:
mov dword ptr [esi+006877F0], eax

004202FB:
mov eax, dword ptr [0064DA18]		# of active effects
cmp eax, edx				# & 0
jle 00420345				#<=0, jump
mov ecx, 00428038				effect # array
mov edx, eax				# of active effects

0042030B:
mov eax, dword ptr [ecx]
imul eax, 000000B0
cmp dword ptr [eax+00648428], 0000000D	MANA SHIELD
jne 0042033F
cmp dword ptr [eax+0064849C], edi		caster's # and character #
jne 0042033F
mov edi, dword ptr [esi+00687910] - mod. current life
mov dword ptr [eax+006484B8], edi
mov edi, dword ptr [esi+00687908] - base current life
mov dword ptr [eax+006484BC], edi
mov edi, dword ptr [ebp-5C]

0042033F:
add ecx, 00000004
dec edx
jne 0042030B

00420345:
pop edi
mov dword ptr [004B9A64], ebx
mov dword ptr [004B9798], ebx
pop esi
pop ebx
leave
ret

------------------------------------------------

00420356:

recalcs 'known spells from scrolls'.


==============================================

Set_Magic_Requirement_For_Spell_Book_Moved_To_Backpack_While_Inventory_Closed

........
0042067C:
imul edi, 000054D8
and dword ptr [esp+10], 00000000
cmp dword ptr [edi+0068BE84], 00000000
jle 0042072A
lea esi, dword ptr [edi+00688665]

0042069A:
cmp dword ptr [esi+FFFFFEA7], 00000000	item type & (Elixer, Book, Scroll, Potion)
lea eax, dword ptr [esi+FFFFFF7F]		Spell code
jne 0040710						not Elixer, Book, Scroll, Potion, jump

cmp dword ptr [eax-04], 00000018		magic code & book
jne 00420710					no, jump

mov ecx, dword ptr [eax]			spell code
imul ecx, 00000038				spell record
mov cl, byte ptr [ecx+004A346C]		magic required for lvl 1
mov byte ptr [esi], cl				magic required for item
mov eax, dword ptr [eax]			spell code
movsx ebp, byte ptr [eax+edi+00687839]	slvl for counter

004206C6:
test ebp, ebp
je 004206FC						if counter=0, jump
mov cl, byte ptr [esi]				set cl to magic req.
push 00000064
movzx eax, cl
pop ebx
lea eax, dword ptr [eax+4*eax]
shl eax, 02
cdq
idiv ebx
add al, cl
dec ebp
movzx ecx, al
mov byte ptr [esi], al
lea eax, dword ptr [ecx+4*ecx]
shl eax, 02
cdq
idiv ebx
add eax, ecx
cmp eax, 000000FF
jle 004206C6
or byte ptr [esi], FF
xor ebp, ebp
jmp 004206C6

004206FC:
lea edx, dword ptr [esi+FFFFFE9F]	start of item record
lea ecx, dword ptr [edi+00687778]	start of character record
call 00420601
mov dword ptr [esi+03], eax		req. met

00420710:
inc [esp+10]				counter
add esi, 000170				next item
mov eax, dword ptr [esp+10]		counter
cmp eax, dword ptr [edi+0068BE84]	? & number of items in backpack
jl 0042069A					counter < # of items, jump

0042072A:
pop edi
pop esi
pop ebp
pop ebx
pop ecx
ret

=================================================

00421113: create staff ?

........

00421153: generate random spell

........

=================================================

gold generation code

........
0042147D:
........

normal diff:
dlvl x (10..20)

nightmare diff:
(dlvl+16) x (10..20)

hell diff:
(dlvl+32) x (10..20)


=================================================

00421560: Set_eax_to_Rnd[ecx..edx]
  set edx to edx-ecx+1
  set eax to ecx
  set cl to 16h
push esi      - store esi
mov esi, ecx  - set esi to ecx
sub edx, esi  - subtract ecx from edx
mov cl, 16    - set cl to 16h (22)
inc edx       - add 1 to edx
call 00417C77 - set_eax_to_Rnd[edx]
add eax, esi  - add ecx to eax
pop esi       - restore esi
ret

=================================================

00421571:

Called from 00421F0F and 00421F33

		From ..1F0F
[esp+18]	?
[esp+14]	?
[esp+10]	max range
edx		?min range
ecx		min range

421571:
push ebx
push esi
push edi
mov edi, dword ptr [esp+10]	max
cmp edx, edi			?min & max
mov eax, ecx			min
jne 00421584			min<>max, jump
mov eax, dword ptr [esp+14]	qlvl
jmp 004215AB

00421584:
mov ebx, dword ptr [esp+14]
mov esi, dword ptr [esp+18]
cmp ebx, esi
jne 00421594
mov eax, ebx
jmp 004215AB

00421594:
sub eax, edx			min-?min
sub edi, edx			max-?min
imul eax, 00000064		x 100
cdq
idiv edi				div ?
sub esi, ebx			- ebx
push 00000064
pop ecx				100
imul eax, esi			x ?
cdq
idiv ecx				div 100
add eax, ebx			?

004215AB:
pop edi
pop esi
pop ebx
ret 000C

=================================================

004215B1:

Called from 9 different locations.

	00421042	Prefix?
	004221F5	Suffix?
	004222F0	Staff spell
	00422926	Unique attribute #1
	0042294B	Unique attribute #2
	00422971	Unique attribute #3
	00422997	Unique attribute #4
	004229BD	Unique attribute #5
	004229E3	Unique attribute #6

[ebp+00] - name
[ebp+04] - ? effect

[ebp+08] - min range
[ebp+0C] - max range
[ebp+10] - ?min gold value
[ebp+14] - ?max gold value
[ebp+18] - ?multiplier	? or boolean
?[ebp+1C] - ? I don't know (boolean)
?[ebp+20] - ? Non-cursed Flag (0 = cursed, 1 = not)

4215B1: Process Prefix/Suffix/?Unique? Effects
push ebp
mov ebp, esp
push ecx
push ebx
push esi
push edi
mov edi, edx
mov edx, dword ptr [ebp+0C] - max range
mov esi, ecx
mov ecx, dword ptr [ebp+08] - min range
call 00421560               - sets eax to min..max
					returns edx as max-min+1
					& cl as 16h
cmp edi, 0000004F - (4F = 79)     - effect & max number
mov ebx, eax				min range
ja 00421EE9
jmp dword ptr [4*edi+00421F4E]    - ooh, a dynamic jump
  ....

	1D : + damage taken		421FC2: dword 00421959
	1E : - damage taken		421FC6: dword 0042196C

	25	Indestructable	00421FFA: dword 00421ACC

	29 - Multiple arrows	0042200A: dword 00421B26
	30 - No Code		0042200E: dword 00421EE9
	31 - No Code		00422012: dword 00421EE9
	32 - No Code		00422016: dword 00421EE9
	33 - No Code		0042201A: dword 00421EE9
	37 - % steal mana		0042202A: dword 00421BC2
	38 - % steal life		0042202E: dword 00421C07
	3E - random speed arrows
					00422046: dword 00421D5C
	43 - Attack speed		0042205A: dword 00421DB1
	4C	Armor class added to life		0042207E	DWORD 00421E57
	4D - 10% of mana added to armor class	00422082	dword 00421E8F

	NOTE: Description pointers located at 00423F1E

  ....
004215D9: +% to hit
mov eax, esi
imul eax, 00000170    - multiply eax by size of item record
lea eax, dword ptr [eax+00636E40] - set eax to point to +% to hit
jmp 00421D55

mov eax, esi
imul eax, 00000170    - multiply eax by size of item record
lea eax, dword ptr [eax+00636E40]
jmp 0042197A

mov eax, esi
imul eax, 00000170
lea eax, dword ptr [eax+00636E3C]
jmp 00421D55

mov eax, esi
imul eax, 00000170
lea eax, dword ptr [eax+00636E3C]
jmp 0042197A

mov edx, dword ptr [ebp+0C]
mov ecx, dword ptr [ebp+08]
call 00421560
mov edi, esi
mov ebx, eax
imul edi, 00000170
add dword ptr [edi+00636E3C], ebx
cmp dword ptr [ebp+08], 00000014
jne 00421653
push 00000005
pop edx
push 00000001
pop ecx
call 00421560
jmp 00421656

00421653:
mov eax, dword ptr [ebp+08]

00421656:
cmp dword ptr [ebp+08], 00000024
jne 00421667
push 0000000A
pop edx
push 00000006
pop ecx
call 00421560

00421667:
cmp dword ptr [ebp+08], 00000033
jne 00421678
push 0000000F
pop edx
push 0000000B
pop ecx
call 00421560

........

00421959:				+ damage taken
mov eax, edi			item #
imul eax, 00000170		item record
lea eax, dword ptr [eax+00636E70]
jmp 00421D55			will adds ebx to [eax]

........

--------------------------------------------------------

00421A1F:	Looks like +/- % durability
mov ecx, esi
mov eax, ebx				%
imul ecx, 00000170
push 00000064
mov edx, dword ptr [ecx+00636E38]	max dur
pop edi
imul eax, edx				% x max dur
mov dword ptr [ebp-04], edx		max dur
push 00000001
cdq
idiv edi		reduct. = % x max dur / 64 (100)
mov edx, dword ptr [ebp-04]		max dur
sub edx, eax			max dur - reduct.
pop eax
cmp edx, eax			min of 1
mov dword ptr [ecx+00636E38], edx	max dur = reduct.
jge 00421A53
mov dword ptr [ecx+00636E38], eax	max dur of 1

00421A53:
mov eax, dword ptr [ecx+00636E38]	max dur
mov dword ptr [ecx+00636E34], eax	set cur to max
jmp 00421EE9

--------------------------------------------------

00421B26:
mov eax, esi
imul eax, 00000170
or byte ptr [eax+00636E21], 01
lea eax, dword ptr [eax+00636E20]
jmp 00421EE9

00421BC2: % steal mana
cmp dword ptr [ebp+08], 00000003 - min range & 3
jne 00421BDD                     - not 3, skip to next
mov eax, esi                     - set eax to item number
imul eax, 00000170               - multiply by item size
or byte ptr [eax+00636E21], 20   - 2nd byte of spec. flags
lea eax, dword ptr [eax+00636E20] - special ability flags

00421BDD:
cmp dword ptr [ebp+08], 00000005 - min range & 5
jne 00421BF8			   - not 5, skip to next
mov eax, esi			   - set eax to item #
imul eax, 00000170		   - multiply by item size
or byte ptr [eax+00636E21], 40   - set flag
lea eax, dword ptr [eax+00636E20] - special ability flags

00421BF8:
mov dword ptr [004B9A64], 00000001 - ?guess:update mana ball boolean
jmp 00421EE9

--------------------------------------------------------

00421C07: % steal life
cmp dword ptr [ebp+08], 00000003
jne 00421C22
mov eax, esi
imul eax, 00000170
or byte ptr [eax+00636E21], 80
lea eax, dword ptr [eax+00636E20]

00421C22:
cmp dword ptr [ebp+08], 00000005
jne 00421C3D
mov eax, esi
imul eax, 00000170
or byte ptr [eax+00636E22], 01
lea eax, dword ptr [eax+00636E20]

00421C3D:
mov dword ptr [004B9798], 00000001
jmp 00421EE9

--------------------------------------------------------



........

00421BF8:
mov dword ptr [004B9A64], 00000001
jmp 00421EE9
cmp dword ptr [ebp+08], 00000003
jne 00421C22
mov eax, esi
imul eax, 00000170
or byte ptr [eax+00636E21], 80
lea eax, dword ptr [eax+00636E20]

........

--------------------------------------------------------

00421D55:
add dword ptr [eax], ebx
jmp 00421EE9

--------------------------------------------------------

00421D5C: DYNAMIC JUMP - 3E Random Speed Arrows
mov eax, esi
imul eax, 00000170
or dword ptr [eax+00636E20], 00000004	Random Speed Arrows
lea eax, dword ptr [eax+00636E20]
jmp 00421EE9

--------------------------------------------------------

mov eax, esi
mov ecx, dword ptr [ebp+08]
imul eax, 00000170
mov dword ptr [eax+00636E14], ecx
mov ecx, dword ptr [eax+00636E18], ecx
jmp 00421EE9

--------------------------------------------------------

00421DB1: DYNAMIC JUMP - 43 Attack Speed
mov eax, esi
imul eax, 00000170
or byte ptr [eax+00636E22], 08	Faster Attack
lea eax, dword ptr [eax+00636E20]
jmp 00421EE9

--------------------------------------------------------

00421E8F: DYNAMIC JUMP - 4D 10% of mana added to armor class
mov eax, esi
push 0000000A
imul eax, 00000170
pop edi
lea ecx, dword ptr [eax+00636E1C]	AC
mov eax, dword ptr [00687774]
imul eax, 000054D8
mov eax, dword ptr [eax+00687920]	base max mana
sar eax, 06
cdq
idiv edi					10%
add dword ptr [ecx], eax		add to AC
jmp 00421EE9

NOTE: The item is set up with an AC equal to 10% of the local player's mana.  I'm not sure if, during multiplayer, the game will accuratly track non-local player's AC.

--------------------------------------------------------


00421EE9:
imul esi, 00000170
cmp dword ptr [esi+00636E98], 00000000		? P/S description variable
jne 00421F25
cmp dword ptr [esi+00636E9C], 00000000
		? P/S description pointer
jne 00421F25
push [ebp+14]			- ? occurs on
mov edx, dword ptr [ebp+08] - min range
mov ecx, ebx			min range
push [ebp+10]			- ?qlvl
push [ebp+0C]			- max range
call 00421571
mov dword ptr [esi+00636E98], eax	? description
mov eax, dword ptr [ebp+18]
mov dword ptr [esi+00636E9C], eax	? pointer
jmp 00421F47

00421F25:
push [ebp+14]
mov edx, dword ptr [ebp+08] - min range
mov ecx, ebx
push [ebp+10]
push [ebp+0C]			- max range
call 00421571
mov dword ptr [esi+00636EA0], eax
mov eax, dword ptr [ebp+18]
mov dword ptr [esi+00636EA4], eax

00421F47:
pop edi
pop esi
pop ebx
leave
ret 0014

================================================

004223C2: CALL CREATE_NEW_ITEM

Create item for the first time
  (i.e. not a previous item being loaded, this code will create stats such as durability and charges)

004223C2:
push ebp
mov ebp, esp
mov eax, ecx				item #
imul eax, 00000170			item record offset
cmp byte ptr [eax+00636E06], 04	item class
	01 Weapon
	02 Armor
	03 Anything Else
	04 Gold
je 0042245F					gold, jump
mov edx, dword ptr [ebp+08]
cmp edx, 00000019
jle 004223E5
push 00000019
pop edx

004223E5:
mov eax, dword ptr [eax+00636D50]
cmp eax, 00000005		05	Shield
jg 00422422
je 00422418
test eax, eax		00	Elixer, Book, Scroll, Potion
jle 0042245F
cmp eax, 00000002		01	Sword
				02	Axe
jle 0042240E
cmp eax, 00000003		03	Bow
je 00422407
cmp eax, 00000004		04	Mace
je 0042240E
jmp 0042245F

........

00422407:
push [ebp+10]
push 00000010
jmp 00422457

........

00422422:
cmp eax, 00000006		(eax>5 AND eax<6)
jl 0042245F			NEVER USED
cmp eax, 00000009		06	Leather Armor
				07	Helm
				08	Mail Armor
				09	Plate Armor
jle 0042244F
cmp eax, 0000000A		0A	Staff
je 00422442
cmp eax, 0000000B		0B	Gold
jle 0042245F
cmp eax, 0000000D		0C	Ring
				0D	Amulet
jg 0042245F
push [ebp+10]
push 00000001
jmp 00422457

00422442:

........

00422457:
push [ebp+0C]
call 0042208E

0042245F:
pop ebp
ret 000C

================================================

Item Repair

Registers:
ebx	preserved
ecx	item record
edx	clvl
ebp	preserved
esi	preserved
edi	preserved


00423811:
push ebx
push ebp
push esi
mov esi, ecx				item record
push edi
mov ebx, edx				clvl
mov eax, dword ptr [esi+000000F0]	Max dur
cmp dword ptr [esi+000000EC], eax	Cur dur & Max
je 00423884					Cur=Max, EXIT
test eax, eax
jle 0042386A			MAX<=0, DESTROY ITEM
xor edi, edi
lea ebp, dword ptr [ebx+09]		clvl + 9

00423830:					LOOP
mov edx, ebx				clvl
mov cl, 25					? 25 (39) ?
call 00417C77		CALL set_eax_to_Rnd[clvl]
add eax, ebx				rnd[clvl]+clvl
add edi, eax				dur gain
mov eax, dword ptr [esi+000000F0]	max dur
cdq
idiv ebp					max/(clvl+9)
cmp eax, 00000001
jge 0042384E
push 00000001
pop eax					minimum of 1

0042384E:
sub dword ptr [esi+000000F0], eax	lose max dur
mov eax, dword ptr [esi+000000F0]
je 0042386A			max dur=0, DESTROY ITEM
mov ecx, edi				dur gain
add ecx, dword ptr [esi+000000EC]	gain+cur dur
cmp ecx, eax				gain+cur & max
jge 00423870				FULLY REPAIRED
jmp 00423830				LOOP

0042386A:					DESTROY ITEM
or dword ptr [esi+08], FFFFFFFF
jmp 00423884				EXIT

00423870:
add dword ptr [esi+000000EC], edi	add gain to cur
cmp dword ptr [esi+000000EC], eax	cur & max
jle 00423884				cur<=max, skip
mov dword ptr [esi+000000EC], eax	set cur to max

00423884:					EXIT
pop edi
pop esi
pop ebp
pop ebx
ret


================================================

004238FC: Recharge staff skill

ecx = item record
edx = rnd[clvl/qlvl(book)]+1

Called from 004238DA

004238FC:
mov eax, dword ptr [ecx+000000E8]		Max staff charges
push esi
cmp dword ptr [ecx+000000E4], eax		current & max
je 00423941						full, jump
dec eax						max-1
test eax, eax
mov dword ptr [ecx+000000E8], eax		dec max charges
je 00423941						no charges, jump

00423916:						LOOP:
add dword ptr [ecx+000000E4], edx		add edx to current charges
mov esi, dword ptr [ecx+000000E4]		current charges
cmp esi, eax					current & max
jge 00423931					current>=max, jump
dec eax						max-1
mov dword ptr [ecx+000000E8], eax		dec max charges
jne 00423916					max not 0, LOOP
pop esi
ret

00423931:
mov eax, dword ptr [ecx+000000E8]		Max
cmp esi, eax					current & max
jle 00423941					current<=max, jump
mov dword ptr [ecx+000000E4], eax		if cur>max, set cur to max

00423941:
pop esi
ret

================================================

00423708: CALL Mouseover item on ground ?

called from 004053EC

00423708:
push esi
mov esi, ecx
imul esi, 00000170
cmp dword ptr [esi+00636D50], 0000000B	? item type and gold
je 00423758
cmp dword ptr [esi+00636D80], 00000000	id'ed & no
lea eax, dword ptr [esi+00636DC5]		full item name (null terminated)
jne 0042372F					skip
lea eax, dword ptr [esi+00636D85]		item type name
push eax
push 004B9C48
call 0046B6B0
mov al, byte ptr [esi+00636D84]		Normal/Magic/Unique
pop ecx
cmp al, 01
pop ecx
jne 0042374B
mov byte ptr [004B9B04], al

0042374B:
cmp al, 02
jne 00423779					pop esi & ret
mov byte ptr [004B9B04], 03
pop esi
ret
........
gold stuff & ret

================================================

CALL display prefix and/or suffix

called from
	00424228 - unique item line1?	called from 004548C2, 00461625
	0042425C - unique item line2? called from 004548C2, 00461625
	00424281 - unique item line3?	called from 004548C2, 00461625
	004242A6 - unique item line4?	called from 004548C2, 00461625
	004242BC - unique item line5?	called from 004548C2, 00461625
	004242F0 - unique item line6?	called from 004548C2, 00461625
	00424528 - CALL 00424402, called from 0041F49A 
		looks like what I'm looking for!
	00424543 - as above, but for suffix.
	00459C82 - similar, but called from more locations....
	00459CA3

00423A22: (called from multiple locations)
movsx eax, cl

00423A25: (not called, interpreted a DWORD as a jump command)
push esi
cmp eax, 0000004F
push edi
mov esi, edx
ja 00423F0A
jmp dword ptr [4*eax+00423F1E]
........
push dword ptr [esi+0000010C]
push 0049454C	- "%+i to vitality"
jmp 00423EFB
........
push dword ptr [esi+00000100]
........

00423C4F:
push dword ptr [esi+00000128]
push 0049451C			"%+i damage from enemies"
jmp 00423EFB

........

00423D87: (stored on dword list 00423FFE)
add esi, 000000D8
mov edi, 004B9B18
test [esi+01], 80
je 00423DA5
push 00494368	- "hit steals 3% life"
push edi
call 0046B6B0
pop ecx
pop ecx

00423DA5:
test [esi+02], 01
je 00423F1B
push 00494354	- "hit steals 5% life"
jmp 00423E61
........

00423E61:
push edi
jmp 00423F14
........
00423F14:
call 0046B6B0
00423F19:
pop ecx
pop ecx
00423F1B:
pop edi
pop esi
ret

=================================================

00424402: CALL Display info of item ECX

CALLED FROM 0041F49A

USES: eax, ecx, edx

eax	Initial value not used.		NOT preserved
ebx	Initial value not used.		preserved
ecx	Initial value, ITEM RECORD.	NOT preserved
edx	Initial value not used.		NOT preserved
ebp	Initial value not used.		preserved
edi	Initial value not used.		preserved
esi	Initial value not used.		preserved

damage: %i-%i  Indestructible
damage: %i-%i  Dur: %i/%i
armor: %i  Indestructible
armor: %i  Dur: %i/%i
dam: %i-%i  Dur: %i/%i
Charges: %i/%i
unique item
Required:
%s %i Str
%s %i Mag
%s %i Dex
Not Identified


00424402:
push ebx
push ebp
mov ebp, ecx
push esi
push edi
mov esi, 000000FF
cmp byte ptr [ebp+000000BE], 01	Class & Weapon
mov ebx, 004B9B18
jne 00424470
mov eax, dword ptr [ebp+000000F0]	Max Item Dur.
cmp eax, esi
jne 00424441
push dword ptr [ebp+000000D0]		Max damage
push dword ptr [ebp+000000CC]		Min damage
push 0049489C			"damage: %i-%i  Indestructable"
........


=================================================

Use magic item (like potion/scroll/etc.)

push	Spell code
edx	magic code
ecx	? dword ptr [esp+14] ? Character #

00424811:
push ebp
mov ebp, esp
push ecx
push ebx
push esi
mov esi, ecx
cmp edx, 0000001C
push edi
mov dword ptr [ebp-04], esi
jg 00424D14				magic code>1C
je 00424C95	
	Unused magic code 1C (same jump as Pot. Healing)
push 0000000C
pop ebx
cmp edx, ebx
jg 00424967				0C<magic code<1C
je 00424958				Elixer of Dex
dec edx
dec edx
je 00424935				Pot. Full Healing
dec edx
je 00424C95				Pot. Healing
sub ebx, 00000003
je 004248AC				Pot. Mana
dec edx
je 0042487C				Pot. Full Mana
sub edx, 00000003
je 0042486D				Elixer of Str.
dec edx
jne 00424D4C			Not Elix. Magic
push 00000001
pop edx
call 00451EC8
jmp 00424D4C

........

00424935:	Potion of Full Healing
imul esi, 000054D8
mov eax, dword ptr [esi+00687914]
mov dword ptr [esi+00687910], eax
mov eax, dword ptr [esi+0068790C]
mov dword ptr [esi+00687908], eax
jmp 00424D08

........

0042487C:	Potion of Full Mana
imul esi, 000054D8
test byte ptr [esi+0068CBCB], 08
jne 00424D4C
mov eax, dword ptr [esi+00687928]
mov dword ptr [esi+00687924], eax
mov eax, dword ptr [esi+00687920]
mov dword ptr [esi+0068791C], eax
jmp 00424A28

........

=================================================

00425335: Set_Magic_Requirement_For_Spell_Book_From_Item_ECX

	006A6228

Called from 0042065A, 004254FC

imul ecx, 00000170				item record
push edi						preserve edi
cmp dword ptr [ecx+?], 00000018		Magic Code of item on cursor & Book
jne ?							no, jump out of routine
mov edx, dword ptr [ecx+?]			Spell code of item on cursor
lea eax, dword ptr [ecx+?]
imul edx, 00000038				spell record
mov dl, byte ptr [edx+004A346C]		magic req. for level 1 book
mov byte ptr [ecx+?], dl		magic req. of item on cursor

mov edx, dword ptr [00687774]
imul edx, 000054D8

mov eax, dword ptr [eax]			Spell code of item on cursor
movsx edi, byte ptr [edx+eax+00687839]	set loop counter to character's slvl
test edi, edi
je ?						if counter is 0, jump out of routine
push esi						preserve esi
push ebx						preserve ebx

?:
mov bl, byte ptr [ecx+?]		magic req.
push 00000064
movzx eax, bl					magic req.
pop esi
lea eax, dword ptr [eax+4*eax]		5 x magic req.
push 00000064
shl eax, 02						4 x 5 x magic req.
cdq
idiv esi						20/100 x magic req.
add al, bl						20% + 100% of magic req.
pop ebx
movzx esi, al					120% of magic req.
mov byte ptr [ecx+?], al		set new magic req.
dec edi						dec counter
lea eax, dword ptr [esi+4*esi]		120% of magic req. x 5
shl eax, 02						120% of req. x 5 x 4
cdq
idiv ebx						120% of req. x 20/100
add eax, esi					120% of req. x 120%
cmp eax, 000000FF					compare to 255
jle ?					next req. <= 255, next
or byte ptr [ecx+?], FF		set req. to 255
xor edi, edi					set counter to 0

?:
test edi, edi
jne ?					coutner not 0, loop
pop ebx
pop esi

?:
pop edi
ret


=============================================

Regesters Used:
  eax - Initial value is discarded.
      - Returns either FFFFFFFF or ecx*34h
  ecx - Initial value is dword ptr [esi+00687814]
		a number of a 34h byte record, -1 = no record
      - Value is altered, PNU
  edx - Initial value is light radius and remains unchanged

set ecx to dword ptr [esi+00687814]

00426C86:
cmp dword ptr [00647D4C], 00000000 - ? & 0
mov eax, ecx                       - set eax to [esi+00687814]
jne 00426CD8                       - If ?<>0, ret
cmp eax, FFFFFFFF
je 00426CD8                        - If eax=FFFFFFFF, ret
imul eax, 00000034                 - eax=eax*34h (52)
push edi
push esi
push 00000001
pop esi
mov dword ptr [eax+00642EBC], esi	set eax+00642EBC to 1
mov ecx, dword ptr [eax+00642EA8]
mov dword ptr [eax+00642EC4], ecx	set eax+00642EC4 to eax+00642EA8
mov ecx, dword ptr [eax+00642EAC]
mov dword ptr [eax+00642EC8], ecx	set eax+00642EC8 to eax+00642EAC
mov edi, dword ptr [eax+00642EB0]
lea ecx, dword ptr [eax+00642EB0]
mov dword ptr [00642ECC], esi		set 00642ECC to 1
mov dword ptr [eax+00642ECC], edi	set eax+00642ECC to eax+00642EB0
pop esi
mov dword ptr [ecx], edx		set eax+00642EB0 to light radius
pop edi

00426CD8: ret

=================================================

00426FCE: Something to do with light radius

set edx to 0Ah (10) or light, whichever's greater
set ecx to dword ptr [esi+00687818]

00426FCE:
push esi
mov esi, dword ptr [00643D34]
test esi, esi
jle 0042700D			if [00643D34] <= 0, jump
push edi
push ebx
push 00000001
mov eax, 0064281C
pop edi

00426FE3:
cmp dword ptr [eax-08], ecx		compare [eax-08] to dword ptr [esi+00687818]
jne 00427005
mov dword ptr [eax], edi		set [eax] to 1
mov ebx, dword ptr [eax-14]
mov dword ptr [eax+08], ebx		set [eax+08] to [eax-14]
mov ebx, dword ptr [eax-10]
mov dword ptr [eax+0C], ebx		set [eax+0C] to [eax-10]
mov ebx, dword ptr [eax-0C]
mov dword ptr [eax+10], ebx		set [eax+10] to [eax-0C]
mov dword ptr [eax-0C], edx		set [eax-0C] to light radius, min. of 0A (10)
mov dword ptr [00643D30], edi		set [00643D30] to 1

00427005:
add eax, 00000034
dec esi
jne 00426FE3
pop ebx
pop edi

0042700D:
pop esi
ret

=================================================

004271B5: CALL
........
something about loading a game???  since it talks about 'invalid save files' and sets the # of effects, I'm guessing single player.
........
004273B3:
........

=================================================

004277F0: CALL

ecx - init to effect record offset

called from 004273B5

imul ecx, 000000B0		effect record offset
push esi				preserve
mov esi, 000000B0
push esi				PUSH 000000B0
add ecx, 00648428			start of effect record ecx
push dword ptr [00647D50]	PUSH ?
push ecx				PUSH start of effect record
call 0046BB10
add dword ptr [00647D50], esi
add esp, 0000000C			clear 3 pushes
pop esi				restore esi
ret

=================================================

........
004279F9: mov ecx, dword ptr [0064DA18]
........

=================================================

0042920B: DYNAMIC CALL Spell_Book_Info_Chain_Lightning
mov dword ptr [edx], 00000004		? min damage
mov eax, dword ptr [00687774]
imul eax, 000054D8			char record
movsx eax, byte ptr [eax+00687930]	clvl
lea eax, dword ptr [eax+eax+04]	clvl*2+4 = max dam.
jmp 00429401

=================================================

00429401:
mov ecx, dword ptr [ebp+08]
mov dword ptr [ecx], eax
jmp 004294EE

=================================================

004294EE:
pop edi
pop esi
pop ebp
ret 0004

=================================================

0042A3F9: CALL DELETE EFFECT RECORD AT INDEX EDX, EFFECT RECORD #ECX

Called from
	00431CC3
	00431DD8
	00440C15
	0044EE80
	0044EEA5
	004529F3

0042A3F9:
push ebx
push esi
push edi
mov edi, ecx
mov eax, edi
mov ebx, edx					set ebx to spell record to delete
imul eax, 000000B0
cmp dword ptr [eax+00648428], 0000000D	effect # & mana shield
jne 0042A436					if not mana shield, jump
mov esi, dword ptr [eax+0064849C]	caster's #
cmp esi, dword ptr [00687774]		local character
jne 0042A429				not local character, skip
push 00000001
mov dl, 5D					set to 5D (93)
pop ecx					set to 1
call 0043DC80				?

0042A429:
imul esi, 000054D8			local character offset
and byte ptr [esi+0068CBF0], 00	?

0042A436:
mov eax, dword ptr [0064DA18]		# of active effects
mov edx, 00648424				?
mov ecx, eax				# of active effects
shl ecx, 02					# of active effects*4
sub edx, ecx				? - # of active effects*4
dec eax					# of active effects-1
test eax, eax
mov dword ptr [edx], edi		?
mov dword ptr [0064DA18], eax		# of active effects-1
jle 0042A465				current # of effect (i.e. -1)<=0, jump
cmp ebx, eax				? & current # of effect (i.e. -1)
je 0042A465					=, jump
mov eax, dword ptr [4*eax+00648038]	last effect record #
mov dword ptr [4*ebx+00648038], eax
	ebx is probably referenced the effects record number to be deleted.

0042A465:
pop edi
pop esi
pop ebx
ret





=================================================

0042A469: CALL
push ebp
mov ebp, esp
sub esp, 00000010
mov eax, dword ptr [ebp+0C]
push ebx
push esi
mov esi, ecx
mov ecx, dword ptr [ebp+10]
push edi
mov edi, dword ptr [ebp+08]
cmp eax, edx
jne 0042A49D
cmp ecx, edi
jne 0042A49D
mov eax, esi
imul eax, 000000B0
and dword ptr [eax+0064843C], 00000000
and dword ptr [eax+00648440], 00000000
jmp 0042A51B

0042A49D:
lea ebx, dword ptr [eax+edi]
sub ebx, edx
sub ebx, ecx
add ecx, eax
shl ebx, 15
sub ecx, edx
mov dword ptr [ebp+0C], ebx
fild dword ptr [ebp+0C]
sub ecx, edi
shl ecx, 15
fst qword ptr [ebp-08]
mov dword ptr [ebp+0C], ecx
push ecx
fild dword ptr [ebp+0C]
push ecx
fst qword ptr [ebp-10]
fld st(0), st(1)
fmul st(0), st(2)
fld st(0), st(1)
fmul st(0), st(2)
faddp st(1), st(0)
fstp qword ptr [esp]
fstp st(0)
fstp st(0)
call 0046C8C4
imul esi 000000B0

........

0042A51B:
pop edi
pop esi
pop ebx
leave
ret 0010

=================================================

0042A522:
mov eax, ecx
push ebx
imul eax, 000000B0
push esi
push 00000001
mov edx, dword ptr [eax+0064842C]
mov esi, dword ptr [eax+00648430]
test edx, edx
pop ebx					set ebx to 1
jle 0042A54D
cmp edx, 00000070
jge 0042A54D
cmp esi, 00000070
jl 0042A553

0042A54D:
mov dword ptr [eax+0064845C], ebx

0042A553:
cmp dword ptr [eax+0064845C], 00000000
jne 0042A58F
imul edx, 00000070
or byte ptr [edx+esi+005C7C28], bl
add edx, esi
cmp byte ptr [edx+005D0670], 00
lea edx, dword ptr [edx+005D0670]
jne 0042A57D
inc cl
mov byte ptr [edx], cl
jmp 0042A580

........

=================================================

0042A71D: CALL Attack against monsters....

ecx - monster #

0042A71D:
push ebp
mov ebp, esp
sub esp, 00000010				4 local dwords
push ebx
push esi
mov esi, ecx				monster #
and dword ptr [ebp-08], 00000000
mov dword ptr [ebp-04], esi
imul esi, 000000E4			monster offset
cmp dword ptr [esi+0064E728], 00000000
push edi
mov dword ptr [ebp-0C], edx
jne 0042A827
test dword ptr [esi+0064E6EC], FFFFFFC0
jle 0042A827
mov eax, dword ptr [esi+0064E734]	points to the monster's base monster number
push 00000002
pop edx
cmp byte ptr [eax], 20			monster type & Illusion Weaver
jne 0042A76F
cmp byte ptr [esi+0064E660], dl
je 0042A827

0042A76F:
cmp dword ptr [esi+0064E65C], 0000000E
je 0042A827
mov eax, dword ptr [ebp+10]			?
movzx ecx, word ptr [esi+0064E724]		resistance/immunity
imul eax, 0000001C				?
movzx eax, byte ptr [eax+004959B9]		?
test cl, 08						magic immune
je 0042A79E						no, skip
cmp eax, 00000003					?attack type? & magic
je 0042A827						immune, jump

0042A79E:
test cl, 10						fire immune
je 0042A7A8						no, skip
cmp eax, 00000001					fire attack
je 0042A827						yes, jump

........

not, immune, check resists.  If resist, jump to 0042A7CD
If no resists, it goes to ..D4:


0042A7CD:				Set resist to TRUE
mov [ebp-08], 00000001

0042A7D4:
push 00000064
mov cl, 44
pop edx
call 00417C77
mov dword ptr [ebp-10], eax	rnd[0..99]
movxz eax, byte ptr [esi+........

5A (90%) - AC - [ebp+0C]

If it's <5, use 5.
If it's >90, use 90



..
..
..
..

0042A923:	Is the monster Diablo

=================================================

=================================================

0042ABF0: Monster/Trap Attacks Player

Called from: 0042B504 and 00449577

[ebp-0C] used to pass target's player number
[ebp-08] stores source of attack (-1 = trap; 0+=monster#)
[ebp-04] stores random roll (rnd[100])
[ebp+08] stores resists

[ebp+14] 3B = ? guess - in a sequence that prevents blocking. (walking, casting, blocking)
[ebp+18] 01 = ? guess - in a sequence that prevents blocking. (walking, casting, blocking)

0042ABF0:

........

........

........
0042AD26:
cmp byte ptr [esi+006878B4], 00	have shield & false
je 0042AD3E					no shield, jump
push 00000064				64h = 100
mov cl, 49					set cl to 49h = 73
pop edx					set edx to 64h (100)
call 00417C77				set_eax_to_Rnd[edx]
mov dword ptr [ebp-04], eax		set [ebp-04] to rnd[100]
jmp 0042AD45

0042AD3E:
mov [ebp-04], 00000064			no shield, set to 100.

0042AD45:
cmp byte ptr [ebp+18], 01		? guess - in a sequence that prevents blocking. (walking, casting, blocking)
jne 0042AD52				no, skip
mov [ebp-04], 00000064			yes, set to 100.

0042AD52:
cmp dword ptr [ebp+14], 0000003B	? & 3Bh = 59
	? guess - in a sequence that prevents blocking.
	(walking, casting, blocking)
jne 0042AD5F				no, skip
mov [ebp-04], 00000064			yes, set to 100

0042AD5F:
cmp ebx, FFFFFFFF				source of attack (monster number or -1 for trap) & trap
je 0042AD86					if trap, jump
imul ebx, 000000E4			monster x E4h (228)
movsx eax, byte ptr [ebx+0064E718]	mlvl
movsx ebx, byte ptr [esi+00687930]	clvl
shl eax, 1					x2
shl ebx, 1					x2
sub ebx, eax				(clvl - mlvl)x2
add ebx, dword ptr [esi+00687904]	block bonus
jmp 0042AD8C

0042AD86:
mov ebx, dword ptr [esi+00687904]	block bonus

0042AD8C:
add ebx, dword ptr [esi+006878EC]	modified dex
test ebx, ebx
jge 0042AD98
xor ebx, ebx				if ebx<0, set to 0

0042AD98:
cmp ebx, 00000064				chance to block 
jle 0042ADA0				<=100%, skip
push 00000064
pop ebx					set to 100%

0042ADA0:
mov eax, dword ptr [ebp-10]		?
mov al, byte ptr [eax+004959B9]	?
cmp al, 01					attack & fire
je 0042ADCF					jump to resist fire
cmp al, 02					attack & lightning
je 0042ADC6					jump to resist lightning
jbe 0042ADC0				(0 or less), no resist
cmp al, 04
ja 0042ADC0					(5+), no resists
movsx eax, byte ptr [esi+00687941]	resist magic
jmp 0042ADD6				?

0042ADC0:
and dword ptr [ebp+08], 00000000	set resists to 0
jmp 0042ADD9

0042ADC6:
movsx eax, byte ptr [esi+00687943]	resist lightning
jmp 0042ADD6

0042ADCF:
movsx eax, byte ptr [esi+00687942]	resist fire

0042ADD6:
mov dword ptr [ebp+08], eax		set resists

0042ADD9:
cmp dword ptr [ebp-14], edi		?
jnl 0042AFCD				?
cmp dword ptr [ebp+14], 0000003F	?
jne 0042ADF8				?
mov eax, dword ptr [esi+00687910]	modified current life
push 00000003
cdq
pop ecx
idiv ecx					mod. cur. life div 3
mov ecx, eax
jmp 0042AE65

0042ADF8:
cmp byte ptr [ebp+18], 00		? & ?
mov edx, dword ptr [ebp+10]		maximum damage
jne 0042AE36				not 0, jump to non-stat damage
mov edi, dword ptr [ebp+0C]		minimum damage
mov cl, 4B					cl=4Bh (75) - never used!
sub edx, edi				range, max-min
inc edx					+1
shl edx, 06					set range to stat
call 00417C77				set_eax_to_Rnd[edx]
mov ecx, eax				set ecx to rnd[range]
shl edi, 06					set min to stat
add ecx, edi				rnd[min..max]
cmp dword ptr [ebp-08], FFFFFFFF	source and trap
jne 0042AE29				no, skip 'of thieves'
test byte ptr [esi+0068CBCB], 10	halve trap damage
je 0042AE29					no, jump
sar ecx, 1					yes, div 2

0042AE29:
mov eax, dword ptr [esi+0068CBCC] - +/- dfe
shl eax, 006                      - turns it into a stat
add ecx, eax                      - adds it to the damage
jmp 0042AE5D

0042AE36:
sub edx, dword ptr [ebp+0C]		edx = max-min
mov cl, 4B					cl=4Bh (75) - never used!
inc edx					edx = max-min+1
call 00417C77				set_eax_to_Rnd[edx]
mov ecx, eax				set ecx to result
add ecx, dword ptr [ebp+0C]		add min, rnd [min..max]
cmp dword ptr [ebp-08], FFFFFFFF	source & trap
jne 0042AE57				no, skip 'of thieves'
test byte ptr [esi+0068CBCB], 10	halve trap damage
je 0042AE57					no, jump
sar ecx, 1					yes, div 2

0042AE57:
add ecx, dword ptr [esi+0068CBCC]	add +/- dfe

0042AE5D:
cmp ecx, 00000040			damage & 40h (1 stat or 64)
jge 0042AE65			damage>=40h, skip
push 00000040
pop ecx				set damage to 1 / 40h

0042AE65:
mov eax, dword ptr [ebp+08]	resists
test eax, eax
jle 0042AF2A			if eax=0, jump
imul eax, ecx			multiply damage by eax
push FFFFFF9C - -64h (-100)
cdq
pop edi
idiv edi				div 100 for percentile
mov edi, dword ptr [ebp-0C]	target's player number
add ecx, eax
cmp edi, dword ptr [00687774]	? & ?character number (0..3) ?
jne 0042AE92
sub dword ptr [esi+00687910], ecx	modified current life
sub dword ptr [esi+00687908], ecx	base current life

0042AE92:
mov eax, dword ptr [esi+00687914]	mod. max life
cmp dword ptr [esi+00687910], eax	current & max
jle 0042AEB2				current<=max, skip
mov dword ptr [esi+00687910], eax	set current to max
mov eax, dword ptr [esi+0068790C]	base max life
mov dword ptr [esi+00687908], eax	set current to max

0042AEB2:
test dword ptr [esi+00687910],FFFFFC0 - mod. cur. life & -40
jg 0042AECD					life>-1
mov edx, dword ptr [ebp+1C]		? \
mov ecx, edi				?  \ ? death
call 0044ECE2				?  / ? sequence
jmp 0042AFC8				? /

0042AECD:
mov al, byte ptr [esi+006878D8]	class
test al, al
jne 0042AEEA				if not warrior, jump
push dword ptr [esi+006877B4]		push y - position
mov edx, dword ptr [esi+006877B0]	x - position
mov ecx, 00000314				314h (788)
jmp 0042AF16

0042AEEA:
cmp al, 01
jne 0042AF01				if not rogue, jump
push dword ptr [esi+006877B4]
mov edx, dword ptr [esi+006877B0]
mov ecx, 000002A7				2A7h (679)
jmp 0042AF16

0042AF01:
cmp al, 02
jne 0042AF1B
push dword ptr [esi+006877B0]
mov edx, dword ptr [esi+006877B0]
mov ecx, 00000240

0042AF16:
call 004163F8

0042AF1B:
mov dword ptr [004B9798], 00000001
jmp 0042AFC8

0042AF2A:
cmp dword ptr [ebp-04], ebx		rnd[100] & % to block
jge 0042AF6E				no, jump
mov eax, dword ptr [ebp-08]		source
cmp eax, FFFFFFFF				source & trap
je 0042AF5C					trap, jump
imul eax, 000000E4			mon. # x size of rec
mov edx, dword ptr [esi+006877B4]	char.position.x
mov ecx, dword ptr [esi+006877B0]	char.position.y
push dword ptr [eax+0064E67C]		?mon.position.x
push dword ptr [eax+0064E678]		?mon.position.y
call 00417BD7				???
jmp 0042AF62

0042AF5C:
mov eax, dword ptr [esi+006877E8]	??titt riktning??

0042AF62:
mov ecx, dword ptr [ebp-0C]		target's char. number
mov edx, eax				??titt riktning??
call 0044DEF3
jmp 0042AFC8

0042AF6E:
mov edi, dword ptr [ebp-0C]		target's char. number
cmp edi, dword ptr [00687774]		target & local player
jne 0042AF85
sub dword ptr [esi+00687910], ecx	modified current life
sub dword ptr [esi+00687908], ecx	base current life

0042AF85:
mov eax, dword ptr [esi+00687914]	mod max life
cmp dword ptr [esi+00687910], eax	modified current life
jle 0042AFA5				curr<=max, jump
mov dword ptr [esi+00687910], eax	set cur. to max
mov eax, dword ptr [esi+0068790C]	base max life
mov dword ptr [esi+00687908], eax	set curr. to max
test dword ptr [esi+00687910], FFFFFFC0	mod cur life&-1
jg 0042AFBD					still alive, jump
mov edx, dword ptr [ebp+1C]		?
mov ecx, edi
call 0044ECE2				?
jmp 0042AFC8				skip

0042AFBD:
mov edx, ecx
push 00000000
mov ecx, edi
call 0044E278				?

0042AFC8:
push 00000001
pop eax					set eax to 1 (true)
jmp 0042AFCF

0042AFCD: (life<=-1;immunity;?)
xor eax, eax				set eax to 0 (false)

0042AFCF:
pop edi
pop esi
pop ebx
leave
ret 0018

=================================================

0042B2C9:

=================================================

0042B908: Fire Arrow - Init

00093A9C: Fire Arrow
Spell Effect Code:		0000001B
Init Stats:				0042B908
Update Spell Effect:		0042E5AF
01000000
00 01 0D 00
FFFFFFFF
FFFFFFFF

0042B908:
push ebp
mov ebp, esp
push ecx
push ebx
push esi
mov esi, dword  ptr [ebp+0C]
mov ebx, edx
push edi
mov edi, dword ptr [ebp+10]
cmp ebx, esi
mov dword ptr [ebp-04], ecx
jne 0042B935
cmp dword ptr [ebp+08], edi
jne 0042B935
mov eax, dword ptr [ebp+14]
shl eax, 02					eax x 4
add esi, dword ptr [eax+00498E08]
add edi, dword ptr [eax+00498E28]

0042B935:
cmp byte ptr [ebp+18], 00
jne 0042B96F
mov eax, dword ptr [ebp+1C]
imul eax, 000054D8
mov dl, byte ptr [eax+006878D8]	class
cmp dl, 01					class and rogue
jne 0042B95B
movsx eax, byte ptr [eax+00687930]	clvl
sar eax, 02					clvl x 4
jmp 0042B969

0042B95B:
test dl, dl
jne 0042B96F				skip if not Warrior
movsx eax, byte ptr [eax+00687930]	clvl
sar eax, 03					clvl x 8

0042B969:
add eax, 0000001F				Rogue:   4 x clvl + 1F
push eax					Warrior: 8 x clvl + 1F
jmp 0042B971

0042B96F:
push 00000020				Sorcerer: 20

0042B971:
push edi
push esi
push [ebp+08]
mov edx, ebx
call 0042A469
mov ecx, ebx
push edi
mov edi, dword ptr [ebp+08]
push esi
mov edx, edi
call 00429D69
mov esi, dword ptr [ebp-04]
mov edx, eax
mov ecx, esi
call 0042B64E
imul esi, 000000B0
push 00000005
mov edx, edi
mov dword ptr [esi+00648498], 00000100	duration
mov dword ptr [esi+006484B8], ebx		variable
mov ecx, ebx
mov dword ptr [esi+006484BC], edi		variable
call 00426BF7
mov dword ptr [esi+006484B0], eax		?
pop edi
pop esi
pop ebx
leave
ret 001C

=================================================

0042BC77: Firebolt
push ebp
mov ebp, esp
push ecx
push ebx
mov ebx, dword ptr [ebp+0C]
push esi
mov esi, dword ptr [ebp+10]
push edi
mov edi, edx
cmp edi, ebx
mov dword ptr [ebp-04], ecx
jne 0042BCA4
cmp dword ptr [ebp+08], esi
jne 0042BCA4
mov eax, dword ptr [ebp+14]
shl eax, 02
add ebx, dword ptr [eax+00498E08]
add esi, dword ptr [eax+00498E28]

0042BCA4:
cmp byte ptr [ebp+18], 00
jne 0042BD2F
mov ecx, dword ptr [0064DA18]
and dword ptr [ebp+18], 00000000
test ecx, ecx
jle 0042BCF9
mov [ebp+10], 00648038

0042BCC3:
mov eax, dword ptr [ebp+10]
mov eax, dword ptr [eax]
imul eax, 000000B0
cmp dword ptr [eax+00648428], 00000002
jne 0042BCED
mov edx, dword ptr [ebp+1C]
cmp dword ptr [eax+0064849C], edx		caster's # & ?
jne 0042BCED
mov edx, dword ptr [ebp-04]
cmp dword ptr [eax+006484C0], edx
je 0042BCF9

0042BCED:
inc [ebp+18]
add dword ptr [ebp+10], 00000004
cmp dword ptr [ebp+18], ecx
jl 0042BCC3

????????


=================================================

0042C0AB: Fireball - Init Stats
push ebp
mov ebp, esp
push ecx
push ebx
push esi
mov esi, dword ptr [ebp+0C]
mov ebx, edx
push edi
mov edi, dword ptr [ebp+08]
cmp ebx, esi
mov dword ptr [ebp-04], ecx
jne 0042C0E0
mov edx, dword ptr [ebp+10]
cmp edi, edx
jne 0042C0E0
mov eax, dword ptr [ebp+14]
shl eax, 02
add esi, dword ptr [eax+00498E08]
add edx, dword ptr [eax+00498E28]
mov dword ptr [ebp+0C], esi
mov dword ptr [ebp+10], edx

0042C0E0:
cmp byte ptr [ebp+18], 00
jne 0042C16C
push 0000000A
mov edi, ecx
pop edx					set edx to A (10)
mov cl, 3C					set cl to 3C (60)
imul edi, 000000B0			ecx x B0 (176)
call 00417C77				set_eax_to_Rnd[10]
mov cl, 3C					set cl to 3C (60)
mov esi, eax				set esi to [0..9]
push 0000000A
pop edx					set edx to A (10)
call 00417C77				set_eax_to_Rnd[10]
add esi, eax				r[10]+r[10]
mov eax, dword ptr [ebi+1C]		character number
imul eax, 000054D8			character record
movsx eax, byte ptr [eax+00687930]	clvl
add esi, eax				r[10]+r[10]+clvl
lea eax, dword ptr [esi+esi+04]	2x(r[10]+r[10]+clvl)+4
mov dword ptr [edi+006484A4], eax	set data for recursive
mov eax, dword ptr [edi+00648458]	slvl
test eax, eax				check if it's 0
jle 0042C14A				if so (or less), jump
mov esi, dword ptr [edi+006484A4]	damage

0042C136: Recursive for Spell Damage
mov ecx, esi				damage
mov edx, ecx				damage
sar edx, 03					edx = damage div 8
add edx, ecx				damage + damage div 8
dec eax					dec loop counter
mov esi, edx				set esi to damage
jne 0042C136				loop if loop counter>0
mov dword ptr [edi+006484A4], esi	damage

0042C14A:
mov eax, dword ptr [edi+00648458]	slvl
lea esi, dword ptr [eax+eax+10]	16 + 2 x slvl (speed)
cmp esi, 00000032				max of 50 (slvl 17)
jle 0042C15C
push 00000032
pop esi					speed

0042C15C:
mov ecx, dword ptr [ebp+1C]
push 0000000C
pop edx
call 00458D23
mov edi, dword ptr [ebp+08]
jmp 0042C16F

0042C16C:
push 00000010
pop esi

0042C16F:
push esi
mov esi, dword ptr [ebp-04]
push [ebp+10]
mov edx, ebx
mov ecx, esi
push [ebp+0C]
push edi
call 0042A469
mov edx, edi
mov ecx, ebx
push [ebp+10]
push [ebp+0C]
call 00429D69
mov edx, eax
mov ecx, esi
call 0042B64E
imul esi, 000000B0
push 00000008
mov edx, edi
mov dword ptr [esi+00648498], 00000100
mov dword ptr [esi+006484B8], ebx
mov dword ptr [esi+006484BC], edi
mov dword ptr [esi+006484C0], 00000000
mov dword ptr [esi+006484C4], ebx
mov ecx, ebx
mov dword ptr [esi+006484C8], edi
call 00426BF7
mov dword ptr [esi+006484B0], eax
pop edi
pop esi
pop ebx
leave
ret 001C

=================================================

0042C1E2: Lightning - Init Stats

[ebp+0C] = y
[ebp+10] = x
[ebp+14] = effect code number (<0 new casting?)
[ebp+18] = 
[ebp+1C] = player number

push ebp
mov ebp, esp
cmp dword ptr [ebp+20], 00000000
push ebx
push esi
push edi
mov edi, edx
mov ebx, ecx
jne 0042C203
cmp byte ptr [ebp+18], 00
jne 0042C203
mov ecx, dword ptr [ebp+1C]		ecx to player number
push 00000003
pop edx					edx to 3
call 00458D23

0042C203:
mov esi, ebx
mov eax, dword ptr [ebp+08]
imul esi, 000000B0			effect record
push 00000020
mov edx, edi
push [ebp+10]
mov dword ptr [esi+006484B8], edi		y
mov ecx, ebx
mov dword ptr [esi+006484BC], eax		x
push [ebp+0C]
push eax
call 0042A469
mov cl, 34
push 00000008
pop edx
call 00417C77				set_eax_to_Rnd[8]
inc eax					(1..8)
mov dword ptr [esi+00648484], eax		(1..8)
mov dword ptr [esi+00648498], 00000100	duration used for something else?
pop edi
pop esi
pop ebx
pop ebp
ret 001C

=================================================

0042C24E: Stone Curse - Init Stats

[ebp+0C] = y
[ebp+10] = x
[ebp+14] = effect code number (<0 new casting?)
[ebp+18] = 
[ebp+1C] = player number

0042C24E:
push ebp
mov ebp, esp
push esi
mov esi, ecx
imul esi, 000000B0
mov eax, dword ptr [ebp+0C]		y
push edi
mov edi, dword ptr [ebp+14]
mov dword ptr [esi+00648444], eax	y
mov eax, dword ptr [ebp+10]		x
test edi, edi
mov dword ptr [esi+00648448], eax	x
jl 0042C2AC					if edi<0, jump
mov eax, edi
imul eax, 000000B0
mov ecx, dword ptr [eax+00648434]	?
mov dword ptr [esi+00648434], ecx
mov ecx, dword ptr [eax+00648438]	?
mov dword ptr [esi+00648438], ecx
mov ecx, dword ptr [eax+0064844C]	eax.effect.relative.y
mov dword ptr [esi+0064844C], ecx	esi.effect.relative.y
mov ecx, dword ptr [eax+00648450]	eax.effect.relative.x
mov dword ptr [esi+00648450], ecx	esi.effect.relative.x

0042C2AC:
push 00000008
mov cl, 34					? unused ?
pop edx
call 00417C77				set eax to [0..7]
inc eax					[1..8]
test edi, edi
mov dword ptr [esi+00648484], eax	[1..8]
jl 0042C2F6					if edi<0, jump
cmp byte ptr [ebp+18], 01		?
je 0042C2E0
cmp dword ptr [ebp+1C], FFFFFFFF	player # & ?trap?
je 0042C2E0
mov eax, dword ptr [esi+00648458]	slvl
sar eax, 1					slvl div 2
add eax, 00000006				slvl div 2 + 6
mov dword ptr [esi+00648498], eax	duration
jmp 0042C300

0042C2E0:
test edi, edi
jl 0042C2F6						if edi<0, jump
cmp dword ptr [ebp+1C], FFFFFFFF
je 0042C2F6						trap, jump
mov dword ptr [esi+00648498], 0000000A	dur
jmp 0042C300

0042C2F6:
mov dword ptr [esi+00648498], 00000008	dur

0042C300:
mov edx, dword ptr [esi+00648430]		x
mov ecx, dword ptr [esi+0064842C]		y
push 00000004
call 00426BF7
mov dword ptr [esi+006484B0], eax
pop edi
pop esi
pop ebp
ret 001C

=================================================

0042C4EA: DYNAMIC CALL Town Portal - Init Stats

000938C0: Town Portal
Spell Effect Code:		0000000A
Init Stats:				0042C4EA
Update Spell Effect:		0042F621
Unknown Dword:			00000001
Unknown Bytes:			01 03 06 00
Unknown Dword:			00000081
Unknown Dword:			00000064

0042C4EA:
push ebp
mov ebp, esp
sub esp, 00000028
push ebx
push esi
xor eax, eax
mov esi, ecx
cmp byte ptr [005BC500], al		dlvl & town
push edi
mov dword ptr [ebp-10], esi
mov dword ptr [ebp-28], eax
mov [ebp-24], 00000003
mov [ebp-20], 0000000C
mov [ebp-1C], 0000002D
mov [ebp-18], 0000005E
mov [ebp-14], 0000009F
je 0042C60B				in town, jump
imul esi, 000000B0
mov edi, dword ptr [ebp+0C]
mov ebx, dword ptr [ebp+0C]
mov dword ptr [esi+0064845C], 00000001
mov dword ptr [ebp-04],eax

0042C545:
mov eax, dword ptr [ebp-04]
mov eax, dword ptr [ebp+4*eax-28]
movzx ecx, byte ptr [eax+004948D0]
test ecx, ecx
mov dword ptr [ebp-08], ecx
jle 0042C5FC
lea eax, dword ptr [eax+004948D2]
mov dword ptr [ebp-0C], eax

0042C567:
movsx edi, byte ptr [eax-01]
movsx eax, byte ptr [eax]
add edi, dword ptr [ebp+0C]
mov ebx, dword ptr [ebp+10]
add ebx, eax


........
0042C6FE:
pop edi
pop esi
pop ebx
leave ret 001C

=================================================

0042C705: Mana Shield - Init

[esp+08] = destination.y
[esp+0C] =
[esp+10] = destination.x
[esp+18] = 
[esp+1C] = caster (player number, -1 = shrine)

0042C705: Mana Shield - Init
push ebp
mov ebp, esp
cmp byte ptr [ebp+18], 00
push ebx
push esi
push edi
jne 0042C7AB
cmp dword ptr [ebp+1C], FFFFFFFF	caster & shrine
mov esi, ecx
je 0042C79A
mov eax, dword ptr [ebp+1C]
imul esi, 000000B0
imul eax, 000054D8
xor ebx, ebx				ebx = 0
cmp byte ptr [eax+00687930], bl	clvl & 0 ?
lea edi, dword ptr [eax+00687930]	clvl
mov dword ptr [esi+006484A4], ebx
jl 0042C75B					clvl < 0 ????

0042C742: Set 'spell damage' to Itt(clvl+1, Rnd[14h]+1)
push 00000014
mov cl, 37					37 = 54
pop edx					edx = 14h (20)
call 00417C77				set_eax_to_Rnd[14h]
inc eax					eax = [1..14h]
add dword ptr [esi+006484A4], eax	'spell damage'
inc ebx					inc ebx
movsx eax, byte ptr [edi]		clvl
cmp ebx, eax
jle 0042C742				loop clvl+1 times

0042C75B:
mov ecx, dword ptr [esi+00648458]	slvl
test ecx, ecx
jle 0042C779				slvl<=0, jump
lea eax, dword ptr [esi+006484A4]	'spell damage'

9942C76B:
mov edx, dword ptr [eax]		'spell damage'
mov edi, edx
sar edi, 03					'spell damage' div 8
add edi, edx
dec ecx
mov dword ptr [eax], edi		'spell damage'*9/8
jne 0042C76B				loop slvl times

0042C779:
mov ecx, dword ptr [esi+006484A4]	'spell damage'
lea eax, dword ptr [esi+006484A4]	addr('spell damage')
mov edx, ecx				'spell damage'
push 00000004
sar edx, 1					'spell damage' div 2
add edx, ecx				'spell damage'*1.5
mov ecx, dword ptr [ebp+1C]		caster
mov dword ptr [eax], edx		update spell damage
pop edx					edx = 4
call 00458D23				CALL cast spell
jmp 0042C7CB

0042C79A: Player # is -1 ? Cast by shrine ?
movzx eax, byte ptr [005BC500]	dlvl
imul esi, 000000B0
shr eax, 1					dlvl div 2
jmp 0042C7C5

0042C7AB: [ebp+18]<>00
mov eax, dword ptr [ebp+1C]		caster
mov esi, ecx
imul eax, 000000E4		monster record size
imul esi, 000000B0		spell effect record size
movsx eax, byte ptr [eax+0064E718]		mlvl
shl eax, 1					mlvl div 2

0042C7C5: Set spell damage to [mlvl|dlvl] div 2
mov dword ptr [esi+006484A4], eax

0042C7CB:
mov dword ptr [esi+00648498], 00000013	duration
pop edi
pop esi
pop ebx
pop ebp
ret 001C

=================================================

DYNAMIC ?CALL/JUMP? Chain Lightning - Init Stats

[esp+08] = destination.y
[esp+0C] =
[esp+10] = destination.x
[esp+1C] = player number

0042CBC3: Chain Lightning - Init Stats
imul ecx, 000000B0			spell for casting record size
mov eax, dword ptr [esp+08]			y
push 0000000E
mov dword ptr [ecx+006484B8], eax		y
mov eax, dword ptr [esp+10]			x
mov dword ptr [ecx+006484BC], eax		x
mov dword ptr [ebx+00648498], 00000001	dur of 1
mov ecx, dword ptr [esp+1C]			? set ecx to player #
pop edx						set edx to E
				the spell code for chain lightning
call 00458D23
ret 001C

=================================================

0042D32D: Etherialize - Init Code
mov eax, ecx
imul edx, 000054D8
imul eax, 000000B0
movsx ecx, byte ptr [edx+00687930]	clvl
shl ecx, 04					clvl x 16
sar ecx, 1					clvlx16/2
mov dword ptr [eax+00648498], ecx	spell duration
mov ecx, dword ptr [eax+00648458]	slvl
push esi
push edi
test ecx, ecx
jle 0042D373				if slvl=0, jump

0042D35D:
mov esi, dword ptr [eax+00648498]	duration
mov edi, esi
sar edi, 03
add edi, esi				duration*9/8
dec ecx					dec counter
mov dword ptr [eax+00648498], edi	duration
jne 0042D35D

0042D373:
mov esi, dword ptr [eax+00648498]	duration
mov edi, dword ptr [edx+0068CBD4]	spell duration bonus
lea ecx, dword ptr [eax+00648498]	duration
imul edi, esi
sar edi, 07					duration*bonus/128
add edi, esi				dur+dur*bonus/128
cmp byte ptr [esp+1C], 00		?
mov dword ptr [ecx], edi		duration
mov ecx, dword ptr [edx+00687910]	mod. cur. life
mov dword ptr [eax+006484B8], ecx	store life
mov ecx, dword ptr [edx+00687908]	base cur. life
mov dword ptr [eax+006484BC], ecx	store life
jne 0042D3BA				?
mov ecx, dword ptr [esp+20]		?
push 00000019				spell # 19 = etherialize
pop edx					?
call 00458D23				local character casts from something.

0042D3BA:
pop edi
pop esi
ret 001C

=================================================

[esp+1C] = caster's player number

0042D85E: Infravision - Init
imul ecx, 000000B0
push esi
mov dword ptr [ebx+00648498], 00000630	duration
mov eax, dword ptr [ecx+00648458]		slvl
test eax, eax
jle 0042D891
mov edx, eax

0042D87B: Recursive function
mov eax, dword ptr [ecx+00648498]
mov esi, eax
sar esi, 03
add esi, eax
dec edx
mov dword ptr [ecx+00648498], esi
jne 0042D87B

0042D891:
mov edx, dword ptr [esp+1C]		caster's #
lea eax, dword ptr [ecx+00648498]	duration
imul edx, 000054D8			caster's rec
mov ecx, dword ptr [eax]		spell duration
mov edx, dword ptr [edx+0068CBD4]	duration bonus
imul edx, ecx
sar edx, 07					div 80h (128)
add edx, ecx				add bonus
cmp byte ptr [esp+18], 00
mov dword ptr [eax], edx		set duration
jne 0042D8C6
mov ecx, dword ptr [esp+1C]
push 00000009				? spell number 9 = infravision
pop edx
call 00458D23				? pay cost to cast spell if local player is player # ecx.

0042D8C6:
pop esi
ret 001C

=================================================

0042E1AB: CALL establish spell record (init effect)

????????	????????
edx		caster x
ecx		caster y
[ebp+24]	slvl
[ebp+20]	1
[ebp+1C]	?	player #
[ebp+18]	0
[ebp+14]	spell effect
[ebp+10]	direction (facing)
[ebp+0C]	target x
[ebp+08]	target y
????????	????????

0042E1AB:
push ebp
mov ebp, esp
push ecx
push ecx
mov eax, dword ptr [0064DA18]		Number of active effects (Max of 7D)
push ebx
push esi
cmp eax, 0000007D
push edi
mov dword ptr [ebp-04], edx
mov dword ptr [ebp-08], ecx
jge 0042E21C
mov edi, dword ptr [ebp+14]		spell effect
mov edx, dword ptr [ebp+1C]		?
cmp edi, 0000000D				?? spell effect & mana shield
jne 0042E224
mov ecx, edx
imul ecx, 000054D8
cmp byte ptr [ecx+0068CBF4], 01	
jne 0042E224
movzx esi, byte ptr [005BC500]
cmp esi, dword ptr [ecx+006877AC]	dlvl
jne 0042E21C
xor ebx, ebx
test eax, eax
jle 0042E224
mov esi, 00648038

0042E1F9:
mov ecx, dword ptr [esi]
imul ecx, 000000B0
cmp dword ptr [ecx+00648428], 0000000D	effect # & mana shield
jne 0042E212
cmp dword ptr [ecx+0064849C], edx		caster's # & ?
je 0042E21C

0042E212:
inc ebx
add esi, 00000004
cmp ebx, eax
jl 0042E1F9
jmp 0042E224

0042E21C:
or eax, FFFFFFFF
jmp 0042E375

0042E224:
mov ebx, dword ptr [00648230]		spell to cast rec #
mov ecx, eax
shl ecx, 02
mov esi, 00648420
sub esi, ecx
inc eax
mov dword ptr [0064DA18], eax
mov dword ptr [ecx+00648038], ebx	spell to cast rec #
mov esi, dword ptr [esi]
mov dword ptr [00648230], esi
mov esi, ebx				spell to cast rec #
imul esi, 000000B0			spell to cast rec.
movsx eax, byte ptr [ebp+18]		?not cast by char?
mov dword ptr [esi+00648428], edi
imul edi, 0000001C			?spell stats?
mov cl, byte ptr [edi+004959BA]
mov dword ptr [esi+006484A0], eax	booln-not cast by char
lea eax, dword ptr [esi+00648460]
mov dword ptr [esi+0064849C], edx	caster's number
mov edx, dword ptr [ebp+10]
mov byte ptr [eax], cl
mov ecx, dword ptr [edi+004959B4]
mov dword ptr [esi+00648488], ecx
mov ecx, dword ptr [ebp+24]		slvl
mov dword ptr [esi+00648458], ecx	slvl
mov dword ptr [esi+00648454], edx	? direction ?
mov al, byte ptr [eax]
cmp al, FF
je 0042E2AF
movzx eax, al
imul eax, 000000EC
cmp byte ptr [eax+00496119], 08
jnb 0042E2B1

0042E2AF:
xor edx, edx

0042E2B1:
mov ecx, ebx
call 0042B64E
mov edx, dword ptr [ebp-08]		y
mov ecx, dword ptr [ebp-04]		x
mov dword ptr [esi+0064842C], edx	y
xor eax, eax				set eax to 0
mov dword ptr [esi+00648430], ecx
mov dword ptr [esi+00648434], eax
mov dword ptr [esi+00648438], eax
mov dword ptr [esi+00648444], edx
mov edx, dword ptr [ebp+20]
mov dword ptr [esi+00648448], ecx
mov dword ptr [esi+0064844C], eax
mov dword ptr [esi+00648450], eax
mov dword ptr [esi+0064845C], eax
mov dword ptr [esi+00648480], 00000001
mov dword ptr [esi+0064848C], eax
mov dword ptr [esi+00648490], eax
mov dword ptr [esi+00648494], eax
mov dword ptr [esi+006484A4], edx		spell damage
mov dword ptr [esi+006484A8], eax
mov dword ptr [esi+006484AC], eax
or dword ptr [esi+006484B4], eax
mov eax, dword ptr [edi+004959BC]
cmp eax, FFFFFFFF
je 0042E355
push dword ptr [esi+00648430]			x
mov edx, dword ptr [esi+0064842C]		y
mov ecx, eax
call 004163F8
mov ecx, dword ptr [ebp-04]

0042E355:
push [ebp+20]
mov edx, dword ptr [ebp-08]
push [ebp+1C]				? player #
push [ebp+18]
push [ebp+10]				? direction
push [ebp+0C]				? target x
push [ebp+08]				? target y
push ecx					?
mov ecx, ebx
call dword ptr [edi+004959AC]		init spell
mov eax, ebx

0042E375:
pop edi
pop esi
pop ebx
leave
ret 0020

=================================================

0042E98E: Firebolt - Update Spell Effect

=================================================

0042EF86..0042F396: Fireball - Update Spell Effect (0411 bytes)

=================================================

0042F397..0042F59A: Lightning - Update Effects (0204 bytes)
push ecx
push ebx
push ebp
mov ebx, ecx
push esi
mov esi, ebx
push edi
imul esi, 000000B0
mov dword ptr [esp+10], ebx
dec dword ptr [esi+00648498]	spell duration
mov eax, dword ptr [esi+0064849C]
cmp eax, FFFFFFFF
je 0042F41D
cmp dword ptr [esi+006484A0], 00000000	monster slot & character or trap
jne 0042F3ED
imul eax, 000054D8
mov cl, 4F
movsx edx, byte ptr [eax+00687930]		clvl
call 00417C77					0..clvl-1
mov cl, 4F
mov edi, eax					0..clvl-1
push 00000002
pop edx
call 00417C77					0..1
lea edi, dword ptr [edi+eax+02]		1..clvl+1..2
shl edi, 06						damage
jmp 0042F435

0042F3ED: Cast by a monster
imul eax, 000000E4
mov cl, 50
movzx edx, byte ptr [eax+0064E71E]	monster max dam.
lea ebp, dword ptr [eax+0064E71D]	mon. min damage
movzx eax, byte ptr [eax+0064E71D]	mon. min damage
sub edx, eax
inc edx
call 00417C77				random
mov edi, eax				damage-min.
movzx eax, byte ptr [ebp+00]		? min spell damage
add edi, eax				damage
shl edi, 1					x2
jmp 0042F435

0042F41D:
movzx edx, byte ptr [005BC500]	? dlvl
mov cl, 51
call 00417C77				set_eax_to_Rnd[edx]
movzx ecx, byte ptr [005BC500]
lea edi, dword ptr [eax+2*ecx]	2xdlvl+rnd[dlvl]

0042F435:
mov eax, dword ptr [esi+0064843C]	y-speed
mov ecx, ebx
add dword ptr [esi+0064844C], eax	Effect.relative.Y
mov eax, dword ptr [esi+00648440]	x-speed
add dword ptr [esi+00648450], eax	Effect.relative.X
call 0042A592
mov ebp, dword ptr [esi+0064842C]	?caster.y
mov ebx, dword ptr [esi+00648430]	?caster.x
mov eax, ebp
imul eax, 00000070
add eax, ebx				?y*70h+x
cmp dword ptr [esi+0064849C], FFFFFFFF	caster & trap
mov eax, dword ptr [4*eax+005A6ED8]
jne 0042F487				not a trap, jump
cmp ebp, dword ptr [esi+00648444]
jne 0042F487
cmp ebx, dword ptr [esi+00648448]
je 0042F497

0042F487:
cmp byte ptr [eax+005CFE30], 00
je 0042F4A4
and dword ptr [esi+00648498], 00000000

0042F497:
cmp byte ptr [eax+005CFE30], 00
jne 0042F570

0042F4A4: ? See if effect reached destination
cmp ebp, dword ptr [esi+006484B8]
jne 0042F4B8
cmp ebx, dword ptr [esi+006484BC]
je 0042F570

0042F4B8:
test ebp, ebp
jle 0042F570
test ebx, ebx
jle 0042F570
cmp ebp, 00000070
jnl 0042F570
cmp ebx, 00000070
jnl 0042F570
mov eax, dword ptr [esi+0064849C]
cmp eax, FFFFFFFF
je 0042F525
cmp dword ptr [esi+006484A0], 00000001
jne 0042F51B
mov ecx, eax
imul ecx, 000000E4
mov ecx, dword ptr [ecx+0064E734]
mov cl, byte ptr [ecx]
cmp cl, 4C
jb 0042F51B
cmp cl, 4F
ja 0042F51B
push dword ptr [esi+00648458]		slvl
push edi
push eax
mov al, byte ptr [esi+006484A0]
push eax
push 00000017
jmp 0042F537

0042F51B: ? cast by a character ?
push dword ptr [esi+00648458]		slvl
push edi
push eax
jmp 0042F52E

0042F525: ? cast by a trap
push dword ptr [esi+00648458]
push edi
push FFFFFFFF

0042F52E:
mov al, byte ptr [esi+006484A0]
push eax					?cast by a char?
push 00000008				8
	8 = The spell effect of a lightning segment
0042F537:
push [esp+24]				?
mov edx, dword ptr [esi+00648430]	? caster.x
mov ecx, dword ptr [esi+0064842C]	? caster.y
push dword ptr [esi+00648448]		? related to x
push dword ptr [esi+00648444]		? related to y
call 0042E1AB
mov eax, dword ptr [esi+0064842C]
mov dword ptr [esi+006484B8], eax
mov eax, dword ptr [esi+00648430]
mov dword ptr [esi+006484BC], eax

0042F570:
cmp dword ptr [esi+00648498], 00000000	duration
je 0042F58B
test ebp, ebp
jle 0042F58B
test ebx, ebx
jle 0042F58B
cmp ebp, 00000070
jge 0042F58B
cmp ebx, 00000070
jle 0042F595

0042F58B:
mov dword ptr [esi+0064845C], 00000001

0042F595:
pop edi
pop esi
pop ebp
pop ebx
pop ecx
ret

------------------------------------------------

0042F59B: Stone Curse - Update Spell Effect
push ebx
push esi
push edi
mov edi, ecx
mov esi, edi
imul esi, 000000B0
dec dword ptr [esi+00648498]		dec duration
mov eax, dword ptr [esi+0064842C]	effect.absolute.y
cmp eax, dword ptr [esi+00648444]	? target.y
mov ebx, dword ptr [esi+00648498]	duration
jne 0042F5D0				y <> y, jump
mov ecx, dword ptr [esi+00648430]	effect.absolute.x
cmp ecx, dword ptr [esi+00648448]	? target.x
je 0042F5E9					x = x, jump

0042F5D0: x,y <> x,y
mov edx, dword ptr [esi+006484A4]	spell damage?
push 00000000
push dword ptr [esi+00648430]		x
mov ecx, edi				ecx
push eax					y
push 00000001				1
push edx					damage?
call 0042B2C9

0042F5E9:						hit?
cmp dword ptr [esi+006484A8], 00000001	Boolean to terminate effect
jne 0042F5F8
mov dword ptr [esi+00648498], ebx		spell duration 

0042F5F8:
cmp dword ptr [esi+00648498], 00000000
jne 0042F616
mov dword ptr [esi+0064845C], 00000001	stop effect
mov ecx, dword ptr [esi+006484B0]
call 00426C66

0042F616:
mov ecx, edi
call 0042A522
pop edi
pop esi
pop ebx
ret

=================================================

0042F7CC: Mana Shield - Update Spell Effect
push ebx
push esi
push edi
mov edx, ecx
mov esi, edi
push 00000001
imul esi, 000000B0
pop ebx
cmp dword ptr [esi+006484A0], 00000000	? cast by char
jne 0042F7FC					no, jump
mov eax, dword ptr [esi+0064849C]		caster's #
cmp eax, FFFFFFFF					? trap
je 0042F7FC						trap, jump
imul eax, 000054D8
mov byte ptr [eax+006878B5], bl	set mana shield

0042F7FC:
dec dword ptr [esi+00648498]			dec duration
mov eax, dword ptr [esi+0064842C]		y
mov ebx, dword ptr [esi+006484A4]		'damage'
push ebx						'damage'
push dword ptr [esi+00648430]			x
dec eax						y-1
mov ecx, edi
push eax
push ebx
push edx
call 0042B2C9
mov edx, dword ptr [esi+006484A4]		'damage'
mov ecx, edi
push ebx
push dword ptr [esi+00648430]			x
push dword ptr [esi+0064842C]			y
push ebx
push edx
call 0042B2C9
mov eax, dword ptr [esi+0064842C]		y
mov edx, dword ptr [esi+006484A4]		'damage'
push ebx
inc eax						y+1
push dword ptr [esi+00648430]			x
mov ecx, edi
push eax
push ebx
push edx
call 0042B2C9

=================================================

Mana shield resolution code

........
0042FAB8:
mov eax, dword ptr [esi+00687910]	mod cur life
mov ecx, dword ptr [edi+006484B8]	spell data
push 00000001
cmp eax, ecx
pop ebx
jnl 0042FBA3	If mod cur life is not less, jump
mov edx, ecx	set edx to life stored in spell data
sub edx, eax	sub mod cur life (damage taken)
cmp dword ptr [edi+00648458], 00000000	slvl
mov dword ptr [ebp-0C], edx		damage taken
jle 0042FAEF	if slvl<=0, skip
mov eax, edx				damage taken
push FFFFFFFD				-3
cdq
pop ebx
idiv ebx					damage taken/-3
mov edx, dwodr ptr [ebp-0C]		damage taken
push 00000001
pop ebx					1
add edx, eax				damage - (1/3 damage)

0042FAEF:
test edx, edx
jge 0042FAF5
xor edx, edx				minimum of 0

0042FAF5:
mov eax, dword ptr [esi+00687924]	mod cur mana
mov dword ptr [004B9A64], ebx		set to true
cmp eax, edx			mod cur mana & damage
mov dword ptr [004B9798], ebx		set to true
jl 0042FB2B				mod cur mana<damage, jump
mov eax, dword ptr [edi+006484BC]	stored base cur life
mov dword ptr [esi+00687910], ecx	set mod cur to stored
mov dword ptr [esi+00687908], eax	set base cur to stored
sub dword ptr [esi+00687924], edx	sub damage from mod cur mana
sub dword ptr [esi+0068791C], edx	sub damage from base cur mana
jmp 0042FBA3

0042FB2B:	NOT ENOUGH MANA
sub ecx, edx	stored mod cur life - damage taken
add ecx, eax	stored mod cur - (damage-mana)
mov eax, dword ptr [edi+006484BC]	stored max cur life
sub eax, edx				stored - damage
mod dword ptr [esi+00687910], ecx	set mod cur to reduced value
add eax, dword ptr [esi+00687924]	stored - (damage-mana)
mov dword ptr [esi+00687908], eax	set base cur to reduced value
xor eax, eax
mov dword ptr [esi+00687924], eax
mov ecx, dword ptr [esi+00687920]
sub ecx, dword ptr [esi+00687928]
mov dword ptr [edi+00648498], eax	set dur to 0
mov dword ptr [edi+0064845C], ebx	set end to true
mov dword ptr [esi+0068791C], ecx
cmp dword ptr [esi+00687910], eax
jge 0042FB81				life>=0, skip
mov ecx, dword ptr [ebp-04]
xor edx, edx
call 004520AC

0042FB81:
........

=================================================

0042FC1A: Etherialize - Update Code
push ebx
mov ebx, ecx
push esi
mov esi, ebx
imul esi, 000000B0
push edi
dec dword ptr [esi+00648498]	duration
mov edi, dword ptr [esi+0064849C]	Caster's number
imul edi, 000054D8
mov eax, dword ptr [edi+006877B0]	position.y
mov edx, dword ptr [edi+006877D8]	?
mov ecx, dword ptr [edi+006877B4]	position.x
mov dword ptr [esi+0064842C], eax	effect.absolute.y
shl edx, 10
mov dword ptr [esi+00648430], ecx	effect.absolute.x
mov dword ptr [esi+0064844C], edx	?effect.relative.y?
mov edx, dword ptr [edi+006877DC]	?
shl edx, 10					?
cmp dword ptr [edi+00687778], 00000003	action
mov dword ptr [esi+00648450], edx	?
jne 0042FC92
mov eax, dword ptr [edi+006877B8]	
mov dword ptr [esi+00648444], eax	target.y = char.targey.y
mov eax, dword ptr [edi+006877BC]	
mov dword ptr [esi+00648448], eax	target.x = char.targey.x
jmp 0042FC9E

0042FC92:
mov dword ptr [esi+00648444], eax	target.y = char.pos.y
mov dword ptr [esi+00648448], ecx	target.x = char.pos.x

0042FC9E:
mov ecx, ebx
call 0042A592
cmp dword ptr [edi+00687778], 00000003	?
jne 0042FCC5
cmp dword ptr [edi+006877E8], 00000002	?
jne 0042FCBF
inc dword ptr [esi+0064842C]			effect.absolute.y
jmp 0042FCC5

0042FCBF:
inc dword ptr [esi+00648430]			effect.absolute.x???

0042FCC5:
push 00000001
pop ecx						set ecx to ON
or byte ptr [edi+00687898], cl		turn ON etheralize immunity
cmp dword ptr [esi+00648498], 00000000	spell duration (1/20ths of a second)
mov al, byte ptr [edi+00687898]		1 - etheralize immunity
je 0042FCE6						if duration=0, jump to disable
cmp dword ptr [edi+00687910], 00000000	modified current Life
jg 0042FCF4						if life>0, skip disable code.

0042FCE6:
and al, FE						turn off 1 bit (OFF)
mov dword ptr [esi+0064845C], ecx		boolean; 1 = stop effect
mov byte ptr [edi+00687898], al		1 - etheralize immunity

0042FCF4:
mov ecx, ebx
call 0042A522
pop edi
pop esi
pop ebx
ret

=================================================

004300D3: Chain Lightning - Update Effects

When Chain Lightning updates, it creates the various lightning spells.

	Note: [ebp-64] through [ebp-20] is an array of 12h (18) dwords which are used to determine range, where [ebp-64] is range 1 and [ebp-20] is range 12.  They point to a location in an array at 004948D0.

004948D0 + 00	Byte	Number of Objects at range 00
004948D0 + 01,02	Word	Object.1.Y, Object.1.X
004948D0 + 03	Byte	Number of Objects at range 01
004948D0 + 04,05	Word	Object.1.Y, Object.1.X
004948D0 + 06,07	Word	Object.2.Y, Object.2.X
004948D0 + 08,09	Word	Object.3.Y, Object.3.X
004948D0 + 0A,0B	Word	Object.4.Y, Object.4.X
004948D0 + 0C	Byte	Number of Objects at range 02
004948D0 + 0D,0E	Word	Object.1.Y, Object.1.X
004948D0 + 0F,10	Word	Object.2.Y, Object.2.X
.... etc. ....

  4-4-4-4-4-4-4
4-4 3-3-3-3-3 4-4
4 3-3 2-2-2 3-3 4
4 3 2-2 1 2-2 3 4
4 3 2 1 0 1 2 3 4
4 3 2-2 1 2-2 3 4
4 3-3 2-2-2 3-3 4
4-4 3-3-3-3-3 4-4
  4-4-4-4-4-4-4

004300D3:
push ebp
mov ebp, esp
sub esp, 00000068
push ebx
push esi
mov esi, ecx
push edi
imul esi, 000000B0
push 00000003
and dword ptr [ebp-68], 00000000
mov ebx, dword ptr [esi+0064849C]	caster's #
mov ecx, dword ptr [esi+0064842C]	? caster.y
mov edx, dword ptr [esi+00648430]	? caster.x
pop edi
push dword ptr [esi+006484BC]		? cursor.x
mov dword ptr [ebp-64], edi		range.01
mov [ebp-60], 0000000C			range.02
mov [ebp-5C], 0000002D			range.03
push dword ptr [esi+006484B8]		? cursor.y
mov [ebp-58], 0000005E			range.04
mov [ebp-54], 0000009F			range.05
mov [ebp-50], 000000F0			range.06
mov [ebp-4C], 00000151			range.07
mov [ebp-48], 000001C2			range.08
mov [ebp-44], 00000243			range.09
mov [ebp-40], 000002D4			range.0A
mov [ebp-3C], 00000375			range.0B
mov [ebp-38], 00000426			range.0C
mov [ebp-34], 000004E7			range.0D
mov [ebp-30], 000005B8			range.0E
mov [ebp-2C], 00000699			range.0F
mov [ebp-28], 0000078A			range.10
mov [ebp-24], 0000088B			range.11
mov [ebp-20], 0000099C			range.12
mov dword ptr [ebp-1C], ebx		caster's #
mov dword ptr [ebp-08], ecx		? caster.y
mov dword ptr [ebp-04], edx		? caster.x
call 00417BD7
push dword ptr [esi+00648458]
mov edx, dword ptr [ebp-04]		? caster.x
mov ecx, dword ptr [ebp-08]		? caster.y
push 00000001				1
push ebx					?
push 00000000				0
push 00000007				Spell Effect: Lightning
	hex addr.:2F5A3
	spell targeting cursor
push eax					?
push dword ptr [esi+006484BC]		x
push dword ptr [esi+006484B8]		y
call 0042E1AB
mov eax, dword ptr [esi+00648458]	slvl
add eax, edi				slvl+3 (range+1)
cmp eax, 00000013				max of 13h (19)
jle 004301C6
push 00000013				if range+1>13h, set to 13h
pop eax

004301C6:
cmp eax, 00000001
jle 0043026B
lea ecx, dword ptr [ebp-64]		pointer to range.1
dec eax					set range to slvl+2
mov dword ptr [ebp-0C], ecx		pointer to range.1 (advanced in loop)
mov dword ptr [ebp-18], eax		range

004301D9: LOOP_THROUGH_RANGE
mov eax, dword ptr [ebp-0C]		pointer to current range
mov eax, dword ptr [eax]		value of current range
movzx ecx, byte ptr [eax+004948D0]	?# of monsters at current range
test ecx, ecx
jle 0043025E				no monsters, jump
lea eax, dword ptr [eax+004948D2]	?pointer to monster x,y at current range
mov dword ptr [ebp-14], ecx		loop counter
mov dword ptr [ebp-10], eax		?pointer to monster.1 y,x at current range

004301F5: LOOP_THROUGH_MONSTERS_AT_RANGE
movsx edi, byte ptr [eax-01]		? monster.y
movsx ecx, byte ptr [eax]		? monster.x
add edi, dword ptr [ebp-08]		? caster.y
mov ebx, dword ptr [ebp-04]		? caster.x
add ebx, ecx

Note: Monster y,x is relative to caster, so adding the stats
gives the monster's map coordinates.

test edi, edi
jle 00430254				if edi<=0, next
cmp edi, 00000070
jge 00430254				if edi>=70, next
test ebx, ebx
jle 00430254				if ebx<=0, next
cmp ebx, 00000070
jge 00430254				if ebx>=70, next
mov ecx, edi
imul ecx, 00000070
add ecx, ebx				edi*70+ebx (2-d array)
cmp dword ptr [4*ecx+0052E508], 00000000
jle 00430254				is <=0, next

Note: I'm not sure what the 2-D array checks.  Since it's looking at map coordinates, perhaps it is checking for non-monster items.  What I refer to here as 'monster' might also include things that occupy squares (e.g. chests, spires, etc.).

mov edx, dword ptr [ebp-04]		? caster.x
mov ecx, dword ptr [ebp-08]		? caster.y
push ebx					? target.x
push edi					? target.y
call 00417BD7				Set_eax_to_direction
push dword ptr [esi+00648458]		slvl
mov edx, dword ptr [ebp-04]		? caster.x
mov ecx, dword ptr [ebp-08]		? caster.y
push 00000001				1
push [ebp-1C]				caster's #
push 00000000				0
push 00000007				Spell Effect: Lightning
	hex addr.:2F648
	spell targets monster within range
push eax					direction (facing)
push ebx					? target.x
push edi					? target.y
call 0042E1AB
mov eax, dword ptr [ebp-10]

00430254:
inc eax
inc eax
dec [ebp-14]				loop counter
mov dword ptr [ebp-10], eax		move pointer to next y,x
jne 004301F5				counter<>0, loop

0043025E:
add dword ptr [ebp-0C], 00000004	advance to next range
dec [ebp-18]				dec range counter
jne 004301D9				loop

0043026B:
dec dword ptr [esi+00648498]		dec duration
jne 0043027D
mov dword ptr [esi+0064845C], 00000001	terminate spell

Note: Chain Lightning inits with a duration of 1, so it always terminates after setting up it's component spells.

0043027D:
pop edi
pop esi
pop ebx
leave
ret

=================================================

00430C3F: Infravision - Update Spell Effect
imul ecx, 000000B0
dec dword ptr [ecx+00648498]		dec duration
push esi
lea eax, dword ptr [ecx+00648498]	duration
lea esi, dword ptr [ecx+0064849C]	caster/trap index
push edi
push 00000001
mov edi, dword ptr [esi]		caster/trap index
mov eax, dword ptr [eax]		duration
imul edi, 000054D8
pop edx					1
test eax, eax				duration
mov dword ptr [edi+00687948], edx	turn infravision on
jne 00430C7D				duration<>0, jump
mov dword ptr [ecx+0064845C], edx	stop effect
mov ecx, dword ptr [esi]		caster/trap index
call 0041FCFE				Create_Character_Stats
	to turn off infravision if charcter doesn't have infravision item.

00430C7D:
pop edi
pop esi
ret

=================================================

00431C62: CALL UPDATE EFFECT RECORD #[EBX]

Called from 0040ACED, 0040AD0D

00431C62:
push ebx
push esi
mov esi, dword ptr [0064DA18]		Number of active effects
push edi
test esi, esi				# of actives & 0
jle 00431CA5
mov ecx, 00648038				active effects array
mov edx, esi				# of actives counter

00431C76:					LOOP1
mov eax, dword ptr [ecx]		effect type
add ecx, 00000004				next in array
imul eax, 000000B0			effect record offset
mov edi, dword ptr [eax+0064842C]	effect.absolute.y
mov eax, dword ptr [eax+00648430]	effect.absolute.x
imul edi, 00000070			e.a.y*70h
and byte ptr [eax+edi+005C7C28], FE
and byte ptr [eax+edi+005D0670], 00
add eax, edi
dec edx					dec counter
jne 00431C76				counter<>0, LOOP1

00431CA5:
xor edx, edx				init loop2 counter
test esi, esi				# of actives
jle 00431CD7				#<=0, jump

00431CAB:
mov ecx, dword ptr [4*edx+00648038]	effect record #
mov eax, ecx
imul eax					effect record offset
cmp dword ptr [eax+0064845C], 00000000	boolean, stop effect
je 00431CD2
call 0042A3F9
	CALL DELETE EFFECT RECORD AT INDEX EDX, EFFECT RECORD #ECX
mov esi, dword ptr [0064DA18]		Number of active effects
xor edx, edx	??? start at beginning again ???
jmp 00431CD3

00431CD2:
inc edx

00431CD3:
cmp edx, esi
jl 00431CAB

00431CD7:
and dword ptr [0064DFFC], 00000000
and dword ptr [0064DA1C], 00000000
xor edi, edi
test esi, esi
jle 00431D80
mov ebx, 00648038

00431CF4:
mov ecx, dword ptr [ebx]
mov esi, ecx				effect record #
imul esi, 000000B0			effect offset
mov eax, dword ptr [esi+00648428]	effect #
imul eax, 0000001C			effect data offset
call dword ptr [eax+004959B0]		Update effect
test byte ptr [esi+00648464], 02	?
jne 00431D6E
inc dword ptr [esi+0064847C]		?
mov ecx, dword ptr [esi+0064847C]	?
cmp ecx, dword ptr [esi+0064846C]	?
lea eax, dword ptr [esi+0064847C]	?
jl 00431D6E					[7C]<[6C], jump
and dword ptr [eax], 00000000		clear [7C]
mov eax, dword ptr [esi+00648480]	?
and dword ptr [esi+00648484], eax
mov ecx, dword ptr [esi+00648484]
cmp ecx, dword ptr [esi+00648470]
lea eax, dword ptr [esi+00648470]
jle 00431D5D
mov dword ptr [esi+00648484], 00000001

00431D5D:
cmp dword ptr [esi+00648484], 00000001
jge 00431D6E
mov eax, dword ptr [eax]
mov dword ptr [esi+00648484], eax

00431D6E:
mov esi, dword ptr [0064DA18]
inc edi					inc counted
add ebx, 00000004				inc array
cmp edi, esi				current & max
jl 00431CF4					cur<max,
			loop to UPDATE EFFECT RECORD #[EBX]

00431D80:
........

00431DEC:
pop edi
pop esi
pop ebx
ret

=================================================

load monster animation files

		guesses
n	110	neutral
w	119	walking
a	97	attacking
h	104	hit recovery
d	100	death
s	115	second animation

........

004323E8:
mov ecx, dword ptr [ebp-08]
mov cl, byte ptr [ecx+0049EED8]	"nwahds"
cmp cl, 73					"s"
jne 0043234D
cmp dword ptr [ebx+00498E7C], 00000000	second attack animation check
je 004323CA

0043234D:
cmp dword ptr [eax], 00000000
jle 004323CA
movsx eax, cl				?%c
push eax
lea eax, dword ptr [ebp+FFFFFEE4]	? -11C
push dword ptr [ebp+00498E78]		pointer to animation file name
	e.g. Monsters\Unrav\Unrav%c.CL2
push eax
call 0046B440
add esp, 0000000C


=================================================

........
00435B52:
........
monster coords pushed & player coord in edx, ecx

call 00417BD7		CALL Set_eax_to_direction
........
call 0044DEF3

=================================================

........

00435B8B: BEGIN Black Death Code
mov eax, dword ptr [ebx+0064E734]
cmp byte ptr [eax], 03
	monster's base monster number & black death
jne 00435C5C
mov eax, dword ptr [ebp-04]		player
cmp eax, dword ptr [00687774]		local player
jne 00435C5C
mov eax, dword ptr [0064DA18]		# of active effects
or edi, FFFFFFFF				-1
test eax, eax
mov dword ptr [ebp+08], edi		-1
jle 00435BF0				# actives<=0
mov edx, 00648038
		dword array of effect record numbers
mov dword ptr [ebp-08], eax		counter

00435BC0:
mov ecx, dword ptr [edx]	active effect record number
mov eax, ecx
imul eax, 000000B0
cmp dword ptr [eax+00648428], 0000000D	mana shield
jne 00435BE8					no, next
mov edi, dword ptr [ebp-04]			player
cmp dword ptr [eax+0064849C], edi		caster's number
jne 00435BE5					not player's SM, skip
mov edi, ecx		active mana shield effect record number
mov dword ptr [ebp+08], edi
				active mana shield effect record number
jmp 00435BE8

00435BE5:
mov edi, dword ptr [ebp+08]		restore edi

00435BE8:
add edx, 00000004					next
dec [ebp-08]					counter
jne 00435BC0					loop

00435BF0:
mov eax, dword ptr [esi+00687914]	mod. max life
lea ecx, dword ptr [esi+00687914]	mod. max life
cmp eax, 00000040				40h = 1 stat
jle 00435C5C				mod. max life<=1, jmp
cmp dword ptr [esi+0068790C], 00000040 - base max life
jle 00435C5C				base max<=1, jump
add eax, FFFFFFC0				set eax to mod max-1
mov dword ptr [ecx], eax		-1 from mod max
cmp dword ptr [esi+00687910], eax	mod cur life & mod max life
jle 00435C2F
test edi, edi				mana shield record #
mov dword ptr [esi+00687910], eax	drop mod cur life to max
jl 00435C2F					no mana shield
mov ecx, edi
imul ecx, 000000B0
mov dword ptr [ecx+006484B8], eax	set new life value for mana shield

00435C2F:
add dword ptr [esi+0068790C], FFFFFFC0	-1 to base max life
mov eax, dword ptr [esi+0068790C]	base max life
cmp dword ptr [esi+00687908], eax	current & max
lea ecx, dword ptr [esi+00687908]	base current life
jle 00435C5C				current<=max, jump
test edi, edi
mov dword ptr [ecx], eax		set current to max
jl 00435C5C					?
imul edi, 000000B0			B0h (176)
mov dword ptr [edi+006486BC], eax	set new life value for mana shield

END Black Death code

00435C5C:
mov edx, dword ptr [ebp+10]
mov cl, 63					63h = 99
sub edx, dword ptr [ebp+0C]
inc edx
shl edx, 06
call 00417C77
mov edi, eax
mov eax, dword ptr [ebp+0C]
shl eax, 06
add edi, eax				add [ebp+0C] to damage
mov eax, dword ptr [esi+0068CBCC]	+/- dfe
shl eax, 06
add edi, eax				add dfe to damage
cmp edi, 00000040
jge 00435C8A				if damage>=1, jump
push 00000040
pop edi					set damage to 1

00435C8A:
........

=================================================

........
004369D7:
inc dword ptr [esi+0064E6C8]
mov ecx, dword ptr [esi+0064E734]
lea eax, dword ptr [esi+0064E6C8]


=================================================

0043B30A: Monster mouseover

ecx - inited to base monster type

Total kills : %i
Hit Points : %i-%i	1E	30 kills
No Magic Resistance	0F	15 kills
Resists : 
Immune : 

0043B30A:
push ebx
push ebp
push esi
push edi
mov edi, ecx				base monster type
mov esi, 004B9B18
push dword ptr [4*edi+0064E010]	number killed
lea ebx, dword ptr [4*edi+0064E010]
push 0049FE34				"Total kills : %i"
push esi
call 0046B440
add esp, 0000000C				clear pushed data
mov ecx, esi
push 00000001
pop ebp
mov edx, ebp
call 004041D9
cmp dword ptr [ebx], 0000001E		30 monsters killed
jl 0043B3AA					no, jump
mov eax, edi
shl eax, 07					base monster x 128
cmp byte ptr [0067A990], 01		Single player and true
mov ecx, dword ptr [eax+00498EC8]	min hp
mov eax, dword ptr [eax+00498ECC]	max hp
jne 0043B360				not single player, skip
sar ecx, 1					div 2
sar eax, 1					div 2

0043B360:
cmp ecx, ebp				min hp & 1
jge 0043B366				min>=1, skip
mov ecx, ebp				set min to 1

0043B366:
cmp eax, ebx
jge 0043B36C
mov eax, ebp

0043B36C:
mov edx, dword ptr [005B83E8]
cmp edx, ebp
jne 0043B37E
lea ecx, dword ptr [ecx+2*ecx+01]	(min x 3) + 1
lea eax, dword ptr [eax+2*eax+01]	(max x 3) + 1

0043B37E:
cmp edx, 00000002
jne 0043B391
lea ecx, dword ptr [4*ecx+00000003]	(min x 4) + 3
lea eax, dword ptr [4*eax+00000003]	(max x 4) + 3

0043B391:
push eax
push ecx
push 0049FE20				"Hit Points: %i-%i
push esi
call 0046B440
add esp, 00000010
mov edx, ebp
mov ecx, esi
call 004041D9

0043B3AA:
cmp dword ptr [ebx], 0000000F		# killed & 15
jl 0043B4AF
cmp dword ptr [005B83E8], 00000002	Difficulty & Hell
je 0043B3C8
shl edi, 07
movzx ebx, word ptr [edi+00498EE4]
jmp 0043B3D2

0043B3C8:
shl edi, 07
movzx ebx, word ptr [edi+00498EE6]

0043B3D2:
and ebx, 0000003F
jne 0043B3F2

........

0043B4AC:
push 00000001
pop ebp

0043B4AF:
pop edi
mov dword ptr [004B9AEC], ebp
pop esi
pop ebp
pop ebx
ret



=================================================

0043DDB8: CALL ?
?
Called from: a lot...
Regesters Used:
  ecx - Initial value is boolean to check which call is done.

0043DDB8:
push ebp
mov ebp, esp
push ecx
mov ax, word ptr [ebp+08]
mov byte ptr [ebp-04], dl
test ecx, ecx               - is ecx 0
mov word ptr [ebp-03], ax
mov dl, 03
lea ecx, dword ptr [ebp-04]
je 0043DDD7                 - if ecx is 0, jump
call 004410C2               - call if ecx is not 0
jmp 0043DDDC

0043DDD7:
call 00440F30               - call if ecx is 0

0043DDDC:
leave
ret 0004

=================================================

0043E05F:
Call dword ptr [0047A034]	KERNEL32.GetTickCount, Ord:0145h
cmp dword ptr [ebp-06], 00000000
jne 0043E070
mov dword ptr [ebp-06], eax
jmp 0043E07A

0043E070:
sub eax, dword ptr [ebp-06]
cmp eax, 00001388
jg 0043E084

0043E07A:
mov dl, 1E
lea ecx, dword ptr [ebp-20]
call 00440F22			If ecx<>0 and dl<>0, does something

0043E084:
pop esi
pop ebx
leave
ret 000C

=================================================

0043ED4B:
cmp byte ptr [006774C8], 01
mov eax, edx
jne 0043ED63
mov edx, ecx
push 00000003
mov ecx, eax
call 0043CFA7
jmp 0043ED78

0043ED63:
mov cx, word ptr [ecx+01]
cmp cx, 0100
ja 0043ED78                - if cx>256, skip next 3 lines
movzx edx, cx
mov ecx, eax
call 00452012              - CALL Add-edi-Vit-to-player-ecx

0043ED78:
push 00000003
pop eax
ret

=================================================

004474AA: CALL ?
?
Called from: 0044883C, 00448887, 00448E40, 00449267
Regesters Used:

004474AA:
push ebp
mov ebp, esp
sub esp, 00000018
push ebx
push esi
push edi
xor edi, edi
cmp dword ptr [004B979C], edi
mov esi, edx
mov dword ptr [ebp-18], esi
mov dword ptr [ebp-04], ecx
je 004474D1
mov dword ptr [004B979C], edi
mov dword ptr [004B9A60], edi

004474D1:
imul esi, 00000078
cmp byte ptr [esi+0067AFC0], 00
lea ebx, dword ptr [esi+0067AFC0]
je 00448492
mov ecx, dword ptr [esi+0067AFD4]
call 0417C44
mov eax, dword ptr [006774C4]
and byte ptr [ebx], 00
push 00000001
cmp eax, edi
pup ebx
jne 00447528
push dword ptr [esi+0067AF88]
mov edx, dword ptr [esi+0067AF84]
mov ecx, dword ptr [ebp+08]
call 004163F8
mov eax, dword ptr [006774C4]
mov dword ptr [esi+0067AF90],ebx
mov dword ptr [esi+0067AF98], ebx
jmp 0044753A

00447528:
mov ecx, dword ptr [esi+0067AFA0]
mov dword ptr [esi+0067AFA4], ecx
mov dword ptr [esi+0067AF90], edi

0044753A:
mov ecx, dword ptr [esi+0067AFD8]
cmp ecx, 00000019
ja 00448466
...........?

=================================================

004474AA:
related to activating shrines
........
004474E7: set ecx to stored seed and call 'set seed' code.

=================================================

Enchanted Shrine

if eax is inited to 0, code is not run (if target isn't local, it's not run either).
[ebp-04] = character number

004479C5:
test eax, eax
jne 00448492					pop edi, esi, ebx, leave, ret 4.
mov eax, dword ptr [ebp-04]
cmp eax, dword ptr [00687774]			current player
jne 00448492					pop edi, esi, ebx, leave, ret 4.
mov esi, dword ptr [ebp-04]
xor edx, edx					high dword of long counter
imul esi, 000054D8				character offset
push 00000001
mov dword ptr [ebp+08], edx			counter of known spells
mov edi, dword ptr [esi+00687880]		32 of 36 bits for known spells
pop eax						low dword of long counter
mov [ebp-08], 00000025				loop counter for 37? spells

004479FA:						LOOP1:
mov ebx, edx					high dword of long counter
mov ecx, eax					low dword of long counter
and ebx, dword ptr [esi+00687884]		check if spell edx:eax is known
and ecx, edi					check if spell edx:eax is known
or ecx, ebx						combine for je.
je 00447A0D						spell is unknown, skip
inc [ebp+08]					inc counter of known spells

00447A0D:
push 00000001
pop ecx						set ecx to 1
call 0046BE90					next spell (shl edx:eax, 1)
dec [ebp-08]					dec loop counter
jne 004479FA					not 0, LOOP1
cmp dword ptr [ebp+08], 00000001		# of known spells & 1
jle 00447AA7					known spells<=1, jump to END
push 00000001
xor edx, edx
pop eax						set edx:eax to spell bit 1
mov edi, eax					set edi to spell number 1

00447A2B:						LOOP2:
mov ecx, eax
mov ebx, edx
and ecx, dword ptr [esi+00687880]
and ebx, dword ptr [esi+00687884]
or ecx, ebx
je 00447A56						if spell edx:eax is unknown, skip
mov cl, byte ptr [edi+esi+00687839]		spell level of spell edi
lea ebx, dword ptr [edi+esi+00687839]	address of spell level of spell edi
cmp cl, 0F
jge 00447A56					slvl 15+, skip
inc cl
mov byte ptr [ebx], cl				increase slvl by 1

00447A56:
push 00000001
pop ecx
call 0046BE90					shl edx:eax, cl
inc edi						inc spell number
cmp edi, 00000025					spell number & 37
jle 00447A2B					spell<=37, LOOP2

00447A64:						LOOP3:
push 00000025
xor cl, cl
pop edx
call 00417C77					set_eax_to_Rnd[edx]
mov edi, eax					[0..36]
xor edx, edx
push 00000001
mov ecx, edi					[0..36]
pop eax
call 0046BE90					shl edx:eax, cl
and eax, dword ptr [esi+00687880]		first 32 of 36 bits for known spells
and edx, dword ptr [esi+00687884]		last 4 of 36 bits
or eax, edx
je 00447A64						if random spell isn't known, LOOP3
mov al, byte ptr [edi+esi+0068783A]		spell level of spell #edi
lea esi, dword ptr [edi+esi+0068783A]
cmp al, 02
jl 0044&AA4						if spell level < 2, skip
sub al, 02						reduce by 2
mov byte ptr [esi], al				spell level = spell level - 2
jmp 00447AA7

00447AA4:
and byte ptr [esi], 00				spell level<2, set spell level to 0

00447AA7:						END
mov cl, 13
jmp 004483E0

=================================================
Dynamic addresses at 00448499
00 Mysterious	00447550
01 Hidden		004475E2
02 Gloomy		004476FB
03 Weird		004477F9
04 Magical		0044787E
05 Stone		004478CE
06 Religious	00447985
07 Enchanted	004479C5
08 Thaumaturgic	00447AAE
09 Facinating	00447B32	Changed in DZ mod.
10 Cryptic		00447BF7
11 Magical		0044787E
12 Eldritch		0044
13 Eerie		0044
14 Divine		0044
15 Holy		0044
16 Sacred		00447FA4	Changed in DZ mod.
17 Spiritual	0044
18 Spooky		0044
19 Abandoned	0044
20 Creepy		0044
21 Quiet		0044
22 Secluded		0044
23 Ornate		00448280	Changed in DZ mod.
24 Glimmering	0044
25 Tainted		0044

=================================================

Fascinating Shrine

00447B32: Address stored at 004484BD, dynamic jump at 00447549
test eax, eax
jne 00448492					eax<>0 then jump
mov ecx, dword ptr [ebp-04]			character #
cmp ecx, dword ptr [00687774]			# & local player
jne 00448492					character<>local player, jump
imul ecx, 000054D8
or dword ptr [ecx+00687880], 00000001	add Firebolt to known spells.
lea eax, dword ptr [ecx+00687880]		36 bits for known spells
mov al, byte ptr [ecx+0068783A]		spell level for Firebolt
cmp al, 0F						spell level & 15
jge 00447B6E					slvl>=15, skip
inc al
mov byte ptr [ecx+0068783A], al		Firebolt slvl=slvl+1

00447B6E:
mov al, byte ptr [ecx+0068783A]		spell level for Firebolt
cmp al, 0F						slvl & 15
jge 00447B80					slvl>=15, skip
inc al
mov byte ptr [ecx+0068783A], al		slvl=slvl+1

00447B80:
mov ebx, dword ptr [ecx+00687920]		base max Mana
push 0000000A
mov eax, ebx					base max Mana
pop esi
cdq
idiv esi						base max Mana div 10
mov edx, dword ptr [ecx+0068791C]		base current Mana
mov esi, dword ptr [ecx+00687924]		modified current Mana
mov edi, dword ptr [ecx+00687928]		modified max Mana
sub esi, edx					mod-base current
sub edi, ebx					mod-base max
sub edx, eax					base current - 10% base max
mov dword ptr [ecx+0068791C], edx		base current Mana - 10% base max
sub dword ptr [ecx+00687924], eax		modified current Mana - 10% base max
sub dword ptr [ecx+00687928], eax		modified max Mana - 10% base max
sub dword ptr [ecx+00687920], eax		base max Mana - 10% base max
test dword ptr [ebx+00687924], FFFFFFC0	disabled/flawed? modified current Mana & -64 (-1 mana)
jg 00447BD7						mod current mana > -1, jump
mov dword ptr [ecx+00687924], esi		set mod current to mod-base current
and dword ptr [ecx+0068791C], 00000000	set base current to 0

00447BD7:
test dword ptr [ebx+00687928], FFFFFFC0	disabled/flawed? modified max Mana & -64
jg 00447BF0						modified max Mana > -1, jump
mov dword ptr [ecx+00687928], edi		set modified max Mana to mod-base max
and dword ptr [ecx+00687920], 00000000	set base max Mana to 0

00447BF0:
mov cl, 15
jmp 004483E0

=================================================

Gloomy Shrine	(+2 AC, -1 max damage)

004476FB:
test eax, eax
jne 00448492
mov eax, dword ptr [ebp-04]		player #
cmp eax, dword ptr [00687774]		player # & local player
jne 00448466
imul eax, 000054D8			player offset
or ebx, FFFFFFFF
push 00000002
cmp dword ptr [eax+00687AFC], ebx	helm item type & empty slot
pop edi
je 0044772C					empty slot, skip
add dword ptr [eax+00687BC8], edi	add two to Armor AC

0044772C:
cmp dword ptr [eax+0068839C], ebx	armor item type & empty slot
je 0044773A					empty slot, skip
add dword ptr [eax+00688468], edi	add two to Armor Class

00447740:
mov ecx, dword ptr [eax+006880BC]	primary hand item type
cmp ecx, ebx				primary hand item type & empty slot
je 0044776F					empty slot, skip primary hand
cmp ecx, 00000005				primary hand item type & shield
jne 00447751				no, skip to weapon
add dword ptr [eax+00688188], edi	add two to Armor Class
jmp 0044776F				jump to next item

00447751:
dec dword ptr [eax+00688184]		dec max damage
mov esi, dword ptr [eax+00688184]	max damage
mov edx, dword ptr [eax+00688180]	min damage
lea ecx, dword ptr [eax+00688184]	addr:max damage
cmp esi, edx				max & min
jge 0044776F				max>=min, skip
mov dword ptr [ecx], edx		max<min, set max to min

0044776F:
mov ecx, dword ptr [eax+0068822C]
cmp ecx, ebx
je 004477A4
cmp ecx, 00000005
jne 00447786
add dword ptr [eax+006882F8], edi
jmp 004477A4

00447786:
dec dword ptr [eax+006882F4]
mov esi, dword ptr [eax+006882F4]
mov edx, dword ptr [eax+006882F0]
lea ecx, dword ptr [eax+006882F4]
cmp esi, edx
jge 004477A4
mov dword ptr [ecx], edx

004477A4:
xor ebx, ebx
cmp dword ptr [eax+0068BE84], ebx
jle 004477F2
lea ecx, dword ptr [eax+006885D8]

004477B4:
mov edx, dword ptr [ecx+FFFFFF34]
test edx, edx
jle 004477E3				misc or empty, next
cmp edx, 00000004				sword, axe, bow, mace
jle 004477D3				weapon
cmp edx, 00000009				shield, leather, helm, mail, plate
jle 004477CF				armor
cmp edx, 0000000A				staff
je 004477D3					weapon
jmp 004477E3				next

004477CF:
add dword ptr [ecx], edi
jmp 004477E3

004477D3:
dec [ecx-04]
mov esi, dword ptr [ecx-04]
mov edx, dword ptr [ecx-08]
cmp esi, edx
jge 004477E3
mov dword ptr [ecx-04], edx

004477E3:
inc ebx
add ecx, 00000170
cmp ebx, dword ptr [eax+0068BE84]
jl 004477B4

004477F2:
mov cl, 0E
jmp 004483E0

-------------------------------------------------

Weird Shrine	+1 max damage

004477F9:
test eax, eax
jne 00448492
mov eax, dword ptr [ebp-04]
cmp eax, dword ptr [00687774]

........

00447877:
mov cl, 0F
jmp 004483E0

=================================================

00448150:
mov cl, 1F
call 004187BD
mov eax, dword ptr [00687774]     - character data
imul eax, 000054D8                - character record size
mov ecx, dword ptr [eax+00687914] - modified max Life
mov dword ptr [eax+00687910], ecx - set current to max
mov ecx, dword ptr [eax+0068790C] - base max life
mov dword ptr [eax+00687908], ecx - set current to max
mov ecx, dword ptr [eax+00687928] - modified max mana
mov dword ptr [eax+00687924], ecx - set current to max
mov ecx, dword ptr [eax+00687920] - base max mana
mov dword ptr [eax+0068791C], ecx - set current to max
jmp 00448466                      - ? bypass all of the following ?
test eax, eax                     - Check of eax is 0
jne 00448492                      - It it's not, jump
mov esi, dword ptr [ebp-04]
cmp esi, dword ptr [00687774]
jne 00448492
push 00000002
mov ecx, esi
pop edx
call 00451F6C
mov ecx, esi
call 00451DFA      - CALL Keep-Stats-in-0-to-Max-Range
cmp esi, dword ptr [00687774]
jne 00448466
............

00448466:
mov esi, dword ptr [ebp-04]
...........

=================================================

0044885B:	Cauldron code
........
mov ecx, dword ptr [esi+0067AFD4]	seed
call 00417C44				Set pRNG seed to ecx
mov ecx, edi
call 004487AB	sets eax to a random shrine
mov edx, edi
mov ecx, ebx
push [esp+10]
mov dword ptr [esi+0067AFD8], eax	shrine #
........

=================================================

Load player animation

0044BDC1:
push ebp
mov ebp, esp
sub esp, 00000120
push ebx
push esi
mov esi, ecx
push edi
cmp esi, 00000004			player # and 4
mov dword ptr [ebp-10], edx
jb 0044BDE4				player in [0..3], jump
push esi
push 004A2220			"LoadPlrGFX: illegal player %d"
call 00401982
pop ecx
pop ecx

0044BDE4:
imul esi, 000054D8
add esi, 00687778
mov eax, dword ptr [esi+78]		appearance
mov ecx, eax				appearance
and ecx, 0000000F				weapon sans armor
sar eax, 04					armor sans weapon
movsx ecx, byte ptr [ecx+00480230]	weapon sans armor + addr

	0 = no weapon and no shield	N
	1 = shield, but no weapon	U
	2 = sword				S
	3 = sword+shield			D
	4 = bow				B
	5 = axe				A
	6 = club				M
	7 = club+shield			H
	8 = staff				T

movsx eax, byte ptr [eax+00480228]	armor sans weapon + addr

	0 = leather				L
	1 = mail				M
	2 = plate				H

push ecx					weapon letter
push eax					armor letter
movsx eax, byte ptr [esi+00000160]	class
movsx eax, byte ptr [eax+0048023C]

	0 = Warrior				W
	1 = Rogue				R
	2 = Sorcerer			S

push eax					class letter
lea eax, dword ptr [ebp-20]		?
push 004A2218				"%c%c%c"
push eax					[ebp-20]
call 0046B440				Class/Armor/Weapon
movsx eax, byte ptr [esi+00000160]	class
add esp, 00000014
mov eax, dword ptr [4*eax+004A21B0]

	0 = Warrior				00485124
	1 = Rogue				0048511C
	2 = Sorcerer			00485110

push 00000001
mov dword ptr [ebp-0C], eax
mov edi, dword ptr [ebp-0C]
mov ebx, dword ptr [ebp-0C]
mov al, byte ptr [005BC4FC]
pop ecx
mov dword ptr [ebp-08], ecx

0044BE4D:
mov edx, dword ptr [ebp-10]
test edx, ecx
je 0044C007
cmp ecx, 00000008
ja 0044BEF7
ja 0044BED7
dec ecx
je 0044BEB4
dec ecx
je 0044BE91
dec ecx
dec ecx
jne 0044BF1B
test al, al
je 0044C007
mov edi, dword ptr [esi+000054B8]
mov [ebp-04], 004A2214			"AT"	Attack
lea ebx, dword ptr [esi+0000026C]
jmp 0044BFC1

0044BE91:
test al, al
mov [ebp-04], 004A2210			"AW"	Animation Walk
jne 0044BEA3
mov [ebp-04], 004A220C			"WL"

0044BEA3:
mov edi, dword ptr [esi+000054B4]
lea ebx, dword ptr [esi+00000244]
jmp 0044BFC1

0044BEB4:
test al, al
mov [ebp-04], 004A2208			"AS"	Animation Still
jne 0044BEC6
mov [ebp-04], 004A2204			"ST"

0044BEC6:
mov edi, dword ptr [esi+000054B0]
lea ebx, dword ptr [esi+0000021C]
jmp 0044BFC1

0044BED7:
test al, al
je 0044C007
mov edi, dword ptr [esi+000054C8]
mov [ebp-04], 004A2200			"HT"
lea ebx, dword ptr [esi+00000304]
jmp 0044BFC1

0044BEF7:
sub ecx, 00000010
je 0044BFAA
sub ecx, 00000010
je 0044BF91
sub ecx, 00000020
je 0044BF74
sub ecx, 00000040
je 0044BF55
sub ecx, 00000080
je 0044BF2B
push 004A21F8				"PLR:2"
call 00401982
pop ecx
jmp 0044BFC1

0044BF2B:
test al, al
je 0044C007
cmp byte ptr [esi+0000013C], 00	Have Shield & False
je 0044C007
mov edi, dword ptr [esi+000054D0]
mov [ebp-04], 004A21F4			"BL"
lea ebx, dword ptr [esi+00000354]
jmp 0044BFC1

........

=================================================

0044B7F2: CALL Create new character

ECX - Initial value is character number.
DL - Initial value is character class.

0044B7F2:
push ecx
push ebx
push ebp
mov ebp, ecx
push esi
mov esi, ebp
mov bl, dl
imul esi, 000054D8			character offset
push edi
mov byte ptr [esp+13], bl
lea ecx, dword ptr [esi+00687778]	addr. of character
call 0044C6F0				init some addresses to 0

0044C787:
Call dword ptr [0047A034]		GetTickCount
mov ecx, eax
call 00417C44
cmp ebp, 00000004
jb 0044C7A6					Now it verifies character number! after initing part of the record!
push ebp					character #
push 004A2310				error message
call 00401982				call error routine
pop ecx
pop ecx

0044C7A6:
movsx ecx, bl
shl ecx, 02					x4 for offset
mov byte ptr [esi+006878D8], bl	class
xor ebx, ebx				set ebx to 0
mov al, byte ptr [ecx+004A2050]	starting strength
cmp al, bl					compare to 0?
jge 0044C7C0
xor al, al					if <0, set to 0!

0044C7C0:
movsx eax, al
mov dword ptr [esi+006878DC], eax	modified strength
mov dword ptr [esi+006878E0], eax	base strength
mov al, byte ptr [ecx+004A2060]	starting magic
cmp al, bl
jge 0044C7DB
xor al, al					if<0, set to 0

0044C7DB:
movsx eax, al
mov dword ptr [esi+006878E4], eax	modified magic
mov dword ptr [esi+006878E8], eax	base magic
mov al, byte ptr [ecx+004A2070]	starting dex
cmp al, bl
jge 0044C7F6
xor al, al					if<0, set to 0

0044C7F6:
movsx eax, al
mov dword ptr [esi+006878EC], eax	modified dex
mov dword ptr [esi+006878F0], eax	base dex
mov al, byte ptr [ecx+004A2080]	starting vitality
cmp al, bl
jge 0044C7F6
xor al, al					if<0, set to 0

0044C811:
movsx eax, al
mov dword ptr [esi+006878F4], eax	modified vit
mov dword ptr [esi+006878F8], eax	base vit
mov dword ptr [esi+006878FC], ebx	bonus points to distribute
mov byte ptr [esi+0068CBF0], bl	set ? to 0
mov byte ptr [esi+0068CBF1], bl	set ? to 0
mov byte ptr [esi+0068CBF2], bl	set ? to 0
mov dword ptr [esi+0068CC08], ebx	dots
cmp byte ptr [esi+006878D8], 01	class & rogue
jne 0044C865				not a rogue, jump
mov eax, dword ptr [esi+006878EC]	modified dex
mov edi, 000000C8				(200)
movsx edx, byte ptr [esi+00687930]	clvl
add eax, dword ptr [esi+006878DC]	dex + modified str
imul eax, edx				(dex+str) x clvl
cdq
jmp 0044C879

0044C865: Base damage for Warrior & Sorcerer
movsx edx, byte ptr [esi+00687930]	clvl
mov eax, dword ptr [esi+006878DC]	modified strength
push 00000064				(100)
imul eax, edx				str x clvl
cdq
pop edi

0044C879:
idiv edi					damage
mov dword ptr [esi+00687900], eax	character damage
mov eax, dword ptr [ecx+004A2090]
mov dword ptr [esi+00687904], eax	block bonus
mov eax, dword ptr [esi+006878F4]	modified vitality
add eax, 0000000A				vitality+10
shl eax, 06					shift for stat
mov dword ptr [esi+00687910], eax	modified current life
cmp byte ptr [esi+006878D8], bl	class & warrior
jne 0044C8AF				not a warrior, jump
add eax, eax				2*(vit+10) as stat
mov dword ptr [esi+00687910], eax	modified current life

0044C8AF:
cmp byte ptr [esi+006878D8], 01

........

0044C929:
mov eax, dword ptr [esi+00687924] - modified current mana
mov dl, byte ptr [esp+13]         - ?
mov dword ptr [esi+00687928], eax - set mod. max mana to current ???
mov eax, dword ptr [esi+00687924] - mod. cur. mana
mov dword ptr [esi+0068791C], eax - set base cur. mana to mod.
mov eax, dword ptr [esi+00687924] - mod. cur. mana
mov dword ptr [esi+00687920], eax - set base max. mana to mod.
mov eax, dword ptr [004A20E4]     - exp for 2nd level
mov byte ptr [esi+00687930], 01   - set clvl to 1
mov byte ptr [esi+00687931], 01   - set extra clvl to 1
mov dword ptr [esi+00687934], ebx - cur. exp. to 0
mov dword ptr [esi+00687938], ebx - ? to 0
mov dword ptr [esi+0068793C], ebx - next exp. to 
........
========================================================

0044CA9F: CALL Points-To-Max
A call which appears to calc the points remaining til max.
Called from: 00405E0B, 00405E28, 0044CB0E, 0044CB1A
Regesters Used:
  eax - Initial value is discarded.
        Returns the points needed until maximum stats are reached.
  ecx - Initial value should be the character's number shl 4.
        Returns the address of the character's record.  PNU
  edx - Initial value is discarded.
        Returns the character's class with an shl 04.  PNU
  

imul ecx, 000054D8                 - multiply by the length of character record.
movsx edx, byte ptr [ecx+006878D8] - set edx to class.
shl edx, 04                        - shl edx (class).
mov eax, dword ptr [edx+004A20BC]  -? class's max stat?vit
add eax, dword ptr [edx+004A20B8]  -?+class's max stat?dex
add eax, dword ptr [edx+004A20B4]  -?+class's max stat?mag
add eax, dword ptr [edx+004A20B0]  -?+class's max stat?str
sub eax, dword ptr [edx+006878F8]  - - character's base vit
sub eax, dword ptr [edx+006878F0]  - - character's base dex
sub eax, dword ptr [edx+006878E8]  - - character's base mag
sub eax, dword ptr [edx+006878E0]  - - character's base str
ret

------------------------------------------------

0044CAE0: CALL Level up.
Called from: 0044CD0E

push ebx
push ebp
mov ebp, ecx
push esi
cmp ebp, 00000004
push edi
jb 0044CAF8
push ebp
push 004A2330 - String Ref->"NextPlrLevel: illegal player %d"
call 00401982
pop ecx
pop ecx

0044CAF8:
mov esi, ebp
mov ecx, ebp
imul esi, 000054D8
inc byte ptr [esi+00687930]       - clvl
inc byte ptr [esi+00687931]       - extra clvl?
call 0044CA9F				CALL Points-To-Max (ptm)
cmp eax, 00000005                 - compare ptm to 5
jge 0044CB27                      - if ptm>=5 skip ahead for 5 points to distrib
mov ecx, ebp                      - ecx set to ebp which is the character's number?
call 0044CA9F                     - CALL Points-To-Max
mov dword ptr [esi+006878FC], eax - sets points to distribute to points-to-max
jmp 0044CB2E                      - skips next line of code.

0044CB27:
add dword ptr [esi+006878FC], 00000005 - sets points to distribute to 5

0044CB2E:
movsx eax, byte ptr [esi+00687930]
xor ecx, ecx
mov..............

===============================================

0044DEF3: CALL Start Player Block
........
call 0044ECE2
jmp 0044DFA2

===============================================

0044E3B5: CALL Destroy duplicates
push ebp
mov ebp, esp
push ecx
push ecx
cmp dword ptr [00642800], 0000007F	?# of items on ground & 127
push ebx
mov dword ptr [ebp-04], edx
mov ebx, ecx
jnl 0044E47C				EXIT
mov dx, word ptr [ebp+04]
mov ecx, dword ptr [ebx+00000168]
push edi
push esi
push dword ptr [ebx]
call 0041EA64				check for duplicate
test eax, eax
jl 0044E406					no dupe, jmp
mov ecx, 0048FA54	"A duplicate item has been detected. "
			" Destroying duplicate..."
call 0041ED63
push dword ptr [ebx]
mov ax, word ptr [ebx+04]
mov edx, dword ptr [ebp+08]
mov ecx, dword ptr [ebp-04]
push eax
push dword ptr [ebx+00000168]
call 0041EAC2

0044E406:
mov edx, dword ptr [ebp-04]
mov eax, dword ptr [006361E8]
imul edx, 00000070
mov esi, dword ptr [ebp+08]
mov cl, al
inc cl
mov dword ptr [ebp-08], eax
mov byte ptr [edx+esi+005CAD28], cl
mov ecx, dword ptr [00642800]
shl ecx, 02
mov edx, 006363E0
push 0000005C
mov dword ptr [ecx+00635FE8], eax
imul eax, 00000170
sub edx, ecx
lea edi, dword ptr [eax+00636D48]
pop ecx
mov esi, ebx
mov edx, dword ptr [edx]
push 00000001
mov dword ptr [006361E8], edx
pop edx
repz
movsd
mov ecx, dword ptr [ebp-04]
mov dword ptr [eax+00636D54], ecx
mov ecx, dword ptr [ebp+08]
mov dword ptr [eax+00636D58], ecx
mov ecx, dword ptr [ebp-08]
call 0042347C
inc dword ptr [00642800]
or dword ptr [ebx+08], FFFFFFFF
pop esi
pop edi

0044E47C:
pop ebx
leave
ret 0004

===============================================

0044F15C:
push ebx
mov ebx, ecx		player #
cmp ebx, 00000004
push edi
jb 0044F173
push ebx
push 004A2670	"PM_DoWalk: illegal player %d"
call 00401982
pop ecx
pop ecx

0044F173:
mov esi, ebx		player #
imul esi, 000054D8	player offset
mov eax, dword ptr [esi+00687804]	current frame #
cmp eax, 00000003
je 0044F19F
mov ecx, dword ptr [esi+006879DC]	?
cmp ecx, 00000008				? in town
jne 0044F19A
cmp eax, 00000007
je 0044F19F
cmp ecx, ecx
je 0044F1B2

0044F19A:
cmp eax, 00000004
jne 0044F1B2

0044F19F:
push dword ptr [esi+006877B4]
mov edx, dword ptr [esi+006877B0]
xor ecx, ecx
call 004163F8

0044F1B2:
cmp byte ptr [005BC500], 00	dlvl & town
push 00000008
pop eax
je 0044F1CC				town, skip
movsx eax, byte ptr [esi+006878D8]
mov eax, dword ptr [4*eax+004A2040]

0044F1CC:
cmp dword ptr [esi+00687968], eax
jne 0044F2C9
........

===============================================

........
0044F6B9:
mov dl, 04
mov ecx, ebx
call 0043E2D2
mov dword ptr [esi+006880BC], ebp	set item type of primary hand to empty.

0044F6C8:
mov edx, ebx
mov ecx, edi
call 00420730
mov eax, ebx
jmp 0044F6D7

===============================================

PlrHitMonst

0044F70D : Check dword[ebx+0064E6EC] compared to -64
0044F717 : If it's <= -64 (* Is the monster's life -1 or less *), jump to 0044F736
........

0044F976:
add dword ptr [esi+0068791C], eax - base current mana
mov ebx, dword ptr [esi+0068791C] - base current mana
mov edx, dword ptr [esi+00687920] - base max mana
lea ecx, dword ptr [esi+0068791C] - base current mana
cmp ebx, edx                      - current & max
jle 0044F994
mov dword ptr [ecx], edx          - If cur>max, set to max

0044F994:
mov ebx, dword ptr [ebp-10]
mov dword ptr [004B9A64], 00000001

0044F9A1:
mov ecx, dword ptr [esi+0068CBC8] - special flags
test ecx, 00018000                - check for 3% and/or 5%
je 0044FA17                       - no, skip steal life
test ch, 80				    - check for 3%
je 0044F9BD				    - no, skip 3%
lea eax, dword ptr [edi+2*edi]    - eax = 3*edi
push 00000064
cdq
pop ebx
idiv ebx				    - edx?:eax div 64h (100)

0044F9BD:
test ecx, 00010000		    - check for 5%
je 0044F9CE
lea eax, dword ptr [edi+4*edi]
push 00000064
cdq
pop ecx
idiv ecx

0044F9CE:
add dword ptr [esi+00687910], eax - mod cur life
mov ebx, dword ptr [esi+00687910] - mod cur life
mov edx, dword ptr [esi+00687914] - mod max life
lea ecx, dword ptr [esi+00687910] - mod cur life
cmp ebx, edx			    - cur & max
jle 0044FA0A
mov dword ptr [ecx], eax	    - If cur>max, set to max

0044FA0A:
mov ebx, dword ptr [ebp-10]	     - ?
mov dword ptr [004B9798], 00000001 - ?mana ball update?

0044FA17:
mov eax, dword ptr [esi+0068CBC8] - special bytes
test ah, 01
je 0044FA29
or dword ptr [ebx+0064E6F4], 00000008

0044FA29:
test dword ptr [ebx+0064E6EC], FFFFFFC0 - Monster's HP & it's cur life
push 0000000F
pop esi
jg 0044FA54
cmp dword ptr [ebx+0064E65C], esi
mov edx, dword ptr [ebp-0C]
mov ecx, dword ptr [ebp-08]
jne 0044FA4D
call 004350F8
jmp 0044FA68

0044FA4D:
call 004350F8
jmp 0044FA89
........

........
0044F736 : set eax to 0.
0044F738 : jump to 0044FA93

0044FA93 : pop edi,esi,ebx, leave???, ret



* mov eax, dword ptr [ebx+0064E734]  (the monster's slot)
* cmp byte ptr [eax], 20             (is it an illusion weaver)

0044F71F: change to call (E8) to test....

* jne 0044F72D                       (if it's not, bail)
* cmp byte ptr [ebx+0064E660], 02    (is it in reteat mode; invincable)
* je 0044F736                        (if so, bail to damage result)
* cmp dword ptr [ebx+0064E65C], 0000000E
* jne ..........


Basically this checks if the monster is an Illusion Weaver (slot 20h) 
and if so, if it is curently retrating (value 2 in 64e660) it is 
immune to attacks so jump to a place that sets the result of the 
attack (passedout from the routine by eax) to no hit (0). Otherwise 
jump on and continue with the routine.

=======================================================

0044FF2D:	Player Animation: Do Range Attack

=======================================================

004500CB:	Player Animation: Do Block

=======================================================

........
00451208:
xor ecx, ecx
cmp dword ptr [esi+0068BE84], edi
jle 0045123C
lea eax, dword ptr [esi+006885C8]
mov edx, 00001388
........

=======================================================

........
00451429:
mov eax, dword ptr [esi-34]
cmp eax, 0000000A
ja 0045149B
jmp dword ptr [4*eax+004514DA]
	00	00451438	0044F159	Do nothing....
	01	00451441	0044F15C	PM_DoWalk
	02	0045144A	0044F2D6	PM_DoWalk2
	03	00451453	0044F42A	PM_DoWalk3
	04	0045145C	0044FD0D	PM_DoAttack
	05	00451465	0044FF2D	PM_DoRangeAttack
	06	0045146E	004500CB	PM_DoBlock
	07	00451480	00450288	PM_DoGotHit
	08	00451489	004503FE	PM_DoDeath
	09	00451477	00450148	PM_DoSpell
	0A	00451492	00450159	Do nothing....
........


=======================================================

?00458D97: call 00429708 (compute spell level)
?00458DB5: compare mod current mana and eax
?004518B1: Jump to not enough mana
?004519EC: Not enough mana.

=======================================================

00451CFA: CALL Keep-Stats-in-0-to-Max-Range
Calling this routine will force any base stats back into their minimum of 0 and maximum of whatever is appropriate for their class.
Called from: 004475D6, 00447E1F, 004481BA,
             00448230, 00448461, 004489B5
Regesters Used:
  ecx - Initial value should be the character's number.
        Preserves the value.
  edx - Initial value is discarded.
        Returns the character's base vit.  PNU

push ecx          - preserve register - player number
push ebx          - preserve register
push esi          - preserve register
mov esi, ecx      - set esi to player number
push edi          - preserve register
cmp esi, 00000004 - validate player number
jb 00451D12       - jump past error section.
push esi          - pass %d to error procedure
push 004A29B8     - String Ref->"CheckStats: illegal player %d"
call 00401982     - Error - Exit Process
pop ecx           - ?
pop ecx           - ?

00451D12:
mov eax, esi                    - set eax to player number
xor ebx, ebx                    - set ebx to 0
imul eax, 000054D8              - # x length of character record
mov cl, byte ptr [eax+006878D8] - set cl to class
cmp cl, bl                      - class & Warrior
jne 00451D2A                    - not Warrior, skip 2 lines
xor esi, esi                    - set esi to 0
jmp 00451D41                    - jump past Rogue/Sorcerer section

00451D2A:
cmp cl, 01                      - class & Rogue
jne 00451D33                    - not Rogue, skip 2 lines
push 00000001                   - push 1.
jmp 00451D3A                    - skip next 3 lines

00451D33:
cmp cl, 02                      - class & Sorcerer
jne 00451D3D                    - not sorcerer, skip next 3 lines
push 00000002                   - push 2.

00451D3A:
pop esi                         - set esi to 1/2 for Rogue/Sorc.
jmp 00451D41                    - skip next line

00451D3D:
mov esi, dword ptr [esp+0C]     - ?Class not Warrior, Rogue or Sorc.

00451D41:
xor edi, edi                    - set edi to 0 (loop from 0..3)

00451D43:
mov ecx, edi                    - set ecx to loop counter
sub ecx, ebx                    - ebx is 0.
je 00451DDC                     - jump if loop counter = 0
dec ecx                         - count down ecx for je calls
je 00451DB3                     - jump if loop counter = 1
dec ecx                         - count down ecx for je calls
je 00451D8A                     - jump if loop counter = 2
dec ecx                         - count down ecx for je calls
jne 00451E03                    - jump if loop counter > 3
mov edx, dword ptr [eax+006878F8] - set edx to base vit
mov ecx, esi                      - set ecx to class number
shl ecx, 04                       - shift for record access
mov ecx, dword ptr [ecx+004A20BC] - set ecx to class's max vit
cmp edx, ecx                      - base vit & max vit
jle 00451D7A                      - vit<=max, skip next 2 lines
mov dword ptr [eax+006878F8], ecx - set base vit to max vit
jmp 00451E03                      - jump to the end of the loop

00451D7A:
cmp edx, ebx                      - base vit & 0
jnl 00451E03                      - ?
mov dword ptr [eax+006878F8], ebx - set base vit to 0
jmp 00451E03

00451D8A:
mov edx, dword ptr [eax+006878F0] - set edx to base dex
mov ecx, esi                      - set ecx to class number
shl ecx, 04                       - shift for record access
mov ecx, dword ptr [ecx+004A20B8] - set ecx to class's max dex
cmp edx, ecx                      - base dex & max dex
jle 00451DA7                      - If <= max dex, skip next 2 lines
mov dword ptr [eax+006878F0], ecx - set base dex to max dex
jmp 00451E03                      - jump to the end of the loop

00451DA7:
cmp edx, ebx                      - base dex & 0
jge 00451E03                      - If >=0, end of loop
mov dword ptr [eax+006878F0], ebx - set base dex to 0
jmp 00451E03                      - jump to the end of the loop

00451DB3:
mov edx, dword ptr [eax+006878E8] - same for magic.
mov ecx, esi
shl ecx, 04
mov ecx, dword ptr [ecx+004A20B4]
cmp edx, ecx
jle 00451DD0
mov dword ptr [eax+006878E8], ecx
tmp 00451E03

00451DD0:
cmp edx, ebx
jge 00451E03
mov dword ptr [eax+006878E8], ebx
jmp 00451E03

00451DDC:
mov edx, dword ptr [eax+006878E0] - and again for str.
mov ecx, esi
shl ecx, 04
mov ecx, dword ptr [ecx+004A20B0]
cmp edx, ecx
jle 00451DF9
mov dword ptr [eax+006878E0], ecx
jmp 00451E03

00451DF9:
cmp edx, ebx
jge 00451E03
mov dword ptr [eax+006878E0], ebx

00451E03:
inc edi                           - increment loop counter
cmp edi, 00000004                 - compare it to 4 (0..3 loop)
jl 00451D43                       - If < 4, go to top of loop
pop edi                           - restore register
pop esi                           - restore register
pop ebx                           - restore register
pop ecx                           - restore register
ret

========================================================

Modify Str		00451E12..00451EC7

========================================================

Modify Magic	00451EC8..00451F6B

Add edx Magic to player ecx

Registers
		Initial	Final
	EAX	Discarded	Unknown
	ECX	Player #	Unknown
	EDX	Points	Unknown

00451EC8: Add edx Magic to player ecx
push ebx
mov ebx, ecx		player #
push esi
push edi
cmp ebx, 00000004
mov edi, edx		points to add
jb 00451EE1			if player # in 0..3, skip
push ebx
push 004A29F8	"ModifyPlrMag: illegal player %d"
call 00401982
pop ecx
pop ecx

00451ED2:
mov esi, ebx
imul esi, 000054D8
movsx eax, byte ptr [esi+006878D8]		class
mov ecx, dword ptr [esi+006878E8]		base Magic
shl eax, 04						class x (16)
lea edx, dword ptr [edi+ecx]			base Magic+points to add
mov eax, dword ptr [eax+004A20B4]		class's max magic
cmp edx, eax					new Magic & max
jle 00451F0A
sub eax, ecx					max - base Magic
mov edi, eax		set points to add to points to max

00451F0A:
add dword ptr [esi+006878E4], edi		add to modified Magic
add dword ptr [esi+006878E8], edi		add to base Magic
shl edi, 06						give points to add extra precision
cmp byte ptr [esi+006878D8], 02		class & sorcerer
jne 00451F24					no, skip
shl edi, 1						double (2 mana per magic)

00451F24:
add dword ptr [esi+00687920], edi		add to base max mana
add dword ptr [esi+00687928], edi		add to modified max mana
test byte ptr [esi+0068CBCB], 08		cursed mana
jne 00451F45					yes, skip
add dword ptr [esi+0068791C], edi		add to base current mana
add dword ptr [esi+00687924], edi		add to modified current mana

00451F45:
push 00000001
mov ecx, ebx					player #
pop edx						set to 1
call 00420730					?
cmp ebx, dword ptr [00687774]			player # & local player
jne 00451F68					no, skip to exit
mov ax, word ptr [esi+006878E8]		base magic
mov dl, 50
push eax
xor ecx, ecx
call 0043DDB8					?

00451F68:
pop edi
pop esi
pop ebx
ret

========================================================

Modify Dex		00451F6C..00452011

00451F6C: CALL Modify Dex
?
Called from:
  8 different locations
Regesters Used:
  ecx - Initial value should be the character's number.

  edx - Initial value should be dex to be gained.

00451F6C:
push ebx          - preserve register
push ebp          - preserve register
mov ebp, ecx      - set ebp to player number
push esi          - preserve register
push edi          - preserve register
cmp ebp, 00000004 - used to check for valid player 0..3
mov edi, edx      - set edi to amount of vit gain
jb 00451F86       - if player in 0..3, jump ahead
push ebp          - push player number for error msg.
push 004A2A18     - String Ref. "ModifyPlrDex: illegal player %d"
call 00401982     - error handling
pop ecx
pop ecx

00451F86:
mov esi, ebp                       - set esi to player number
imul esi, 000054D8                 - set esi to char. rec.
movsx eax, byte ptr [esi+006878D8] - class
mov ecx, dword ptr [esi+006878F0]  - base dex
shl eax, 04                        - prep class for addr
lea edx, dword ptr [edi+ecx]       - ?
mov eax, dword ptr [eax+004A20B8]  - class's max dex
cmp edx, eax                       - ? & max dex
jle 00451FAF
sub eax, ecx                       - max - base (pts to max)
mov edi, eax                       - set edi to pts to max

00451FAF:
add dword ptr [esi+006878EC], edi  - mod dex
add dword ptr [esi+006878F0], edi  - base dex
........

========================================================

Modify Vit		00452012..004520AC

00452012: CALL Add-edx-Vit-to-player-ecx

Called from:
  00424D40 - looks like vit. elixer
  0043ED73,
  00447589 - ?-1 to all stats???.
  004475AB - ?add 6 to vit
  00448229 - ?add 2 to vit
  00448456
  00448970

Regesters Used:

		Initial Value	Final Value
	EAX	Discarded		Unknown
	ECX	Player #		Unknown
	EDX	Points to add	Unknown

00452012:
push ebx			preserve register
mov ebx, ecx		set ebx to player number
push esi			preserve register
push edi			preserve register
cmp ebx, 00000004		used to check for valid player 0..3
mov edi, edx		set edi to amount of vit gain
jb 0045202B			if player in 0..3, jump ahead
push ebx			push player number for error msg.
push 004A2A38		String Ref. "ModifyPlrVit: illegal player %d"
call 00401982		error handling
pop ecx
pop ecx

0045202B:
mov esi, ebx				set esi to player number
imul esi, 000054D8			set esi to char. rec.
movsx eax, byte ptr [esi+006878D8]	class
mov ecx, dword ptr [esi+006878F8]	base vit
shl eax, 04					prep class for addr
lea edx, dword ptr [edi+ecx]		set edx to new vit
mov eax, dword ptr [eax+004A20BC]	class's max vit
cmp edx, eax				new vit & max vit
jle 00452054
sub eax, ecx				max - base (pts to max)
mov edi, eax				set edi to pts to max

00452054:
add dword ptr [esi+006878F4], edi	mod vit
add dword ptr [esi+006878F8], edi	base vit
shl edi, 06					shift edi into stat range for life.
cmp byte ptr [esi+006878D8], 00	class & Warrior
jne 0045206E				non-warrior's skip 1 line
shl edi, 1					double edi for warrior

0045206E:
add dword ptr [esi+00687908], edi	base current life
add dword ptr [esi+0068790C], edi	base max life
add dword ptr [esi+00687910], edi	modified cur life
add dword ptr [esi+00687914], edi	modified max life
push 00000001				push 1
mov ecx, ebx				set ecx to player number
pop edx					set edx to 1
call 00420730				?
cmp ebx, dword ptr [00687774]		player number & local player
jne 004520A9				not local, jump
mov ax, word ptr [esi+006878F8]	base vit
mov dl, 52					set dl to 52h (82)
push eax					push base vit
xor ecx, ecx				set ecx to 0
call 0043DDB8				?

004520A9:
pop edi					restore register
pop esi					restore register
pop ebx					restore register
ret

========================================================

CALL Give speech for monster death.

00453034:
push ebp
mov ebp, esp
push ecx
imul ecx, 000000E4
push ebx
push esi
mov eax, dword ptr [ecx+0064E734]	address of base monster type
push edi
mov dword ptr [ebp-04], edx
mov al, byte ptr [eax]
cmp al, 32					32 = Base Monster King Leo
jne 004530AF				not Leo, jmp to next monster
mov eax, dword ptr [00687774]		local character's #
mov byte ptr [0069D162], 03
imul eax, 000054D8			local character's offset
mov dword ptr [0052B844], 0000001E
mov al, byte ptr [eax+006878D8]	class
test al, al
jne 00453082
mov dword ptr [0052B848], 00000322	Warrior kills Leo
jmp 004530A0

00453082:
cmp al, 01
jne 00453092
mov dword ptr [0052B848], 000002B5	Rogue kills Leo
jmp 004530A0

00453092:
cmp al, 02
jne 004530A0
mov dword ptr [0052B848], 0000024E	Sorcerer kills Leo

004530A0:
test edx, edx
je 004533C0
mov dl, 0C
jmp 004532C3

004530AF:
........

========================================================

00454837: CALL mouseover description?
push ebx
xor ebx, ebx
cmp dword ptr [00526990], ebx
je 00454849
call 0045494A
jmp 0045484E
........
0045492A........

========================================================

........
0045542C:
dec eax
cmp eax, 000000C8				live monster # & 200
mov dword ptr [006A02D8], eax
jnb 004554D9
mov esi, eax				live monster #
imul esi, 000000E4			live monster record size
add esi, 0064E658				live monsters record
test byte ptr [esi+0000009C], 01	bit flags and 01?
jne 004554D9				not on, skip
mov ecx, dword ptr [esi+000000DC]	address of byte of monster's base #
cmp ecx, edi				address & 0?
je 004554D9					no addr, skip
mov edi, dword ptr [esi+38]		[esi+38]
mov ebx, dword ptr [esi+3C]		[esi+3C]
sub edi, dword ptr [ecx+00000130]	[esi+38]-[ecx+00000130]
add ebx, dword ptr [ebp+10]		[esi+3C]+[ebp+10]
add edi, dword ptr [ebp+0C]		[esi+38]-[ecx+00000130]+[ebp+0C]
cmp eax, dword ptr [004B9F80]		live monster number & mouseover
jne 0045549B
push 00000008
push 00000000
push dword ptr [ecx+0000012C]
mov edx, edi
mov cl, E9
push [esi+64]
push [esi+54]
push ebx
call 004183F8
mov eax, dword ptr [006A02D8]

0045549B:
........

========================================================

CALL Set eax to Casting Cost

Called from:	004067EA, 00458D57, 00458DA8

eax	discarded		100-(% mana cost bonus)  (i.e. actual % cost after bonus)
ecx	character #		casting cost
edx	spell code		% mana cost bonus

Byte 100 : Spell Code (Staffs/Scrolls/Books, 00 = None)
01 FireBolt		0D Guardian			19 Etheralize
02 Healing		0E ChainLightning		1A *Item Repair  
03 Lightning	0F FlameWave		1B *StaffRecharge
04 Flash		10 (Doom Serpents)	1C *TrapDisarm   
05 Identify		11 (BloodRitual)		1D Elemental    
06 FireWall		12 Nova			1E ChargedBolt  
07 TownPortal	13 (Invisibility)		1F HolyBolt     
08 StoneCurse	14 Inferno			20 Resurect     
09 Infravision	15 Golem			21 Telekinesis  
0A Phasing		16 (BloodBoil)		22 HealOther    
0B ManaShield	17 Teleport			23 BloodStar    
0C FireBall		18 Apocalypse		24 BoneSpirit   

00458C34: Set eax to Casting Cost
mov eax, ecx
push ebx
imul eax, 000054D8
push ebp
push esi
push edi
mov edi, edx				set edi to spell code
movsx edx, byte ptr [eax+0068CBD0]		+slvl
movsx ecx, byte ptr [edi+eax+00687839]
xor esi, esi				set esi to 0
lea ecx, dword ptr [ecx+edx-01]	spell level+bonus-1 (mod-1)
test ecx, ecx
jge 00458C5F				mod-1>=0, jump
xor ecx, ecx				mod-1 to 0
test ecx, ecx

00458C5F:
jle 00458C70				mod-1<=0
mov edx, edi				spell code
imul edx, 00000038
movzx esi, byte ptr [edx+004A3474]	mana decrease per level
imul esi, ecx				mana decrease x slvl

00458C70:
cmp edi, 00000001				firebolt
jne 00458C77
sar esi, 1					div 2

00458C77:
cmp edi, 00000020				Resurrect
jne 00458C8D
test ecx, ecx				mod. spell level
jle 00458C8D				<=0, skip
movzx esi, byte ptr [004A3B51]
shr esi, 03
imul esi, ecx				(? div 8) x slvl

00458C8D:
mov ebp, edi
imul ebp, 00000038
mov cl, byte ptr [ebp+004A3451]
cmp cl, FF
jne 00458CA6
movzx ecx, byte ptr [eax+00687920]	base max mana
jmp 00458CA9

00458CA6:
movzx ecx, cl

00458CA9:
mov dl, byte ptr [004A34C1]
sub ecx, esi				?
shl ecx, 06					make a stat
cmp edi, 00000002				healing
jne 00458CCC
........


00458CE4: Make mana cost 75% for rogue
cmp byte ptr [eax+006878D8], 01	class & rogue
jne 00458CF4
mov edx, ecx
sar edx, 02					div 4
sub ecx, edx				sub 1/4 (3/4)

00458CF4:
movzx edx, byte ptr [ebp+004A3475]	min cost to cast
mov esi, ecx				cost to cast
sar esi, 06
cmp edx, esi
jle 00458D09
shl edx, 06
mov ecx, edx				set cost to min

00458D09:
movsx edx, byte ptr [eax+0068CBD1]	% mana cost bonus
push 00000064
pop eax
sub eax, edx				100-% = actual cost
push 00000064
imul eax, ecx
pop ecx
pop edi
cdq
pop esi
pop ebp
idiv ecx				set eax to casting cost
pop ebx
ret

========================================================

Called at 004039E3, 00406629, 0045189D

two dwords are sent via push.  both are boolean.

ecx = character #
edx = spell to cast

00458D74:
cmp dword ptr [esp+08], 00000000	2nd push & false
push esi
push edi
push 00000001
mov edi, edx				spell to cast
mov esi, ecx				character #
pop eax					set eax to true
jne 00458D8C				[esp+08] true, skip
cmp dword ptr [004B9FB0], eax		? and true
jne 00458DA0				? is not true, jump

00458D8C:
cmp byte ptr [esp+0C], 00		1st push & false
je 00458DC0					false, jump
mov edx, edi				spell to cast
mov ecx, esi				character #
call 00429708				?
	if local player cast's spell
		set's eax to spell level
	if not, set's eax to 1
test eax, eax
jg 00458DA4			if mod. spell level>0 or other player cast the spell, jump

00458DA0:
xor eax, eax				set cast to false
jmp 00458DC0

00458DA4:
mov edx, edi
mov ecx, esi
call 00458C34				sets eax to cost to cast
imul esi, 000054D8			character record
xor ecx, ecx
cmp dword ptr [esi+00687924], eax	mod. current mana
setnl cl					boolean: mana>=eax
mov eax, ecx				boolean: mana>=eax

00458DC0:
pop edi
pop esi
ret 0008					frees up the 2 pushed dwords

========================================================

ecx - player number

00458D23: Cast spell
cmp ecx, dword ptr [00687774]
push esi
jne 00458D72				not ?local player, jump to end
mov esi, ecx				player number
imul esi, 000054D8			player record
movsx eax, byte ptr [esi+00687820]	??
sub eax, 00000000
je 00458D72					? = 0, jump to end
dec eax
je 00458D57					? = 1, jump (book)
dec eax
je 00458D50					? = 2, jump (scroll)
dec eax
jne 00458D72				? > 3, jump to end
call 0041F608				? = 3, call (staff)
pop esi
ret

00458D50:
call 0041F4B0
pop esi
ret

00458D57:
call 00458C34
sub dword ptr [esi+00687924], eax	modified current mana
sub dword ptr [esi+0068791C], eax	base current mana
mov dword ptr [004B9A64], 00000001

00458D72:
pop esi
ret

========================================================

0045A6A7: CALL 
	Griswold's item repair cost calcuations

Called from 0045A4E3, 0045A516, 0045A549, 0045A57C, 0045A5B9

0045A6A7:
push ecx
mov eax, dword ptr [006A043C]
push ebx
imul eax, 00000170
push ebp
push esi
push edi
mov esi, ecx
lea ebp, dword ptr [eax+006A1D20]
push 0000005C
pop ecx
mov edi, ebp
repz
movsd
mov bl, byte ptr [ebp+3C]		NMU
mov dword ptr [esp+10], edx
test bl, bl
je 0045A6EC
cmp dword ptr [ebp+38], 00000000	Id Boolean
je 0045A6EC
mov eax, dword ptr [ebp+000000C8]	Id'ed Cost
push 00000064
imul eax, 0000001E
cdq
pop ecx
idiv ecx					Id'ed $ * 30/100
	reduction for magic items since magic items have a high cost
mov dword ptr [ebp+000000C4], eax	Unid'ed Cost

0045A6EC:
mov ecx, dword ptr [ebp+000000F0]	Max Dur
push 00000064
mov eax, ecx
sub eax, dword ptr [ebp+000000EC]	Max-Cur
imul eax, 00000064
cdq
idiv ecx					100*(M-C)/Max
pop ecx
imul eax, dword ptr [ebp+000000C4]	100*((M-C)/Max)*Unid'ed $
cdq
idiv ecx
	100*((M-C)/Max)*Unid'ed $/100
test eax, eax
jne 0045A71D
test bl, bl
je 0045A71A
cmp dword ptr [ebp+38], eax		Id Boolean
jne 0045A746

0045A71A:
push 00000001
pop eax

0045A71D:
cmp eax, 00000001
jle 0045A724
sar eax, 1				cost to repair div 2

0045A724:
mov dword ptr [ebp+000000C8], eax
mov dword ptr [ebp+000000C4], eax
........

========================================================

0045AC8C: Does_Backpack_Item_Need_Recharging

Called from 0045ADD7

eax - Initial value discarded.
	Passes boolean value, true if item is a staff in need of charging

ecx - Initial value, item number in backpack
	Returns a PNU value

edx - Initial value discarded
	Returns current charges

0045AC8C: Does_Backpack_Item_Need_Recharging
mov edx, dword ptr [00687774]
imul ecx, 00000170
imul edx, 000054D8
add ecx, edx
xor eax, eax
cmp dword ptr [ecx+0068850C], 0000000A	Item & Staff
jne 0045ACBC					no, ret
mov edx, dword ptr [ecx+006885E8]		current charges
cmp edx, dword ptr [ecx+006885EC]		max charges
je 0045ACBC
push 00000001
pop eax

0045ACBC:
ret

--------------------------------------------------------

0045ACBD: Calc Recharge Cost And Advance To Next
push ebp
mov ebp, esp
push ecx
mov eax, dword ptr [ebp+000000E8]	E0 = Spell Code
push ebx
mov ebx, dword ptr [006A043C]		Item #
imul eax, 00000038			Spell info record
imul ebx, 00000170			Item record
mov eax, dword ptr [eax+004A3484]
	5 x spell multiplier (used to calc. staff cost)
push esi
push edi
mov dword ptr [ebp-04], ecx
push 0000005C				# of dword in item
lea edi, dword ptr [ebx+006A1D20]	item list
pop ecx
lea esi, dword ptr [ebp+08]		item on stack
repz
movsd
add dword ptr [ebx+006A1DE4], eax	Inc Unided cost by
	5 x spell multiplier (used to calc. staff cost)
mov ecx, dword ptr [ebx+006A1E08]	Max charges
mov eax, ecx				Max charges
mov esi, dword ptr [ebx+006A1DE4]	Unided cost
sub eax, dword ptr [ebx+006A1E04]	Max-Current
push 00000064
imul eax, 00000064			100x Spent charges
cdq
idiv ecx					100x Spent/Max
pop ecx					100
pop edi
imul eax, esi				
				(100 x Spent) Div Max x Unided
cdq
idiv ecx
		((100 x Spent) Div Max x 'Unided') Div 100
mov ecx, dword ptr [006A043C]		item #
pop esi
sar eax, 1
	((100 x Spent) Div Max x 'Unided') Div 100 Div 2
inc dword ptr [006A043C]		Next item #
mov dword ptr [ebx+006A1DE4], eax	Unided cost
mov dword ptr [ebx+006A1DE8], eax	Ided cost
mov al, byte ptr [ebp-04]
mov byte ptr [ecx+006A9D20], al	byte array
pop ebx
leave
ret 0170

========================================================

0045BC98: Witch's_Recharge_Staff
push ecx
push ecx
push ebx
push ebp
push esi
push edi
push 00000001
xor edi, edi
pop ebx				? list item # ?
mov dword ptr [esp+14], edi	set to 0
mov byte ptr [006A1D10], bl	0001
mov dword ptr [006A043C], edi
mov eax, 006A1D28			1st of 30 items

0045AD63: 				loop through 30 items
or dword ptr [eax], FFFFFFFF
add eax, 00000170
cmp eax, 006A6228			31 (not proccessed)
jl 0045AD63
mov eax, dword ptr [00687774]
mov ecx, eax
imul ecx, 000054D8
cmp dword ptr [ecx+006880BC], 0000000A
				left hand item type & staff
jne 0045ADBF		not a staff, jump
mov edx, dword ptr [ecx+00688198]
cmp edx, dword ptr [ecx+0068819C]
je 0045ADBF			charges at max, jump
sub esp, 00000170		allocate for item on the stack?
lea esi, dword ptr [ecx+006880B4]	left hand address
mov dword ptr [esp+00000184], ebx
	? sans -170 leaves [esp+14]
push 0000005C
pop ecx					5C = 170/4
mov edi, esp				stack-0170h
repz						repeat CX times.
movsd

	Move item at DS:ESI to the location ES:EDI
	From left hand to 

or ecx, FFFFFFFF
call 0045ACBD
		Calc_Recharge_Cost_And_Advance_To_Next
mov eax, dword ptr [00687774]
xor edi, edi

0045ADBF:
mov ecx, eax
xor ebp, ebp
imul ecx, 000054D8
cmp dword ptr [ecx+0068BE84], edi
jle 0045AE31
mov dword ptr [esp+10], edi

0045ADD5:
mov ecx, ebp
call 0045AC8C	Does_Backpack_Item_Need_Recharging
test eax, eax
je 0045AE13
mov eax, dword ptr [00687774]
mov ecx, dword ptr [esp+10]
imul eax, 000054D8
sub esp, 00000170
mov dword ptr [esp+00000184], ebx
lea esi, dword ptr [eax+ecx+00688504]	backpack item
push 0000005C
pop ecx
mov edi, esp
repz
movsd
mov ecx, ebp
call 0045ACBD
		Calc_Recharge_Cost_And_Advance_To_Next
xor edi, edi
........


0045AEDE: ........

========================================================

Click on the dead town guy...
........
00462B36:
........
(00061F56)	Warrior:	000002D1
(00061F6E)	Rogue:	0000026A
(00061F87)	Sorcerer:	00000203

========================================================

0046B440:

	push [weapon(0..8)+00480230]
	push [ armor(0..2)+00480228]
	push [class(0..2)+0048023C]
	push "%c%c%c"
	push [ebp-20]

push clvl
push ADDRESS	Points to lines like "Level : %i"
push 004B9B18	Where lines of text are stored in the lower text window
call 0046B440

0046B440:
sub esp, 00000020
mov eax, dword ptr [esp+24]
mov ecx, dword ptr [ebp+28]
mov dword ptr [esp+08], eax
mov dword ptr [esp], eax
lea eax, dword ptr [esp+2C]
push esi
push eax
lea edx, dword ptr [esp+08]
push ecx
push edx
mov [esp+1C], 00000042
mov [esp+14], 7FFFFFFF
call 0046D7D0
mov esi, eax
mov eax, dword ptr [esp+14]
add esp, 0000000C
dec eax
mov dword ptr [esp+08], eax
js 0046B492
mov eax, dword ptr [esp+04]
mov byte ptr [eax], 00
mov eax, esi
pop esi
add esp, 00000020
ret

========================================================

0046BB10: CALL

pushed from one instance - B0, 00647D50, start of effect record

Note: Notes are based on one instance of the routine being called.

0046BB10:
push ebp
mov ebp, esp
push edi
mov esi, dword ptr [ebp+0C]		00647D50
mov ecx, dword ptr [ebp+10]		B0
mov edi, dword ptr [ebp+08]		start of effect record
mov eax, ecx				B0
mov edx, ecx				B0
add eax, esi				B0+00647D50
cmp edi, esi				start of effect record & 00647D50
jbe 0046BB30
cmp edi, eax				start of effect record & B0+00647D50
jb 0046BCA8

0046BB30:
test edi, 00000003			start of effect record
jne 0046BB4C
shr ecx, 02
and edx, 00000003
cmp ecx, 00000008
jb 0046BB6C
repx
movsd
jmp dword ptr [4*edx+0046BC58]
........
========================================================

0046BE90 : CALL Shift_Quad_word_EDX:EAX_Left_By_CL

0046BE90: Shift_Quad_word_EDX:EAX_Left_By_CL

cmp cl, 40        - magic code and 40h (code goes from 2..2C)
jnb 0046BEAA      - should never jump ? returns 00
cmp cl, 20        - only magic code I know above 20 is Spectral Elixer
jnb 0046BEA0      - Jump for cl's >= 20h
shld edx, eax, cl - (* can't be used to shift more than 1F *)
shl eax, cl       - basically, a edx:eax shl cl.
ret

0046BEA0:
mov edx, eax - set edx to eax
xor eax, eax - set eax to 0   - basically, a shld edx,eax,20h
and cl, 1F   - basically -20h from the 20..3F range
shl edx, cl  - shift it by the remainder
ret

0046BEAA:
xor eax, eax
xor edx, edx
ret

========================================================

0046C3E0: Set_Last_Push_To_Absolute_Value
mov eax, dword ptr [esp+04]	set eax to last push?
test eax, eax
jge 0046C3EA			?if it's not neg, jump
neg eax

0046C3EA:
ret

========================================================

Code is at offset 00400C00.

================================


Life stealing .... 44f9b4 and 44f9c5 (3/100 and 5/100?)

0041FE9A


  posted 14 August 2001 11:21                       
--------------------------------------------------------------------------------
Well, the progress on my CEL/CL2/BMP converter isn't as smooth as I'd wish - the code is a mess and there's a couple of memory leaks that need to be weeded out (ETA: about 10 days from now). Anyways, here's what I've learned about the CL2 format so far. Don't hesitate to email me if you find incorrect information, omissions, typos, etc.



The Unofficial CL2 File Format Specification (V0.0)===================================================0   PrefaceThis document describes the file format for the .CL2 files found in the DiabDat.MPQ archive. They are container files for collections of 8 bit palettized images used for sprite animations.Any multi-byte values found in a CL2 file are stored in little endian byte order, i.e. the least significant byte is first.Moreover, all values (even single bytes) are unsigned numbers.Quick glossary:Frame:  an individual imageClip:   a contiguous series of frames, typically forming a         coherent animation1.  CL2 Format SpecificationThe basic structure of a CL2 file is as follows:[{CL2 Group Header}]{CL2 Clip Header(s)}{CL2 Frame Header(s) and Frame Data}Note that all clip headers immediately follow the group header, i.e. before any frame header and frame data.The group header is optional. A CL2 file without a group header consists of a single clip:{CL2 Clip Header}{CL2 Frame Header(s) and Frame Data}1.1 CL2 Group HeaderThe CL2 group header is a list of 32 bit words (DWORDs) at the beginning of a CL2 file. Each DWORD is a byte offset from the start of the CL2 file to the first byte of the corresponding clip header, i.e. the first DWORD points to the first group, the second DWORD points to the second group, and so on.The CL2 group header is optional, i.e. it may be missing from certain CL2 files. A file without group header implicitly consists of a single clip which contains all frames in that file.DWORD   value------------------------------------------------------  0     {Offset to CL2 Clip Header #1}  1     {Offset to CL2 Clip Header #2}...N-1     {Offset to CL2 Clip Header #N}The number N of clips is not stored in the CL2 file; a CL2 reader must determine it heuristically if it's unknown.1.2 CL2 Clip HeaderThe CL2 clip header is a list of DWORDs which contains information about the number, location and size of its individual frames.The first DWORD is the number N of frames in this clip.The second to (N+1)th DWORD are the byte offsets from the start of the CL2 clip header (not necessarily the start of the file!) to the corresponding frame header.The data for all frames of a clip must be contiguous, i.e. the size of a frame (this is the sum of the size of the frame header and the size of the frame data) can be computed as the difference between two consecutive frame header offsets.The last ((N+2)th) DWORD is consequently the offset where a (hypothetical) (N+1)th frame header would be located.DWORD   value------------------------------------------------------  0     {Number of Frames (N)}  1     {Offset to Frame Header #1}...  N     {Offset to Frame Header #N}N+1     {Offset to Frame Header #N + Size of Frame #N}1.3 CL2 Frame HeaderThe CL2 frame header is a list of five 16 bit values (WORDs) with offsets from the start of the CL2 frame header to stripes of 32 lines of image data. The actual frame data starts right after the frame header.WORD    Value------------------------------------------------------  0     {Offset to Line #1}  1     {Offset to Line #33}...  4     {Offset to Line #129}Unused frame header entries must be filled with a value of 0.1.4 CL2 Frame DataThe CL2 frame data is a series of 8 bit code values (BYTEs), each followed by zero to 62 BYTEs that are indices into a 256 color palette.Code (N)    Meaning------------------------------------------------------      0x00  unknown (undefined?)0x01..0x7F  skip over next N pixels (transparent)      0x80  unknown0x81..0xBE  repeat next BYTE 0xBF-N times (RLE)0xBF..0xFF  copy next 0x100-N BYTEs (verbatim)The codes 0xBE and 0xFF are redundant, i.e. they have exactly the same meaning (take the next BYTE verbatim as pixel color index).The X Y dimensions of a frame are not stored in the CL2 file; a CL2 reader must determine them heuristically if they are unknown.2.  Implementor's Notes2.1 Number of Group Header Entries (= Clips)The number of entries in the group header can basically be any arbitrary non-negative number. However, D1 nigh always uses 8 (the only two exceptions are files without any group header at all).A simple algorithm to determine the number of clips might just take the first DWORD from the file divided by four. This assumes that the first clip header directly follows the group header.2.2 Placement of Clip HeadersA reader can easily avoid the restriction of having all clip headers lumped before any frame headers and frame data.However, a write should adhere to the specified order.2.3 Number of Frame Header EntriesA CL2 reader can determine the number of frame header entries by dividing the first WORD value (i.e. the offset to the first line of frame data) by 2 (the number of bytes in a WORD).Moreover, a reader might support files without any frame header at all (i.e. the clip header frame offset points directly to the first image data code byte).A CL2 writer should always create a frame header of five WORDs.3.  CL2 Files in the DiabDat.MPQ ArchiveCL2 files occur only in the following DiabDat.MPQ archive paths:Missiles\Monsters\PlrGFX\3.1 Group HeadersIf a group header is present at all then it consist of eight DWORDs, i.e. there are 8 clips. This is just an observation from the files in the DiabDat.MPQ archive, not a real limitation.The individual clips typically show the same object (sprite) and action, but facing different directions.They appear in this order:1. facing down (i.e. looking at the viewer)2. facing lower left3. facing left4. facing upper left5. facing up  (i.e. the viewer sees the backside)6. facing upper right7. facing right8. facing lower rightApart from the CL2 files in the Missiles\ directory (that all have no group header at all ) there are only two CL2 files in the DiabDat.MPQ archive that do not have a group header:Monsters\Golem\Golemd.CL2   (12 frames, golem dies)Monsters\Golem\Golems.CL2   (20 frames, golem gets summoned)The file Monsters\DarkMage\Dmagew.CL2 has a corrupted group header (likely a result from using -1 as frame data size when the file was created):0x00000000  20 00 00 00  27 00 00 00  2E 00 00 00  35 00 00 000x00000010  3C 00 00 00  43 00 00 00  4A 00 00 00  51 00 00 000x00000020  00 00 00 00  08 00 00 00  00 00 00 00  08 00 00 000x00000030  00 00 00 00  08 00 00 00  00 00 00 00  08 00 00 000x00000040  00 00 00 00  08 00 00 00  00 00 00 00  08 00 00 000x00000050  00 00 00 00  08 00 00 00  00 00 00 00  08 00 00 00The individual clips (all empty, i.e. with no frames at all!) start at file offsets 0x00000020, 0x00000028, 0x00000030, 0x00000038, 0x00000040, 0x00000048, 0x00000050, and 0x00000058.Thus the correct group header should actually be:0x00000000  20 00 00 00  28 00 00 00  30 00 00 00  38 00 00 000x00000010  40 00 00 00  48 00 00 00  50 00 00 00  58 00 00 003.2 Clip HeaderAll CL2 files in DiabDat.MPQ have their clip headers stored in a block right after the group header and before the frame headers and data. This makes the Dmagew.CL2 file (see above) look a bit odd, as the value of 8 that is stored as the last DWORD in their clip header would suggest that their frame header / data (actually non-existent due to a frame count of 0!) would immediately follow each individual clip header. However, as the frame count is zero anyways this is of purely academic interest.Although the formal specification doesn't really requires this it should be noted that the number of frames for all clips in a DiabDat.MPQ CL2 file is always the same (although it is different when for different files). Certainly this reduces the amount of information needed to be kept outside of the file itself, and makes sense as the animations then don't have varying lengths depending on the direction the animated object is facing.3.3 Frame HeaderAll CL2 files in DiabDat.MPQ have a frame header stored right before the frame data. In all cases this frame header has five entries (i.e. it is 10 bytes long) and thus starts with a word value of 0x000A. This is sufficient as the maximum number of lines in any of the DiabDat.MPQ CL2 files is 160 (= 5 * 32).However, when using the frame header entries for computing the frame X Y resolution there are some cases where these values are misleading.For example, the file PlrGFX\Warrior\wlb\wlbat.CL2 would give a resolution of X = 128 and Y = 96 when in fact it actually has a resolution of X = 96 and Y = 128! This discrepancy makes it unlikely that the frame headers are ever really used by the D1 program code. A better approach to determine the resolution of a CL2 file is probably to try various values that match the overall frame data size and look for clusters of non-transparent pixels. Fortunately, both the X and Y dimensions in the actual DiabDat.MPQ CL2 files seems to always be a multiple of 32 (the basic "tile" for the D1 rendering is 32 by 32 pixels), so it shouldn't require too many passes. The minimum frame size in the DiabDat.MPQ CL2s is 64 by 64, and the maximum is 160 by 160.3.4 Frame DataHere's a table that shows how often each code word (BYTE) appears among all CL2 files in the DiabDat.MPQ archive:0x00       0 2390621 1487478 1037752  772424  571308  457420  3753400x08  305767  258829  222377  182091  159167  140594  119773  1064850x10   93228   81806   67352   64397   57380   54297   46233   417250x18   43797   39267   42470   45635   48873   41022   42635   480070x20   69557   39619   32237   34796   39582   41682   43711   439300x28   46184   43972   41979   36767   33534   31151   30555   294230x30   28439   30874   30929   32077   37704   42228   40887   430200x38   46412   50644   51982   55838   60701   63491   70186   757190x40   83949   90503   95191  102373  108715  117765  125489  1293100x48  128329  128992  129294  130536  130134  132125  137257  1322030x50  129490  130320  125188  125704  117069  112959  105763  1042250x58  114714  116840   98139   84374   75129   72516   76595   627490x60   51832   49762   53041   52360   53764   55349   57953   584680x68   59736   59563   59804   59667   57245   56959   56402   563700x70   54933   53559   52159   49050   45939   41454   37888   397090x78   42428   45222   43827   41848   40856   40104   38314 36030500x80       0     608      99     100     112      98     116     1270x88     118     154     134     159     191     212     267     2730x90     357     321     402     468     515     681     673     8260x98     949     965    1264    1365    1732    1742    2122    24390xA0    2943    3359    3841    4961    5747    6394    7683    93000xA8   10869   13382   16336   20365   25833   32799   41637   536990xB0   67937   85431  104107  124142  147744  177197  223604  2945300xB8  401840  584550  960308 1817925 4226901     237     187     2880xC0      47      59      78      77      82      77     115     1250xC8     140     135     203     229     228     258     368     3680xD0     412     479     598     861     822    1082    1257    17270xD8    1838    2297    2871    3096    4200    4971    5574    70550xE0    8789   10323   11919   14334   17432   21648   26712   327430xE8   38875   47435   58390   71216   87498  103571  130673  1503210xF0  178147  211416  253165  291460  344542  397116  468646  5756540xF8  747316  935041 1153205 1421626 1756964 2138106 3155430 4471231This is a list of all color indices that never appear in any of the CL2 files in the DiabDat.MPQ archive:   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 255It should be noted that neither of the code values from 1 to 127 (including the boundaries) is ever used - they are probably reserved for the "static" background objects.4   Revision HistoryThis document is maintained by Honi B (that's me). Please send email to sourceror@hotmail.com if you want to contact the author.V0.0  010802  first draftCopyright (C) 2001 Honi B
 